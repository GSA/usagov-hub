<?php

// @TODO Slack messaging
// @TODO Commit as user (not www-data)
// @TODO Mod's personal log system. And display on form
// @TODO Email dispatched when files are fully synced?

/*
 * Implements HOOK_menu()
 */
function repo_sync_menu() {

    $items = array();
    
    // Configuration page URL handler
    $items['admin/repo-sync/ui'] = array(
        'title' => 'Repo-Sync Settings',
        'description' => 'Setup and manage a Git Repository sync',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('repo_sync_form'),
        'access arguments' => array('access administration pages'),
        'type' => MENU_NORMAL_ITEM
    );

    // Trigger callback URL handler
    $items['admin/repo-sync/trigger-sync'] = array(
        'title' => 'Repo-Sync Trigger',
        'description' => 'Setup and manage a Git Repository sync',
        'page callback' => 'repo_sync_triggerSyncMenuCallback',
        'access callback' => 'repo_sync_true',
        'type' => MENU_CALLBACK
    );

    return $items;
}

function repo_sync_true() {
    return true;
}

function repo_sync_form() {

    $triggerUrl = 'https://'.$_SERVER['HTTP_HOST'].'/admin/repo-sync/trigger-sync';

    $form = array();

    $form['actions'] = array(
        '#type' => 'fieldset',
        '#title' => 'Actions',
        '#collapsible' => true,
        '#collapsed' => false,
    );

    $form['actions']['dosyncnow'] = array(
        '#type' => 'submit', 
        '#value' => 'Trigger Sync Now', 
    );

    $form['trigsettings'] = array(
        '#type' => 'fieldset',
        '#title' => 'Sync Trigger',
        '#collapsible' => true,
        '#collapsed' => false,
    );

    $form['trigsettings']['secret'] = array(
        '#type' => 'textfield', 
        '#title' => 'Sync-Trigger Security Key', 
        '#description' => "This will be the string expected when a bit hits; <i>{$triggerUrl}?key=<b>SecurityKeyHere</b></i>",
        '#default_value' => repo_sync_settings('secret'), 
        '#size' => 80, 
        '#required' => TRUE,
    );

    $trigForceSilent = !function_exists('fastcgi_finish_request');
    $form['trigsettings']['triggersilent'] = array(
        '#type' => 'radios',
        '#title' => 'SyncTrigger-URL shall return:',
        '#default_value' => ( $trigForceSilent ? 1 : repo_sync_settings('triggersilent') ),
        '#disabled' => $trigForceSilent,
        '#description' =>
            ( $trigForceSilent ? 'Not an option since fastcgi_finish_request() is unsupported in this environment.' : '' ),
        '#options' => array(
            0 => 'Immediately, with no data (close the web-socket connection and then run the sync logic)',
            1 => 'Debug data (which will keep the web-socket open/lagging until the sync logic has fully run)',
        )
    );

    $form['reposrc'] = array(
        '#type' => 'fieldset',
        '#title' => 'Source Repository',
        '#collapsible' => true,
        '#collapsed' => true,
    );

    $form['reposdest'] = array(
        '#type' => 'fieldset',
        '#title' => 'Destination Repository',
        '#collapsible' => true,
        '#collapsed' => true,
    );

    $form['reposrc']['src'] = array(
        '#type' => 'textfield', 
        '#title' => 'Git-Repository HTTPS-URL', 
        '#field_prefix' => 'HTTPS://',
        '#description' => 'Source repository to pull files from.',
        '#default_value' => repo_sync_settings('src'), 
        '#size' => 80, 
        '#required' => TRUE,
    );

    $form['reposrc']['srcuser'] = array(
        '#type' => 'textfield', 
        '#title' => 'Account Username', 
        '#default_value' => repo_sync_settings('srcuser'), 
        '#size' => 25, 
        '#required' => TRUE,
    );

    $form['reposrc']['srcpass'] = array(
        '#type' => 'password', 
        '#title' => 'Account Password', 
        '#attributes' => array('value' => repo_sync_settings('srcpass')),
        '#size' => 25, 
        '#required' => TRUE,
    );

    $form['reposrc']['srcbranch'] = array(
        '#type' => 'textfield', 
        '#title' => 'Branch Name', 
        '#default_value' => repo_sync_settings('srcbranch'), 
        '#size' => 25, 
        '#required' => TRUE,
    );

    $form['reposrc']['srcwlistpath'] = array(
        '#type' => 'textfield', 
        '#title' => 'White-List Path', 
        '#default_value' => repo_sync_settings('srcwlistpath'), 
        '#description' => 'Enter the relative path to the white-list in the source repsoitory.',
        '#size' => 25, 
        '#required' => TRUE,
    );

    $form['reposdest']['dest'] = array(
        '#type' => 'textfield', 
        '#title' => 'Git-Repository HTTPS-URL', 
        '#field_prefix' => 'HTTPS://',
        '#description' => 'Destination repository to place new files into.',
        '#default_value' => repo_sync_settings('dest'), 
        '#size' => 80, 
        '#required' => TRUE,
    );

    $form['reposdest']['destuser'] = array(
        '#type' => 'textfield', 
        '#title' => 'Account Username', 
        '#default_value' => repo_sync_settings('destuser'), 
        '#size' => 25, 
        '#required' => TRUE,
    );

    $form['reposdest']['destpass'] = array(
        '#type' => 'password', 
        '#title' => 'Account Password', 
        '#attributes' => array('value' => repo_sync_settings('destpass')),
        '#size' => 25, 
        '#required' => TRUE,
    );

    $form['reposdest']['destbranch'] = array(
        '#type' => 'textfield', 
        '#title' => 'Branch Name', 
        '#default_value' => repo_sync_settings('destbranch'), 
        '#size' => 25, 
        '#required' => TRUE,
    );

    $form['reposdest']['srcwlisttarget'] = array(
        '#type' => 'textfield', 
        '#title' => 'White-List Target Directory', 
        '#default_value' => repo_sync_settings('srcwlisttarget'), 
        '#description' => 'This will be the based-directory files are copied into, in the destination-repo.',
        '#size' => 80, 
        '#required' => TRUE,
    );

    $form['reposdest']['srcwlistjail'] = array(
        '#type' => 'textarea', 
        '#title' => 'Directory Jail', 
        '#default_value' => repo_sync_settings('srcwlistjail'), 
        '#description' => 'List directories that files are <b>allowed</b> to be copied into. Attempts to '
            .'copy files into any other directory will be rejected.<br/>'
            .'Separate each directory with a <b>new-line</b><br/>'
            .'Note granting access to a directory from this field <b>does not</b> grant access '
            .'recursively (to subdirectories) - you must state each directory this module is allowed '
            .'to touch in the destination-repo.',
        '#size' => 80, 
        '#required' => TRUE,
    );

    $form['reposdest']['allowedext'] = array(
        '#type' => 'textfield', 
        '#title' => 'Allowed File-Extension', 
        '#default_value' => repo_sync_settings('allowedext'),
        '#description' => 'List all allowed file-extensions, separate each extension with a space. '
            .'Please do not include the periods.<br/>Any attempt to save a file with an extension '
            .'not included in this list will be rejected.',
        '#size' => 80, 
        '#required' => TRUE,
    );

    $form['logging'] = array(
        '#type' => 'fieldset',
        '#title' => 'Logging',
        '#collapsible' => true,
        '#collapsed' => false,
    );

    if ( !function_exists('slack_send_message') ) {

        $form['logging']['noslacksupport'] = array(
            '#markup' => '<b>[!!] NOTICE [!!]</b> - You do not have the Slack Drupal module installed '
                .'in this site! Thus there are no Slack options here.<br/><br/>'
        );

    } else {

        $form['logging']['useslack'] = array(
            '#type' => 'checkbox', 
            '#title' => 'Send general debug information into Slack', 
            '#default_value' => repo_sync_settings('useslack'),
        );

        $form['logging']['slackchannel'] = array(
            '#type' => 'textfield', 
            '#title' => 'Slack Channel (for general debug info)', 
            '#default_value' => repo_sync_settings('slackchannel'),
        );

        $form['logging']['useslackverbose'] = array(
            '#type' => 'checkbox', 
            '#title' => 'Send verbose debug information into Slack', 
            '#default_value' => repo_sync_settings('useslackverbose'),
        );

        $form['logging']['slackchannelverbose'] = array(
            '#type' => 'textfield', 
            '#title' => 'Slack Channel (for verbose debug info)', 
            '#default_value' => repo_sync_settings('slackchannelverbose'),
        );

    }

    $form['submitsave'] = array(
        '#prefix' => '<br/>',
        '#type' => 'submit',
        '#value' => t('Save'),
    );

    return $form;
}

function repo_sync_form_validate($form, $form_state) {

    if ( strpos($form_state['input']['src'], 'http://') === 0 ) {
        form_set_error('src', 'Use of insecure HTTP is unacceptable, please use secure HTTPS.');
    }

    if ( strpos($form_state['input']['dest'], 'http://') === 0 ) {
        form_set_error('dest', 'Use of insecure HTTP is unacceptable, please use secure HTTPS.');
    }

    if ( strpos($form_state['input']['src'], '@') !== false ) {
        form_set_error('src', 'Please remove any username or passwords from the target-URL.');
    }

    if ( strpos($form_state['input']['dest'], '@') !== false ) {
        form_set_error('dest', 'Please remove any username or passwords from the target-URL.');
    }

    if ( substr(strtolower($form_state['input']['srcwlistpath']), -4) !== '.txt' ) {
        form_set_error('srcwlistpath', 'The white-list is expected to be a <b>.txt</b> file.');
    }

    if ( strpos($form_state['input']['srcpass'], '@') !== false ) {
        form_set_error('srcpass', 'Sorry, due to technical limitations, passwords cannot contain the @ symbol.');
    }

    if ( strpos($form_state['input']['destpass'], '@') !== false ) {
        form_set_error('destpass', 'Sorry, due to technical limitations, passwords cannot contain the @ symbol.');
    }

}

function repo_sync_form_submit($form, $form_state) {

    // strtolower
    $form_state['input']['src'] = strtolower($form_state['input']['src']);
    $form_state['input']['dest'] = strtolower($form_state['input']['dest']);

    // Trim beginning https:// if present
    if ( substr($form_state['input']['src'], 0, 8) === 'https://' )
        $form_state['input']['src'] = substr($form_state['input']['src'], 8);
    if ( substr($form_state['input']['dest'], 0, 8) === 'https://' )
        $form_state['input']['dest'] = substr($form_state['input']['dest'], 8);

    // Action processing
    if ( $form_state['input']['op'] === 'Trigger Sync Now' ) {
        ob_start();
        repo_sync_triggerSync();
        ob_end_clean();
        return;
    }

    // Unset any data we dont need to save into the database
    unset($form_state['op']);
    unset($form_state['form_build_id']);
    unset($form_state['form_token']);
    unset($form_state['form_id']);

    // Now lets just throw everything in $form_state into the database
    variable_set('repo_sync_settings', $form_state['input']);
}

function repo_sync_settings($getSetting = 'ALL') {

    $data = variable_get('repo_sync_settings', array());

    if ( $getSetting !== 'ALL' ) {
        if ( !isset($data[$getSetting]) ) $data[$getSetting] = null;
        $data = $data[$getSetting];
    }

    return $data;
}

/**
 * void repo_sync_triggerSyncMenuCallback()
 *
 * A menu-callback handler. This is really just a (security processor) wrapper-function
 * for the repo_sync_triggerSync() function - which is what does the real logic.
 *
 * [!!]WARNING[!!] => THIS FUNCTION WILL TERMINATE THE PHP-THREAD
 */
function repo_sync_triggerSyncMenuCallback() {

    // Kill anything that Drupal was about to print out
    @ob_end_clean();
    while ( @ob_end_clean() );
    header("Content-Type:text/plain");

    // Don't continue if we are not ready yet
    if ( count(repo_sync_settings()) === 0 ) {
        repo_sync_logEvent(false, 'Rejected a request to sync since the servie is not yet setup');
        exit('Error - This service is not yet setup');
    }

    // Verify security key
    $expectKey = repo_sync_settings('secret');
    if ( empty($expectKey) || empty($_REQUEST['key']) || $_REQUEST['key'] !== $expectKey ) {
        repo_sync_logEvent(true, 'Error - Incorrect security key provided by requester. No sync triggered.');
        exit();
    }

    // Clone the web-socket connection as desired
    if ( intval(repo_sync_settings('triggersilent')) === 0 && function_exists('fastcgi_finish_request') ) {
        flush();
        fastcgi_finish_request();
    }

    // Fire the function that does the real logic
    repo_sync_logEvent(false, 'A request for a sync has occurred - now syncing.', false);
    if ( repo_sync_triggerSync() === false ) {
        repo_sync_logEvent(false, 'Repo-Sync failure!', false);
    } else {
        repo_sync_logEvent(false, 'Repo-Sync Complete', false);
    }
}

/**
 * [@TODO] repo_sync_triggerSync()
 *
 * Executes the logic necessary to sync the file(s) from one repo into the other.
 */
function repo_sync_triggerSync($settings = 'ASSUME-DEFAULT') {

    // Get settings from the database unless overridden in function-call
    if ($settings === 'ASSUME-DEFAULT') $settings = repo_sync_settings('ALL');
    //dsm($settings); return;

    // Create a working directory
    $wdir = '/tmp/gitsync'.time();
    if ( !@mkdir($wdir) ) {
        repo_sync_logEvent(true, 'ERROR - Could not create directory '.$wdir, true);
        return false;
    }
    if ( !@mkdir($wdir.'/src') ) {
        repo_sync_logEvent(true, 'ERROR - Could not create directory '.$wdir, true);
        return false;
    }
    if ( !@mkdir($wdir.'/dest') ) {
        repo_sync_logEvent(true, 'ERROR - Could not create directory '.$wdir, true);
        return false;
    }

    // Pull down the source-repo
    $cloneUrl = 'https://'.$settings['srcuser'].':'.$settings['srcpass'].'@'.$settings['src'];
    $rslt = `git clone '{$cloneUrl}' {$wdir}/src 2>&1`;
    if ( strpos($rslt, 'Authentication failed') !== false ) {
        repo_sync_logEvent(true, 'Error - Could not pull down source-repository due to authentication-error.', true);
        return false;
    }
    
    // Switch to target branch (source repo)
    $rslt = `cd {$wdir}/src; git checkout {$settings['srcbranch']} 2>&1`;
    if ( strpos($rslt, 'error') === 0 ) {
        repo_sync_logEvent(
            true,
            "Error - Could not switch to branch \"{$settings['srcbranch']}\" in source-repo. "
                ."Are you sure this branch exsist on the server?",
            true
        );
        return false;
    }

    // Pull down the destination repo
    $cloneUrl = 'https://'.$settings['destuser'].':'.$settings['destpass'].'@'.$settings['dest'];
    $rslt = `git clone '{$cloneUrl}' {$wdir}/dest 2>&1`;
    if ( strpos($rslt, 'Authentication failed') !== false ) {
        repo_sync_logEvent(true, 'Error - Could not pull down destination-repository due to authentication-error.', true);
        return false;
    }

    // Switch to target branch (source repo)
    $rslt = `cd {$wdir}/dest; git checkout {$settings['destbranch']} 2>&1`;
    if ( strpos($rslt, 'error') === 0 ) {
        repo_sync_logEvent(
            true,
            "Error - Could not switch to branch \"{$settings['destbranch']}\" in destination-repo. "
                ."Are you sure this branch exsist on the server?",
            true
        );
        return false;
    }

    // Get while-list targets
    $wlPath = $wdir . '/src/' . $settings['srcwlistpath'];
    $whiteList = array();
    if ( !file_exists($wlPath) ) {
        repo_sync_logEvent(true, "Error - No white-list found at {$settings['srcwlistpath']} in the source-repository.", true);
        return;
    }
    $whiteList = file($wlPath, FILE_SKIP_EMPTY_LINES + FILE_IGNORE_NEW_LINES);
    if ( $whiteList === false ) {
        repo_sync_logEvent(true, "Error - Could not read white-list file, are permissions set correctly?", true);
        return false;
    }
    $whiteList = repo_sync_resolve($wdir, $whiteList);

    // Resolve real-paths for the directory-jail
    $allowedDirs = array();
    foreach ( explode("\n", $settings['srcwlistjail']) as $dir ) {
        
        $dir = trim($dir);
        $grantDirAccess = rtrim($wdir, '/').'/dest/'.ltrim($dir, '/');
        error_log($grantDirAccess);
        $grantDirAccess = realpath($grantDirAccess);
        if ( !empty($grantDirAccess) ) { // Note that the directoy must exsist for this to pass
            $allowedDirs[] = $grantDirAccess;
        }
    }
    
    // Get a list of allowed file-extension to save into the destination-repo
    $strAllowedExt = $settings['allowedext'];
    $strAllowedExt = trim($strAllowedExt);
    $strAllowedExt = strtolower($strAllowedExt);
    $arrAllowedExt = explode(' ', $strAllowedExt);

    // Copy over white-listed files
    foreach ( $whiteList as $lineNumb => &$entry ) {

        // Get entry information
        $entry = trim(trim($entry), "\"'");
        $fileRelSrc = $entry;
        $fileRelDest = trim($settings['srcwlisttarget'],'/').'/'.$entry;

        // Determine paths
        $filePathSrc = $wdir.'/src/'.$fileRelSrc;
        $filePathDest = $wdir.'/dest/'.$fileRelDest;
        $filePathDest = str_replace('//', '/', $filePathDest);

        // Sanity-check - directories should have been filtered out by repo_sync_resolve()
        if ( is_dir($filePathSrc) ) {
            continue;
        }

        // Security
        if ( strpos($filePathSrc, '..') !== false || strpos($filePathDest, '..') !== false ) {
            repo_sync_logEvent(true, "Warning - White-list entry contains unacceptable \"..\" in row {$lineNumb}");
            continue;
        }

        // Security - Directory-Jail
        $dirTarget = realpath( dirname($filePathDest) );
        if ( !in_array($dirTarget, $allowedDirs) ) {
            repo_sync_logEvent(true, "Warning - White-listed file '{$fileRelSrc}' is not allwed to be written "
                ."to '{$fileRelDest}' as per the directory-jail rules, skipping...");
            continue;
        }

        // Security - Extension limitations
        $fileExt = pathinfo($filePathSrc, PATHINFO_EXTENSION);
        $fileExt = strtolower($fileExt);
        if ( !in_array($fileExt, $arrAllowedExt) ) {
            repo_sync_logEvent(true, "Warning - White-listed file '{$fileRelSrc}' is not allowed to be written "
                ."to the target-repo since .{$fileExt} files are not granted xfer permission, skipping...");
            continue;
        }

        // Existence check
        if ( !file_exists($filePathSrc) ) {
            $msg = "Warning - White-listed file {$fileRelSrc} does not exist in source-repo, skipping...";
            repo_sync_logEvent(true, $msg);
            continue;
        }

        // Copy the file over into the dest-repo
        @unlink($filePathDest);
        if ( !copy($filePathSrc, $filePathDest) ) {
            $msg = "Error - Failed to copy \"{$filePathSrc}\" to \"{$filePathDest}\". Permissions? Skipping...";
            repo_sync_logEvent(true, $msg);
            continue;
        } else {
            // Not logging this event here anymore since constant-pings to Slack can lag things...
        }
    }

    // Add all file-changes under Git-tracking
    `cd {$wdir}/dest; git add -A;`;

    // Push up the new files
    $rslt = `cd {$wdir}/dest; git commit -m 'test'; git push`;
    if ( strpos($rslt, 'nothing to commit') !== false ) {
        repo_sync_logEvent(true, "Warning: Nothing was pushed in repo-sync, no files appear to be updated.");
    } else {
        if ( strpos($rslt, 'error') !== false ) {
            repo_sync_logEvent(true, "Error: An unexpected error occurred during git-push.");
            return;
        } else {
            $retLines = explode("\n", trim($rslt));
            repo_sync_logEvent(true, "Notice: Repo-sync completed successfully. Git returned: ".$retLines[count($retLines)-1]);
        }
    }

    // Clean up
    `rm -r {$wdir}`;

}

function repo_sync_resolve($wdir, $whiteList) {

    $ret = array();
    
    // Resolve wild-cards and directories
    foreach ( $whiteList as $lineNumb => $entry ) {

        $entry = trim(trim($entry), "\"'");
        $filePathSrc = $wdir.'/src/'.$entry;

        // If the target is a directoy, assume directory/*
        if ( is_dir($filePathSrc) ) {
            $entry = rtrim($entry).'/*';
        }

        // If the target contains a wild-card, inclued files matching pathspec
        if ( strpos($filePathSrc, '*')  === false) {

            $ret[] = $entry;
        } else {

            $starFiles = explode("\n",`ls -Ad $filePathSrc`);
            foreach ( $starFiles as $starFile ) {
                $starFile = str_replace($wdir.'/src/', '', $starFile);
                $starFile = str_replace('//', '/', $starFile);
                $ret[] = trim($starFile);
            }
        }
    }

    return $ret;
}

function repo_sync_logEvent($print, $strMessage, $isVerbose = true) {

    //@TODO - add to a log specific log file or table

    // Print the string if requested
    if ( $print ) {
        print $strMessage;
    }

    // Log to PHP's error-log (which should in tern, log to Splunk)
    error_log( 'Repo-Sync: ' . $strMessage );

    // Log to Slack
    $settings = repo_sync_settings('ALL');
    $msg = "Repo-Sync Message: ".$strMessage;
    if ( $isVerbose ) {
        if ( intval($settings['useslackverbose']) === 1 ) {
            slack_send_message($msg, $settings['slackchannelverbose']);
        }
    } else {
        if ( intval($settings['useslack']) === 1 ) {
            slack_send_message($msg, $settings['slackchannel']);
        }
    }

}
