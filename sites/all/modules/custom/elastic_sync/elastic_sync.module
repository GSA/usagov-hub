<?php

 require 'vendor/autoload.php';

$hosts = [
    'elasticsearch:9200'         // IP + Port

];
 // $client = Elasticsearch\ClientBuilder::create()         // Instantiate a new ClientBuilder
 //                     ->setHosts($hosts)      // Set the hosts
 //                     ->build();              // Build the client object

 //Sync drupal data with Elasticsearch
function elastic_sync_node_update($node){
	create_migration_table($node);
}

function elastic_sync_node_insert($node){
	create_migration_table($node);
}

function create_migration_table($node){
	$nid = $node->nid;
	if (!db_table_exists('elastic_sync')){
		$table = array(
	      'description' => 'Migration Node IDs for Elasticsearch.',
	      'fields' => array(
	        'id'  => array(
	          'type' => 'int',
	          'default' => NULL,
	        ),
	        
	      ),
	    );
    	db_create_table('elastic_sync', $table);


    	update_migration_table($nid);
	} else {
		update_migration_table($nid);
	}

}

function update_migration_table($nid){

		$params = array(
        ':nid' => "$nid"
        );

        // Get Number of Statements and print link if exist
        $sql = "INSERT INTO 
                    elastic_sync(id)
                VALUES(:nid)";
        $result = db_query($sql, $params);
}


function elastic_sync_cron(){
	 $sql = "SELECT 
                    DISTINCT(id) as 'NID'
                FROM 
                    elastic_sync";
        $result = db_query($sql);
        $nodelist = $result->fetchCol();
        get_cache_stuff();
        foreach ($nodelist as $item){
        	$node = node_load($item);

        	switch ($node->type){
        		case 'text_content_type':
        			text_asset_index($node);
        			break;
        		case 'html_content_type':
        			html_asset_index($node);
        			break;
        		case 'multimedia_content_type':
        			multimedia_asset_index($node);
        			break;
        		case 'directory_record_content_type':
        			directory_record_index($node);
        			break;
        		case 'file_content_type':
        			file_asset_index($node);
        			break;
        		case 'state_details':
        			state_details_index($node);
        			break;
        	}
        }
}

function text_asset_index($node){
 $hosts = [
    'elasticsearch:9200'         // IP + Port

];

	$node = get_vdn_locations($node);

	$client = Elasticsearch\ClientBuilder::create()->setHosts($hosts)->build();
	
	$wrapper = entity_metadata_wrapper('node', $node);
	$asset_topic_taxonomy = $wrapper->field_asset_topic_taxonomy->value();
	$owner = $wrapper->field_owner->value();
	// $location_url = get_taxonomy_term();
	// url('taxonomy/term/' . $tid);
	$params = [
	    'index' => 'my_index',
	    'type' => 'text_asset',
	    'id' => $node->nid,
	    'body' => [
	    	'id' => $node->nid,
	    	'title' => $node->title,
	    	'summary' =>$node->field_description['und'][0]['value'],
	    	'language' =>$node->field_language['und'][0]['value'],
	    	'html' => $node->body['und'][0]['value'],
	    	'contact_center_only' => $node->field_contact_center_info['und'][0]['value'],
	    	'status' =>$node->field_workflow_state_search['und'][0]['value'],
	    	//'location' => $asset_topic_taxonomy,
	    	'for_use_by' =>$node->field_for_use_by['und'][0]['value'], 
	    	//'priority' =>$node->field_priority['und'][0]['value'],
	    	
	    	
	    	'owner' => $owner,
	    	'location' => $node->locations,
	    	
	    	'changed' => $node->changed,
	    	'created' => $node->created,
	        'edit_url' => $base_url . 'node/' . $node->nid . '/edit',
	     	'archive_date' => $archive_date
	     ]
	];
	// dsm($node);
	dsm($params);
	$response = $client->index($params);
	//dsm($response);
//curl -XGET http://localhost:9200/gsa_gov_content/_search?q=all&pretty=true

}

function html_asset_index($node){
	 $hosts = [
	    'elasticsearch:9200'         // IP + Port

	];
	
	$client = Elasticsearch\ClientBuilder::create()->setHosts($hosts)->build();
	
	$wrapper = entity_metadata_wrapper('node', $node);
	$asset_topic_taxonomy = $wrapper->field_asset_topic_taxonomy->value();
	$owner = $wrapper->field_owner->value();

	$params = [
	    'index' => 'my_html_index',
	    'type' => 'html_asset',
	    'id' => $node->nid,
	    'body' => [
	    	'id' => $node->nid,
	    	'title' => $node->title,
	    	'priority' =>$node->field_priority['und'][0]['value'],
	    	'language' =>$node->field_language['und'][0]['value'],
	    	'notify_marketing_team' =>$node->field_notify_marketing_team['und'][0]['value'],
	    	'for_use_by' =>$node->field_for_use_by['und'][0]['value'],
	    	'features' => $node->field_blog_owner['und'][0]['value'],
	    	'html' => $node->field_html['und'][0]['value'],
	    	'schedule_publish' => $node->field_schedule_publish['und'][0]['value'],
	    	'owner' => $owner, //$node->field_owner['und'][0]['value'],
	    	'asset_topic_taxonomy' => $asset_topic_taxonomy, 
	    	'workflow_state' =>$node->field_workflow_state_search['und'][0]['value'],
	    	'changed' => $node->changed,
	    	'created' => $node->created,
	     	'archive_date' => $archive_date
	     ]
	];

	//dsm($params);
	$response = $client->index($params);

}

function multimedia_asset_index($node){
	 $hosts = [
	    'elasticsearch:9200'         // IP + Port

	];
	$client = Elasticsearch\ClientBuilder::create()->setHosts($hosts)->build();
	
	$wrapper = entity_metadata_wrapper('node', $node);
	$asset_topic_taxonomy = $wrapper->field_asset_topic_taxonomy->value();
	$owner = $wrapper->field_owner->value();

	$params = [
	    'index' => 'my_multimedia_index',
	    'type' => 'multimedia_asset',
	    'id' => $node->nid,
	    'body' => [
	    	'id' => $node->nid,
	    	'title' => $node->title,
	    	'summary' => $node->field_description['und'][0]['value'],
	    	'priority' =>$node->field_priority['und'][0]['value'],
	    	'language' =>$node->field_language['und'][0]['value'],
	    	'notify_marketing_team' =>$node->field_notify_marketing_team['und'][0]['value'],
	    	'for_use_by' =>$node->field_for_use_by['und'][0]['value'],
	    	'alt_text' => $node->field_alt_text['und'][0]['value'],
	    	'transcript' => $node->field_transcript['und'][0]['value'],
	    	'embed_code' => $node->field_embed_code['und'][0]['value'],
	    	'media_type' => $node->field_media_type['und'][0]['value'],
	    	'schedule_publish' => $node->field_schedule_publish['und'][0]['value'],
	    	'owner' => $owner, 
	    	'asset_topic_taxonomy' => $asset_topic_taxonomy, 
	    	'hi_res_version' => $node->field_hi_res_version['und'][0]['value'],
	    	'widget_code' => $node->field_widget_code['und'][0]['value'],
	    	'workflow_state' =>$node->field_workflow_state_search['und'][0]['value'],
	    	'changed' => $node->changed,
	    	'created' => $node->created,
	     	'archive_date' => $archive_date
	     ]
	];

	//dsm($params);
	$response = $client->index($params);

}

function file_asset_index($node){
	 $hosts = [
	    'elasticsearch:9200'         // IP + Port

	];
	$client = Elasticsearch\ClientBuilder::create()->setHosts($hosts)->build();
	
	$wrapper = entity_metadata_wrapper('node', $node);
	$asset_topic_taxonomy = $wrapper->field_asset_topic_taxonomy->value();
	$owner = $wrapper->field_owner->value();
	//dsm($node);
	$params = [
	    'index' => 'my_file_index',
	    'type' => 'file_asset',
	    'id' => $node->nid,
	    'body' => [
	    	'id' => $node->nid,
	    	'title' => $node->title,
	    	'summary' => $node->field_description['und'][0]['value'],
	    	'file' => $node->field_file_text,
	    	'file_type' =>$node->field_file_type['und'][0]['value'],
	    	'language' =>$node->field_language['und'][0]['value'],
	    	'notify_marketing_team' =>$node->field_notify_marketing_team['und'][0]['value'],
	    	'for_use_by' =>$node->field_for_use_by['und'][0]['value'],
	    	'schedule_publish' => $node->field_schedule_publish['und'][0]['value'],
	    	'owner' => $owner, 
	    	'workflow_state' =>$node->field_workflow_state_search['und'][0]['value'],
	    	'asset_topic_taxonomy' => $asset_topic_taxonomy, 
	    	'changed' => $node->changed,
	    	'created' => $node->created,
	     	'archive_date' => $archive_date
	     ]
	];

	//dsm($params);
	$response = $client->index($params);

}

function state_details_index($node){
	 $hosts = [
	    'elasticsearch:9200'         // IP + Port

	];
	$client = Elasticsearch\ClientBuilder::create()->setHosts($hosts)->build();
	
	$wrapper = entity_metadata_wrapper('node', $node);
	$asset_topic_taxonomy = $wrapper->field_asset_topic_taxonomy->value();
	$owner = $wrapper->field_owner->value();

	$params = [
	    'index' => 'my_state_index',
	    'type' => 'state_details',
	    'id' => $node->nid,
	    'body' => [
	    	'id' => $node->nid,
	    	'official_name' => $node->title,
	    	'body:value' => $node->body['und'][0]['value'],
	    	'state_details_page' => $node->field_state_details_page['und'][0]['value'],
	    	'state_homepage' =>$node->field_state_homepage['und'][0]['value'],
	    	'governor' =>$node->field_governor['und'][0]['value'],
	    	'governor_contact' =>$node->field_governor_contact['und'][0]['value'],
	    	'state_contact' =>$node->field_state_contact['und'][0]['value'],
	    	'nickname' => $node->field_nickname['und'][0]['value'],
	    	'capital' => $node->field_capital['und'][0]['value'],
	    	'state_symbols' => $node->field_state_symbols['und'][0]['value'],
	    	'state_motto' => $node->field_state_motto['und'][0]['value'],
	    	'agriculture_department' => $node->field_agriculture_department['und'][0]['value'],
	    	'alcoholic_beverage_control_board' => $node->field_alcoholic_beverage_control['und'][0]['value'], 
	    	'attorney_general' => $node->field_field_attorney_general['und'][0]['value'], 
	    	'authentication_office' => $node->field_suthentication_office['und'][0]['value'],
	    	'consumer_protection_offices' => $node->field_consumer_protection_office['und'][0]['value'],
	    	'corrections_department' => $node->field_corrections_department['und'][0]['value'],
	    	'district_attorneys' => $node->field_district_attorneys['und'][0]['value'],
	    	'education_department' => $node->field_education_department['und'][0]['value'],
	    	'election_office' => $node->field_election_office['und'][0]['value'],
	    	'emergency_management_agency' => $node->field_emergency_management_agenc['und'][0]['value'],
	    	'fish_wildlife_agency' => $node->field_fish_and_wildlife_agency['und'][0]['value'],
	    	'forestry_department' => $node->field_forestry_department['und'][0]['value'],
	    	'gaming_commision' => $node->field_gaming_commision['und'][0]['value'],
	    	'health_department' => $node->field_health_department['und'][0]['value'],
	    	'lottery_results' => $node->field_lottery_results['und'][0]['value'],
	    	'maps' => $node->field_maps['und'][0]['value'],
	    	'motor_vehicle_offices' => $node->field_motor_vehicle_offices['und'][0]['value'],
	    	'photos_and_multimedia' => $node->field_photos_and_multimedia['und'][0]['value'],
	    	'racing_commission' => $node->field_racing_commission['und'][0]['value'],
	    	'state_defense_force' => $node->field_state_defense_force['und'][0]['value'],
	    	'surplus_property_sales' => $node->field_surplus_property_sales['und'][0]['value'],
	    	'travel_tourism' => $node->field_travel_tourism['und'][0]['value'],
	    	'workflow_state' =>$node->field_workflow_state_search['und'][0]['value'],
	     	'schedule_publish' => $node->field_schedule_publish['und'][0]['value'],
	    	'owner' => $owner, 
	    	'asset_topic_taxonomy' => $asset_topic_taxonomy, 
	    	'changed' => $node->changed,
	    	'created' => $node->created,
	     	'archive_date' => $archive_date,
	     	'for_use_by' =>$node->field_for_use_by['und'][0]['value']
	     ]
	];

	//dsm($params);
	$response = $client->index($params);

}

function directory_record_index($node){
	 $hosts = [
	    'elasticsearch:9200'         // IP + Port

	];
	$client = Elasticsearch\ClientBuilder::create()->setHosts($hosts)->build();
	
	$wrapper = entity_metadata_wrapper('node', $node);
	$asset_topic_taxonomy = $wrapper->field_asset_topic_taxonomy->value();
	$owner = $wrapper->field_owner->value();
	$agency = $wrapper->field_agency->value();
	$agency_tags = $wrapper->field_content_tags->value();
	$state_details = $wrapper->field_state_details->value();
	//$children = $wrapper->field_child_records->value();
	//dsm($node);
	$params = [
	    'index' => 'my_directory_index',
	    'type' => 'directory_records',
	    'id' => $node->nid,
	    'body' => [
	    	'id' => $node->nid,
	    	'title' => $node->title,
	    	'summary' => $node->field_description['und'][0]['value'],
	    	'language' =>$node->field_language['und'][0]['value'],
	    	'alpha_order_name' =>$node->field_alpha_order_name['und'][0]['value'],
	    	'english_translation_name' =>$node->field_english_translation_name['und'][0]['value'],
	    	'directory_type' =>$node->field_directory_type['und'][0]['value'],
	    	'group_by' =>$node->field_group_by['und'][0]['value'],
	    	'see_also' =>$node->field_see_also['und'][0]['value'],
	    	'shown_on_az_index' =>$node->field_show_on_az_index['und'][0]['value'],
	    	'subdivision' =>$node->field_subdivision['und'][0]['value'],
	    	'street_1' =>$node->field_street_1['und'][0]['value'],
	    	'street_2' =>$node->field_street_2['und'][0]['value'],
	    	'city' =>$node->field_city['und'][0]['value'],
	    	'state' =>$node->field_state['und'][0]['value'],
	    	'zip' =>$node->field_zip['und'][0]['value'],
	    	'phone_number' =>$node->field_phone_number['und'][0]['value'],
	    	'toll_free_number' =>$node->field_toll_free_number['und'][0]['value'],
	    	'tty_number' =>$node->field_tty_number['und'][0]['value'],
	    	'sms_services' =>$node->field_sms_services['und'][0]['value'],
	    	'synonym' =>$node->field_synonym['und'][0]['value'],
	    	'government_branch' =>$node->field_government_branch['und'][0]['value'],
	    	'donated_money' =>$node->field_donated_money['und'][0]['value'],
	    	'socap_number' =>$node->field_scoap_member['und'][0]['value'],
	    	'inventory_url' =>$node->field_inventory_url['und'][0]['value'],
	    	'cfo_agency' =>$node->field_cfo_agency['und'][0]['value'],
	    	'contact_links' =>$node->field_contact_links['und'][0]['value'],
	    	'in_person_links' =>$node->field_in_person_links['und'][0]['value'],
	    	'website_links' =>$node->field_website_links['und'][0]['value'],
	    	'acronym' =>$node->field_acronym['und'][0]['value'],
	    	'agency' =>$agency,
	    	'form_links' =>$node->field_form_links['und'][0]['value'],
	    	'more_info' =>$node->field_info_for_contact_center['und'][0]['value'],
	    	'agency_tags' =>$agency_tags,
	    	'state_details' =>$state_details,
	    	'parent_record' =>$node->field_parent_record,
	    	'child_records' => $node->field_child_records,
	    	'english_toggle' =>$node->field_english_toggle,
	    	'spanish_toggle' =>$node->field_spanish_toggle,
	    	'email' =>$node->field_email['und'][0]['value'],
	    	'workflow_state' =>$node->field_workflow_state_search['und'][0]['value'],
	    	'notify_marketing_team' =>$node->field_notify_marketing_team['und'][0]['value'],
	    	'for_use_by' =>$node->field_for_use_by['und'][0]['value'],
	    	'top_tasks' => $node->field_top_task['und'][0]['value'],
	    	'schedule_publish' => $node->field_schedule_publish['und'][0]['value'],
	    	'owner' => $owner, 
	    	'asset_topic_taxonomy' => $asset_topic_taxonomy, 
	    	'changed' => $node->changed,
	    	'created' => $node->created,
	     	'archive_date' => $archive_date
	     ]
	];

	//dsm($params);
	$response = $client->index($params);

}


function get_vdn_locations( &$node )
{
  $node->locations = [];
  if ( !empty($GLOBALS['__cached_content_pages'][$node->nid]) )
  {
    foreach ( $GLOBALS['__cached_content_pages'][$node->nid] as $page_id )
    {
      if ( !empty($GLOBALS['__cached_page_sites'][$page_id]) )
      {
        $page = $GLOBALS['__cached_page_sites'][$page_id];
        if ( !empty($page['site']) )
        {
          if ( in_array($page['site'],['usa.gov','kids.gov','kids.usa.gov','gobiernousa.gov','gobierno.usa.gov']) )
          {
            $full_url = '';
            if ( $page['site'] == 'usa.gov' )
            {
              $full_url = 'https://www.usa.gov';
            } else if ( $page['site'] == 'gobiernousa.gov' || $page['site'] == 'gobierno.usa.gov' ) {
              $full_url = 'https://gobierno.usa.gov';
            } else if ( $page['site'] == 'kids.usa.gov'    || $page['site'] == 'kids.gov' ) {
              $full_url = 'https://kids.usa.gov';
            }
            if ( !empty($page['url']) )
            {
              $full_url .= $page['url'];
            }
            if ( strlen($full_url) == 0 )
            {
              continue;
            }
            $node->locations[] = [ 'value'=> [
                'page_title' => $page['title'],
                'url' => $full_url.'#item-'.$node->nid
              ]
            ];
          } else if ( $page['site'] == 'blog.usa.gov' ) {
            $node->locations[] = [ 'value'=> [
                'page_title' => $node->title,
                'url' => 'https://blog.usa.gov/'._bloggov_urlFriendlyString($node->title),
              ]
            ];
          }
        }
      }
    }
  }
  return $node;
}


function get_cache_stuff()
{
    /// which pages contain which content
    $GLOBALS['__cached_content_pages'] = [];
    $query = "
      SELECT
        aoc.field_asset_order_content_target_id aoc,
        group_concat(ttd.tid separator ',') as tid
      FROM
        taxonomy_term_data ttd
        JOIN field_data_field_asset_order_content aoc
          ON ( aoc.entity_id = ttd.tid )
      GROUP BY aoc.field_asset_order_content_target_id
    ";
    $result = db_query($query);
    foreach ( $result as $row )
    {
      $GLOBALS['__cached_content_pages'][$row->aoc] = explode(',',$row->tid);
    }

    /// which pages belong to which site
    $GLOBALS['__cached_page_sites'] = [];
    /// handles 10 level of parents
    $query = "
    SELECT
      tops.tid,
      pd.name as title,
      TRIM(LCASE(td.name)) as site,
      IF ( fu.field_friendly_url_value IS NULL,
           '/', fu.field_friendly_url_value ) as url
    FROM (
      SELECT
      	tth0.tid as tid,
      	IF ( tthA.tid IS NOT NULL, tthA.tid,
      	IF ( tth9.tid IS NOT NULL, tth9.tid,
      	IF ( tth8.tid IS NOT NULL, tth8.tid,
      	IF ( tth7.tid IS NOT NULL, tth7.tid,
      	IF ( tth6.tid IS NOT NULL, tth6.tid,
      	IF ( tth5.tid IS NOT NULL, tth5.tid,
      	IF ( tth4.tid IS NOT NULL, tth4.tid,
      	IF ( tth3.tid IS NOT NULL, tth3.tid,
      	IF ( tth2.tid IS NOT NULL, tth2.tid,
      	IF ( tth1.tid IS NOT NULL, tth1.tid,tth0.tid)))))))))
      	) as top
      FROM taxonomy_term_hierarchy tth0
      	 LEFT JOIN taxonomy_term_data ttd ON ( ttd.tid = tth0.tid )
      	 LEFT JOIN taxonomy_term_hierarchy tth1 ON ( tth1.tid = tth0.parent )
      	 LEFT JOIN taxonomy_term_hierarchy tth2 ON ( tth2.tid = tth1.parent )
      	 LEFT JOIN taxonomy_term_hierarchy tth3 ON ( tth3.tid = tth2.parent )
      	 LEFT JOIN taxonomy_term_hierarchy tth4 ON ( tth4.tid = tth3.parent )
      	 LEFT JOIN taxonomy_term_hierarchy tth5 ON ( tth5.tid = tth4.parent )
      	 LEFT JOIN taxonomy_term_hierarchy tth6 ON ( tth6.tid = tth5.parent )
      	 LEFT JOIN taxonomy_term_hierarchy tth7 ON ( tth7.tid = tth6.parent )
      	 LEFT JOIN taxonomy_term_hierarchy tth8 ON ( tth8.tid = tth7.parent )
      	 LEFT JOIN taxonomy_term_hierarchy tth9 ON ( tth9.tid = tth8.parent )
      	 LEFT JOIN taxonomy_term_hierarchy tthA ON ( tthA.tid = tth9.parent )
      WHERE ttd.vid = 42
      ORDER BY top
    ) tops
    left join taxonomy_term_data td            on ( td.tid       = tops.top )
    left join taxonomy_term_data pd            on ( pd.tid       = tops.tid )
    left join field_data_field_friendly_url fu on ( fu.entity_id = tops.tid )
    ";
    $result = db_query($query);
    foreach ( $result as $row )
    {
      $GLOBALS['__cached_page_sites'][$row->tid] = ['title'=>$row->title,'site'=>$row->site,'url'=>$row->url];
    }
    // die(print_r($GLOBALS['__cached_page_sites'],1));
}

function getElasticSearchID($nid, $indextype){
	$eid = 0;

	$client = Elasticsearch\ClientBuilder::create()->setHosts($hosts)->build();

	$params['body'] = array(
					 'fields' => '_id',
					    'query' => array(
					        'match' => array(
					            'id' => $nid
					        )
					    )
					);
	$results = $client->search($params);

}