<?php

function cmp_api_menu(){
    $items = array();
    $items['usaapi'] = array(
        'title' => 'USAGov Platform API Interactive Documentation',
        'page callback' => 'api_landing_page',
        'access callback' => TRUE,
        'type' => MENU_NORMAL_ITEM,
    );
    $items['usaapi/api/v1/usagov/narratives.json'] = array(
        'title' => 'USAGov Platform API Interactive Documentation',
        'page callback' => '_cmp_api_get_text_assets',
        'access callback' => TRUE,
        'type' => MENU_NORMAL_ITEM,
    );
    $items['usaapi/api/v1/usagov/narratives'] = array(
        'title' => 'USAGov Platform API Interactive Documentation',
        'page callback' => '_cmp_api_get_text_assets',
        'access callback' => TRUE,
        'type' => MENU_NORMAL_ITEM,
    );
    $items['usaapi/api/v1/usagov/narratives/%'] = array(
        'title' => 'USAGov Platform API Interactive Documentation',
        'page callback' => '_cmp_api_get_text_asset_by_id',
        'access callback' => TRUE,
        'type' => MENU_NORMAL_ITEM,
    );
    $items['usaapi/api/v1/usagov/directory_records.json'] = array(
        'title' => 'USAGov Platform API Interactive Documentation',
        'page callback' => '_cmp_api_get_directory_records_router',
        'access callback' => TRUE,
        'type' => MENU_NORMAL_ITEM,
    );
    $items['usaapi/api/v1/usagov/directory_records'] = array(
        'title' => 'USAGov Platform API Interactive Documentation',
        'page callback' => '_cmp_api_get_directory_records_router',
        'access callback' => TRUE,
        'type' => MENU_NORMAL_ITEM,
    );
    $items['usaapi/api/v1/usagov/directory_records/%'] = array(
        'title' => 'USAGov Platform API Interactive Documentation',
        'page callback' => '_cmp_api_get_directory_records_router',
        'access callback' => TRUE,
        'type' => MENU_NORMAL_ITEM,
    );
    $items['usaapi/redirects'] = array(
        'title' => 'USAGov Platform API Interactive Documentation',
        'page callback' => '_cmp_api_get_all_redirects',
        'access callback' => TRUE,
        'type' => MENU_NORMAL_ITEM,
    );
    $items['usaapi/entities'] = array(
        'title' => 'USAGov Platform API Interactive Documentation',
        'page callback' => '_cmp_api_get_all_entities',
        'access callback' => TRUE,
        'type' => MENU_NORMAL_ITEM,
    );
    $items['usaapi/opportunities'] = array(
        'title' => 'USAGov Platform API Interactive Documentation',
        'page callback' => '_returnFBODataResult',
        'access callback' => TRUE,
        'type' => MENU_NORMAL_ITEM,
    );
    return $items;
}
function cmp_api_init()
{
    global $conf;
    $conf['fbo_elasticsearch_server'] = _fbo_elasticsearch_server();
}
function _fbo_elasticsearch_server()
{
    $host = variable_get('elasticsearch_server');
    $port = variable_get('elasticsearch_port');
    $ssl  = variable_get('elasticsearch_ssl', false);
    if ( boolval($ssl)===false || ( is_string($ssl) && strlen($ssl)>0 && in_array(strtolower($ssl{0}),['n','f']) ) ) {
        $ssl = false;
    } else {
        $ssl = true;
    }
    $scheme = ( stripos($port,'443')!==false || $ssl ) ? 'https' : 'http';
    return $scheme .'://'. $host . ':'. $port;
}
/**
 * Implements hook_theme().
 */
function cmp_api_theme() {
    return array(
        'api-landing' => array(
            'template' => 'api-landing',
            'variables' => array(),
        ),
    );
}

function api_landing_page(){
    drupal_add_css(drupal_get_path('module', 'cmp_api') . "/css/custom-swagger.css");
    drupal_add_js(drupal_get_path('module', 'cmp_api') . "/js/custom-swagger.js");
    $links = array();
    return array(
        '#theme' => 'api-landing',
        '#links' => $links,
    );
}

function _cmp_api_get_all_redirects(){
    $ret = array();
    $res = db_query("SELECT * FROM match_redirect");
    foreach($res as $r){
        $red_obj = match_redirect_load($r->rid);
        $redist = explode(PHP_EOL, $red_obj->source_pattern);
        foreach($redist as $path) {
            $ret[] = array("rid" => $red_obj->rid, "source_path" => str_replace("\r",'',$path), "target" => $red_obj->target, "status_code" => $red_obj->status_code);
        }
    }
    if (count($ret) == 0){
        drupal_json_output(array("metadata"=>array("exists"=>false)));
    }

    drupal_json_output(array("metadata" => array("exists" => true), "result" => $ret));
}

function _returnFBODataResult(){
    include(drupal_get_path('module', 'cmp_api').'/mappings.php');
    $params = array();
    $size = 5;
    $from = 0;

    if (isset($_REQUEST['keyword']) && $_REQUEST['keyword'] !=''){
        $params['keyword'] = $_REQUEST['keyword'];
    }
    if (isset($_REQUEST['from']) && $_REQUEST['from'] != 0 ) {
        $from = $_REQUEST['from']; // pagination
    }
    if (isset($_REQUEST['postdate']) && $_REQUEST['postdate'] != '--') {
        $params['postdate'] = $_REQUEST['postdate'];
    }
    if (isset($_REQUEST['state']) && $_REQUEST['state'] !='') {
        if ($_REQUEST['state'] == "GU") {
            $params['state'] = array("GU", 2);
        }
        elseif ($_REQUEST['state'] == "OU") {
            $params['state'] = array("AP", "AE",NULL);
        }
        else {
            $params['state'] =array($_REQUEST['state']);
        }
    }
    if (isset($_REQUEST['setaside'])) {
        $params['setaside'] =explode(',',$_REQUEST['setaside']);
    }
    $ret = _do_es_search($from, $size, $params);
    if (isset($_REQUEST['do_index']) && $_REQUEST['do_index'] ==1 ) {

        // need to user data
        $s = _setupES();
        if ($s) {
            if (isset($_REQUEST['setaside'])) {
                $sa = $params['setaside'];
                $sa = array_diff($sa, array('N/A'));
            } else {
                $sa = array();
            }

            $p = array('keyword' => (isset($_REQUEST['keyword']) && $_REQUEST['keyword'] !='')? $_REQUEST['keyword']: '' ,
                'postdate' => (isset($_REQUEST['postdate']) && $_REQUEST['postdate'] != '--' ? $_REQUEST['postdate'] : null),
                'submitteddate' => time(),
                'location' => (isset($_REQUEST['state']) && $_REQUEST['state'] != '') ? join(',',$params['state']) : '',
                'setaside' => join(',', $sa),
                'show_na_setaside' => (isset($_REQUEST['setaside']) && in_array('N/A', $_REQUEST['setaside'])) ? 1 : 0);

            _index_userinfo($p);
        }
    }

    drupal_json_output([
        'opps'=>$ret['opps'],
        'total'=>$ret['total'],
        'size'=>$size,
        'paramm'=>$ret['paramm'],
        'elasticsearch'=>$ret['elasticsearch'],
        'param'=>$params,
        'do'=>isset($params['setaside'])?$params['setaside']:'',
        's'=>isset($_REQUEST['setaside'])?$_REQUEST['setaside']:''
    ]);
}
function _index_userinfo($p){
    // $elasticsearch_server = 'http://' . variable_get('elasticsearch_server', 'elasticsearch_server'). ':' . variable_get('elasticsearch_port', 9200);
    // $resource = curl_init();
    // curl_setopt($resource, CURLOPT_URL, $elasticsearch_server.'/opportunityuserinputs/userinput/'.time());
    // curl_setopt($resource, CURLOPT_RETURNTRANSFER, 1);
    // curl_setopt($resource, CURLOPT_POST, 1);
    // curl_setopt($resource, CURLOPT_POSTFIELDS, json_encode($p));
    // curl_setopt($resource, CURLOPT_HTTPHEADER, ['CONTENT-TYPE: application/json; charset=utf-8']);
    // $result = curl_exec($resource);
    // curl_close($resource);

    // if ($result) {
    //     $r = json_decode($result);
    $response = _fbo_elasticsearch_request('/opportunityuserinputs/userinput/'.time(),['method'=>'PUT','data'=>json_encode($p)]);
    if ($response->code == 200) {
        $r = json_decode($response->data);
        if (!empty($r->errors)) {
            $errors = [];
            foreach ($r->items as $i) {
                if (isset($i->index)  && $i->index->status  != 200 && $i->index->status  != 201) {
                    $errors[] = $i->index->status .' '. $i->index->error->reason;
                }
                if (isset($i->update) && $i->update->status != 200 && $i->update->status != 201) {
                    $errors[] = $i->update->status .' '. $i->update->error->reason;
                }
            }
            $r->errors = $errors;
        }
        if (isset($r->items)) {
            $r->items = count($r->items);
        }
        return $r;
    }
}
function _do_es_search($from, $size, $params){

    // $elasticsearch_server = 'http://' . variable_get('elasticsearch_server', 'elasticsearch_server'). ':' . variable_get('elasticsearch_port', 9200);
    $kp = '';
    if (isset($params['keyword'])) {

        $params['keyword'] = strtolower($params['keyword']);

        if (strpos($params['keyword'], '"')  === false && strpos($params['keyword'], ' ')  !== false) {
            // or
            $kwords = explode(" ", $params['keyword']);

            $kpts = array();
            foreach($kwords as $ww){
                $kpts["solnbr"][] = '{"wildcard" : {"solnbr": "*'.$ww.'*"}}';
                $kpts["naicscode"][] = '{"wildcard" : {"naicscode": "*'.$ww.'*"}}';
                $kpts["naicsvalue"][] = '{"wildcard" : {"naicsvalue": "*'.$ww.'*"}}';
                $kpts["naics"][] = '{"wildcard" : {"naics": "*'.$ww.'*"}}';
                $kpts["classvalue"][] = '{"wildcard" : {"classvalue": "*'.$ww.'*"}}';
                $kpts["classcode"][] = '{"wildcard" : {"classcode": "*'.$ww.'*"}}';
                $kpts["zip"][] = '{"wildcard" : {"zip": "*'.$ww.'*"}}';
                $kpts["subject"][] = '{"wildcard" : {"subject": "*'.$ww.'*"}}';
                $kpts["desc"][] = '{"wildcard" : {"desc": "*'.$ww.'*"}}';
                $kpts["agency"][] = '{"wildcard" : {"agency": "*'.$ww.'*"}}';
                $kpts["office"][] = '{"wildcard" : {"office": "*'.$ww.'*"}}';
                $kpts["state"][] = '{"wildcard" : {"state": "*'.$ww.'*"}}';
                $kpts["setaside"][] = '{"wildcard" : {"setaside": "*'.$ww.'*"}}';
            }

            foreach($kpts as $k=>$v){
                $kpkp[]= '{"bool":{"must" : [' . join(',',$v) . ']}}';
            }
            $kp = '"should" : [' . join(',', $kpkp) . ']';
        }
        else {
            $params['keyword'] = str_replace('"', '', $params['keyword']);
            // and
            $kpt[] = '{"match_phrase": {"subject": "' . $params['keyword'] . '"}}';
            $kpt[] = '{"match_phrase": {"desc": "' . $params['keyword'] . '"}}';
            $kpt[] = '{"match_phrase": {"agency": "' . $params['keyword'] . '"}}';
            $kpt[] = '{"match_phrase": {"office": "' . $params['keyword'] . '"}}';
            $kpt[] = '{"match_phrase": {"zip": "' . $params['keyword'] . '"}}';
            $kpt[] = '{"match_phrase": {"state": "' . $params['keyword'] . '"}}';
            $kpt[] = '{"match_phrase": {"solnbr ": "' . $params['keyword'] . '"}}';
            $kpt[] = '{"match_phrase": {"classcode": "' . $params['keyword'] . '"}}';
            $kpt[] = '{"match_phrase": {"classvalue": "' . $params['keyword'] . '"}}';
            $kpt[] = '{"match_phrase": {"naicscode": "' . $params['keyword'] . '"}}';
            $kpt[] = '{"match_phrase": {"naicsvalue": "' . $params['keyword'] . '"}}';
            $kpt[] = '{"match_phrase": {"naics": "' . $params['keyword'] . '"}}';
            $kpt[] = '{"term" : {"setaside" : "' . $params['keyword'] . '"}}';
            $kpt[] = '{"wildcard" : {"solnbr": "*'.$params['keyword'].'*"}}';
            $kpt[] = '{"wildcard" : {"naicscode": "*'.$params['keyword'].'*"}}';
            $kpt[] = '{"wildcard" : {"naicsvalue": "*'.$params['keyword'].'*"}}';
            $kpt[] = '{"wildcard" : {"naics": "*'.$params['keyword'].'*"}}';
            $kpt[] = '{"wildcard" : {"classvalue": "*'.$params['keyword'].'*"}}';
            $kpt[] = '{"wildcard" : {"classcode": "*'.$params['keyword'].'*"}}';
            $kpt[] = '{"wildcard" : {"zip": "*'.$params['keyword'].'*"}}';
            $kpt[] = '{"wildcard" : {"subject": "*'.$params['keyword'].'*"}}';
            $kpt[] = '{"wildcard" : {"desc": "*'.$params['keyword'].'*"}}';
            $kpt[] = '{"wildcard" : {"agency": "*'.$params['keyword'].'*"}}';
            $kpt[] = '{"wildcard" : {"office": "*'.$params['keyword'].'*"}}';
            $kpt[] = '{"wildcard" : {"state": "*'.$params['keyword'].'*"}}';
            $kpt[] = '{"wildcard" : {"setaside": "*'.$params['keyword'].'*"}}';
        }

        if (count($kpt) > 0) {
            $kp = '"should" : [' . join(',', $kpt) . ']';
        }
    }
    $st = '';
    // if there is setaside is selected
    if (isset($params['setaside'])){
        foreach($params['setaside'] as $s) {
            $st_tmp[] = '{"term" : {"setaside.raw" : "'.$s.'"}}';
        }
        if (count($st_tmp) > 0){
            $st = '"should" : ['.join(',',$st_tmp).']';
        }
    }

    $cd = '';
    // if there is closing date range
    if (isset($params['postdate'])){
        $cd = '"range": {"postdate": {"gte": "'.$params['postdate'].'"}}';
    }

    $sta = '';
    if (isset($params['state'])){
        $sta_tmp = array();
        foreach($params['state'] as $pst) {
            $sta_tmp[] = '{"term" : {"state" : "' . strtolower($pst) . '"}}';
        }
        if (count($sta_tmp) > 0){
            $sta = '"should" : ['.join(',',$sta_tmp).']';
        }
    }

    try{
        $sort =  '"sort" : ['
            .'  {"closedate" : {"order" : "asc",  "missing" : "_last", "unmapped_type": "date"}},'
            .'  {"postdate"  : {"order" : "desc", "missing" : "_last", "unmapped_type": "date"}}'
            //  .'  {"subject"   : {"order" : "asc",  "missing" : "_last", "unmapped_type": "keyword"}}'
            .']';
        $param = '{
            "query": {';
        if($kp=='' && $st == '' && $cd=='' && $sta!=''){ // state only
            $param .= '"constant_score" : {';
            $param .= '"filter" : { "bool" : { ' . $sta . ' }}';
            $param .= '}';
        }
        elseif($kp=='' && $st == '' && $cd!='' && $sta=='') { // postadate only
            $param .= '"constant_score" : {"filter" : { '.$cd.' }}';
        }
        elseif($kp=='' && $st != '' && $cd=='' && $sta==''){ // setaside only
            $param .= '"constant_score" : {';
            $param .= '"filter" : { "bool" : { ' . $st . ' }}';
            $param .= '}';
        }
        elseif($kp!='' && $st == '' && $cd=='' && $sta==''){ // keyword only
            $param .= ' "bool" : { ' . $kp . ' }';
        }
        else{

            $tmp_param = array();
            if ($st != ''){
                $tmp_param[] = '{"bool": { ' . $st . ' }}';
            }
            if ($kp != ''){
                $tmp_param[] = '{"bool": { ' . $kp . ' }}';

            }
            if ($cd != ''){
                $tmp_param[] = '{'.$cd.'}';
            }
            foreach($params['state'] as $pst) {
                $tmp_param[] = '{"bool": { ' . $sta . ' }}';
            }
            if (count($tmp_param) > 0){
                $param .= '"bool" : { "must" :';
                $param .= '['.join(',',$tmp_param).']';
                $param .= '}';
            }
            else {
                // or default
            }

        }
        $param .='}, '.$sort.'}';
        //$param .='}}';

        // $header = array(
        //     "CONTENT-TYPE: application/json; charset=utf-8"
        // );

        // $curl = curl_init();
        // curl_setopt($curl, CURLOPT_URL, $elasticsearch_server."/opportunities/opportunity/_search?size=".$size."&from=".$from."&pretty");
        // curl_setopt($curl, CURLOPT_HTTPHEADER, $header);
        // curl_setopt($curl, CURLOPT_RETURNTRANSFER, 1);
        // curl_setopt($curl, CURLOPT_POSTFIELDS, $param);
        // //dsm($param);

        // $res = curl_exec($curl);
        // curl_close($curl);
        // $r = json_decode($res);

        $response = _fbo_elasticsearch_request("/opportunities/opportunity/_search?size=".$size."&from=".$from."&pretty",['data'=>$param]);
        $r = json_decode($response->data);
        // JKH die is commented out..., ok.
        // print_r(["/opportunities/opportunity/_search?size=".$size."&from=".$from."&pretty",$param]);flush();die;
        if(isset($r->hits->hits)){
            $sols = _get_array_of_obj($r->hits->hits);
            $ret['opps'] = $sols;
            $ret['total'] = $r->hits->total;
            $ret['paramm']= $param;
            $ret['elasticsearch'] =variable_get('fbo_elasticsearch_server')."/opportunities/opportunity/_search?size=".$size."&from=".$from."&pretty";
            return $ret;
        }
        else {
            $ret['opps'] = array();
            $ret['total'] = isset($r->hits->total) ? $r->hits->total : 0;
            $ret['paramm']= $param;
            $ret['elasticsearch'] =variable_get('fbo_elasticsearch_server')."/opportunities/opportunity/_search?size=".$size."&from=".$from."&pretty";
            return $ret;
        }

    } catch(Exception $e){
        drupal_set_message("Error", "Elastic search issue");
        return false;
    }
}
function _get_array_of_obj($obj){
    $r = array();

    foreach($obj as $o){
        $r[] = array(
            'type'=> ( isset($o->_source->type) ) ? $o->_source->type : null,
            'agency'=> ( isset($o->_source->agency) ) ?  $o->_source->agency : null,
            'office'=> ( isset($o->_source->office) ) ?  $o->_source->office : null,
            'location'=> ( isset($o->_source->location) ) ?  $o->_source->location : null,
            'classcod'=> ( isset($o->_source->classcod) ) ?  $o->_source->classcod : null,
            'naics'=> ( isset($o->_source->naics) ) ?  $o->_source->naics : null,
            'subject'=> ( isset($o->_source->subject) ) ?  $o->_source->subject : null,
            'solnbr'=> ( isset($o->_source->solnbr) ) ?  $o->_source->solnbr : null,
            'desc'=> ( isset($o->_source->desc) ) ?  $o->_source->desc : null,
            'setaside'=> ( isset($o->_source->setaside) ) ?  $o->_source->setaside : null,
            'popcountry'=> ( isset($o->_source->popcountry) ) ?  $o->_source->popcountry : null,
            'popzip'=> ( isset($o->_source->popzip) ) ?  $o->_source->popzip : null,
            'link'=> ( isset($o->_source->link) ) ?  $o->_source->link : null,
            'source'=> ( isset($o->_source->source) ) ?  $o->_source->source : null,
            'contact'=> ( isset($o->_source->contact) ) ?  $o->_source->contact : null,
            'postdate'=> ( isset($o->_source->postdate) ) ?  $o->_source->postdate : null,
            'closedate'=> ( isset($o->_source->closedate) ) ?  $o->_source->closedate : null,
            'state'=> ($o->_source->state =='AE' || $o->_source->state=='AP' || empty($o->_source->state))? 'Outside U.S.':$o->_source->state,
            'zip'=> ( isset($o->_source->zip) ) ?  $o->_source->zip : null,
        );
    }

    return $r;
}
function _fbo_elasticsearch_request($path='/',$options=[])
{
    // print_r($options);
    $uri = variable_get('fbo_elasticsearch_server').$path;
    $response = new stdClass();
    $response->code = null;
    $response->data = '';
    try {
        $method  = !empty($options['method'])  ? $options['method'] : 'GET';
        $data    = !empty($options['data'])    ? $options['data']   : '';
        $timeout = !empty($options['timeout']) ? intval($options['timeout']) : null;

        $curl = curl_init();
        curl_setopt($curl, CURLOPT_URL, $uri);
        curl_setopt($curl, CURLOPT_RETURNTRANSFER, 1);
        curl_setopt($curl, CURLOPT_CUSTOMREQUEST, $method);
        if ( $method=='HEAD') {
            curl_setopt($curl, CURLOPT_HEADER, true);
            curl_setopt($curl, CURLOPT_NOBODY, true);
        }

        // if ( is_int($timeout) ) {
        //     curl_setopt($curl, CURLOPT_TIMEOUT, $timeout);
        // }
        curl_setopt($curl, CURLOPT_HTTPHEADER,
            ['CONTENT-TYPE: application/json; charset=utf-8']);

        if ( !empty($data) ) {
            curl_setopt($curl, CURLOPT_POSTFIELDS, $data);
        }

        // curl_setopt($curl, CURLOPT_VERBOSE, 1);
        // curl_setopt($curl, CURLOPT_FAILONERROR, TRUE);

        // if ( local AND ssl )
        curl_setopt($curl, CURLOPT_SSL_VERIFYHOST, 0);
        curl_setopt($curl, CURLOPT_SSL_VERIFYPEER, 0);

        $response->data = curl_exec($curl);
        $response->code = curl_getinfo($curl, CURLINFO_HTTP_CODE);

        curl_close($curl);
        return $response;
    } catch (Exception $e) {
        /// pass
    }
    return $response;
}
function _setupES(){
    // $elasticsearch_server = 'http://' . variable_get('elasticsearch_server', 'elasticsearch_server'). ':' . variable_get('elasticsearch_port', 9200);

    // $resource = curl_init();
    // curl_setopt($resource, CURLOPT_URL, $elasticsearch_server.'/opportunityuserinputs');
    // curl_setopt($resource, CURLOPT_RETURNTRANSFER, 1);
    // curl_setopt($resource, CURLOPT_CUSTOMREQUEST, "HEAD");
    // curl_setopt($resource, CURLOPT_HEADER, true);
    // curl_setopt($resource, CURLOPT_NOBODY, true);
    // curl_setopt($resource, CURLOPT_HTTPHEADER, ['CONTENT-TYPE: application/json; charset=utf-8']);
    // $httpcode = curl_getinfo($resource, CURLINFO_HTTP_CODE);
    // curl_close($resource);
    // if ($httpcode == '200') {
    //     echo "Index already exist\n";
    //     return true;
    // }

    $response = _fbo_elasticsearch_request('/opportunityuserinputs/',['method'=>'HEAD']);
    if ($response->code == 200) {
        return true;
    }

    $data = '{
          "settings" : {
               "index" : {
                   "number_of_shards" : 1,
                   "number_of_replicas" : 0
               }
          },
          "mappings": {
            "userinput": {
              "properties": {

                "setaside" : {
                  "type": "keyword",
                  "fields": {
                    "raw" : {
                      "type": "keyword",
                      "index": "not_analyzed"
                    }
                  }
                },
                "keyword" : {
                  "type": "keyword",
                  "fields": {
                    "raw" : {
                      "type": "keyword",
                      "index": "not_analyzed"
                    }
                  }
                },
                "location" : {
                  "type": "keyword",
                  "fields": {
                    "raw" : {
                      "type": "keyword",
                      "index": "not_analyzed"
                    }
                  }
                },
                "submitteddate" : {
                  "type": "integer"
                },
                "postdate" : {
                  "type": "date",
                  "format": "yyyy-MM-dd"
                },
                "show_na_setaside" : {
                  "type": "keyword",
                  "fields": {
                    "raw" : {
                      "type": "keyword",
                      "index": "not_analyzed"
                    }
                  }
                }
              }
            }
          }
        }';

    // $resource = curl_init();
    // curl_setopt($resource, CURLOPT_URL, $elasticsearch_server.'/opportunityuserinputs');
    // curl_setopt($resource, CURLOPT_RETURNTRANSFER, 1);
    // curl_setopt($resource, CURLOPT_CUSTOMREQUEST, "PUT");
    // curl_setopt($resource, CURLOPT_POSTFIELDS, $data);
    // curl_setopt($resource, CURLOPT_HTTPHEADER, ['CONTENT-TYPE: application/json; charset=utf-8']);
    // $result = curl_exec($resource);
    // curl_close($resource);
    // if ($result) {
    //     if ( !empty($result->error) ) {
    //         return false;
    //     } else {
    //         return true;
    //     }
    // }

    $response = _fbo_elasticsearch_request('/opportunityuserinputs/',['method'=>'PUT','data'=>$data]);
    if ($response) {
        if ( !empty($response->data->error) ) {
            return false;
        } else {
            return true;
        }
    }
    return false;
}


function _cmp_api_get_all_entities(){
    $page =0;
    $page_size=10;
    $where ='';
    $where_param = array();
    $entities = array();

    $exclude_entities = array();

    $res_ex = db_query("SELECT nid FROM node WHERE status=0");
    foreach($res_ex as $r_ex){
        $exclude_entities[] = $r_ex->nid;
    }

    $res_del = db_query("SELECT nid FROM node_deleted");
    foreach($res_del as $r_del){
        $exclude_entities[] = $r_del->nid;
    }
    $res_del_count = 0;
    $term_date_join = 'LEFT';
    if (isset($_REQUEST["since"])){
        $where = "WHERE temp.changed > :since ";
        $where_param = array(":since"=> $_REQUEST["since"]);
        $term_date_join = 'INNER';
        // include deleted contents
        /*  $res_del_count = db_query("SELECT COUNT(*) FROM (SELECT de.entity_id FROM cmp_api_deleted_entities de WHERE de.changed > :since UNION SELECT nd.nid FROM node_deleted nd WHERE deletion_timestamp > :since) temp", $where_param)->fetchField(0);
          $res_del = db_query("SELECT de.entity_type, de.name, de.entity_id, de.uuid FROM cmp_api_deleted_entities de WHERE de.changed > :since UNION SELECT 'soft' AS entity_type, 'title' AS name, nd.nid as entity_id, 0 AS 'uuid' FROM node_deleted nd WHERE nd.deletion_timestamp > :since", $where_param);
          foreach($res_del as $rd){
              if($rd->entity_type == 'soft'){
                  $rd->entity_type = 'node';
                  $n = node_load($rd->entity_id);
                  $rd->uuid = $n->uuid;
                  $rd->name = $n->title;
              }
              $ret[] = array('status'=>'deleted',
                              'uuid'=>$rd->uuid,
                              'entity_id'=>$rd->entity_id,
                              'name'=>$rd->name,
                              'type'=>$rd->entity_type);
          }*/
    }
    //$where = "WHERE  temp.en_id=11019 ";

    if(isset($_REQUEST["page_size"]) && is_numeric($_REQUEST["page_size"])){
        $page_size = $_REQUEST["page_size"];
    }

    $sql_count = "SELECT COUNT(*) FROM (SELECT n.nid as en_id, 'node' as type, n.changed as changed FROM node n WHERE n.status=1 AND n.nid NOT IN (SELECT nid FROM node_deleted)
    UNION
    SELECT t.tid as en_id, 'term' as type, td.changed FROM taxonomy_term_data t ".$term_date_join." JOIN taxonomy_dates td ON td.tid = t.tid) temp ".(($where != '')? $where:'');
    $count = db_query($sql_count, $where_param)->fetchField(0);

    $pages = ceil($count/$page_size);
    if(isset($_REQUEST["page"]) && is_numeric($_REQUEST["page"])){
        $page = $_REQUEST["page"] * $page_size;
    }

    $sql = "SELECT * FROM (SELECT n.nid as en_id, 'node' as type, n.changed as changed FROM node n WHERE n.status=1 AND n.nid NOT IN (SELECT nid FROM node_deleted)
    UNION
    SELECT t.tid as en_id, 'term' as type, td.changed FROM taxonomy_term_data t ".$term_date_join." JOIN taxonomy_dates td ON td.tid = t.tid) temp ".(($where != '')? $where:'')." ORDER BY changed ASC " . (isset($_REQUEST["since"])? "":("LIMIT ".$page_size .' OFFSET '.$page)) ;
    $res = db_query($sql, $where_param);
    _cmp_api_uuid_info(true);

    /// organize nodes into buckets for _load_multiple calls
    $buckets = [];
    $bucket_size  = 100;
    $n_bucket_num = 0;
    $t_bucket_num = 0;
    $n = 0;
    $t = 0;
    foreach($res as $r)
    {
        if ($r->type == 'node')
        {
            if ( ($n++)%$bucket_size == 0 )
            {
                $n_bucket_num++;
                if ( !isset($buckets[$n_bucket_num]['nodes']) )
                {
                    $buckets[$n_bucket_num]['nodes'] = [];
                }
            }
            $buckets[$n_bucket_num]['nodes'][] = $r->en_id;
        } else {
            if ( ($t++)%$bucket_size == 0 )
            {
                $t_bucket_num++;
                if ( !isset($buckets[$t_bucket_num]['terms']) )
                {
                    $buckets[$t_bucket_num]['terms'] = [];
                }
            }
            $buckets[$t_bucket_num]['terms'][] = $r->en_id;
        }
    }

    foreach ( $buckets as $bucket_num=>$bucket )
    {
        if ( !empty($bucket['nodes']) )
        {
        	// JKH added 
        	// tracetofile(__FILE__,__LINE__,"nodes");
        	// traceobjects($bucket['nodes']);
            $nodes = node_load_multiple($bucket['nodes']);           
            foreach( $nodes as $node )
            {
                unset($node->uid);
                unset($node->workbench_moderation);
                unset($node->revision_timestamp);
                unset($node->revision_uid);
                unset($node->vid);
                unset($node->path);
                unset($node->picture);
                unset($node->field_owner);
                unset($node->cid);
                unset($node->last_comment_timestamp);
                unset($node->last_comment_name);
                unset($node->last_comment_uid);
                unset($node->comment_count);
                if ( !isset($node->field_for_use_by) && isset($node->field_for_use_by_text) )
                {
                    $node->field_for_use_by = $node->field_for_use_by_text;
                }
                _cmp_api_add_s3_urls($node);
                _cmp_api_add_reference_info($node, $exclude_entities);
                /// we may not want to force this here
                /// after a form submit and node_save we were wrongly seeing all status as 0
                /// but during a full-sync there were correct seeing all status as 1
                /// we are not taking into account the case where an item used to be published
                /// but now is not published
                $node->status = "1";
                if ( !isset($node->deleted) )
                {
                    $node->deleted = 0;
                }
                $entities[] = $node;
            }
        }
        if ( !empty($bucket['terms']) )
        {
            $terms = taxonomy_term_load_multiple($bucket['terms']);
            foreach( $terms as $term )
            {
                $term->type = 'taxonomy_term';
                $term->deleted = 0;
                _cmp_api_add_term_parent($term);
                _cmp_api_add_term_children($term);
                _cmp_api_add_for_use_by($term);
                _cmp_api_add_reference_info($term, $exclude_entities);
                $entities[] = $term;
            }
        }
    }

    /*
    foreach($res as $r){
        if ($r->type == 'node'){
            $node = node_load($r->en_id);
            unset($node->uid);
            unset($node->workbench_moderation);
            unset($node->revision_timestamp);
            unset($node->revision_uid);
            unset($node->vid);
            unset($node->path);
            unset($node->picture);
            unset($node->field_owner);
            unset($node->cid);
            unset($node->last_comment_timestamp);
            unset($node->last_comment_name);
            unset($node->last_comment_uid);
            unset($node->comment_count);

            if ( !isset($node->field_for_use_by) && isset($node->field_for_use_by_text) )
            {
                $node->field_for_use_by = $node->field_for_use_by_text;
            }
            _cmp_api_add_s3_urls($node);
            _cmp_api_add_reference_info($node, $exclude_entities);
            /// we may not want to force this here
            /// after a form submit and node_save we were wrongly seeing all status as 0
            /// but during a full-sync there were correct seeing all status as 1
            /// we are not taking into account the case where an item used to be published
            /// but now is not published
            $node->status = "1";
            if ( !isset($node->deleted) )
            {
                $node->deleted = 0;
            }
            $ret[] = $node;
        }
        else{
            $term = taxonomy_term_load($r->en_id);

            $term->type = 'taxonomy_term';
            $term->deleted = 0;
            _cmp_api_add_term_parent($term);
            _cmp_api_add_term_children($term);
            _cmp_api_add_for_use_by($term);
            _cmp_api_add_reference_info($term, $exclude_entities);
            $ret[]=$term;
        }
    }
    */
    //need to include deleted
    if (isset($_REQUEST["since"])) {

    	// JKH added...
    	// $sql = "SELECT de.entity_type, de.name, de.entity_id, de.uuid FROM cmp_api_deleted_entities de WHERE de.changed > :since
        //    UNION SELECT 'soft' AS entity_type, 'title' AS name, nd.nid as entity_id, 0 AS 'uuid' FROM node_deleted nd WHERE nd.deletion_timestamp > :since";
        // tracetofile(__FILE__,__LINE__,"sql = " . $sql);
        // tracetofile(__FILE__,__LINE__,"where = "); 
        // traceobjects($where_param);
        // JKH added de.vid, and vid to query below, so the record set matches....
        $res = db_query("SELECT de.entity_type, de.name, de.vid, de.entity_id, de.uuid FROM cmp_api_deleted_entities de WHERE de.changed > :since
          UNION SELECT 'soft' AS entity_type, 'title' AS name, 0 AS 'vid', nd.nid as entity_id, 0 AS 'uuid' FROM node_deleted nd WHERE nd.deletion_timestamp > :since", $where_param);

        foreach ($res as $r) {

            if ($r->uuid == 0) {
                $tmpuuid = db_query('SELECT uuid FROM {node} WHERE nid = :nid', array(':nid'=>$r->entity_id))->fetchField(0);
            }
            else{
                $tmpuuid = $r->uuid;
            }

            $obj = [];
            $obj['uuid'] = $tmpuuid;
            $obj['deleted'] = 1;
            $obj['type'] = $r->entity_type;
            if ($r->entity_type == 'term'){
                $obj['name'] = $r->name;
                $obj['vid'] = $r->vid; // JKH, this is being used, and not defined in SQL above?
                $obj['tid'] = $r->entity_id;
            }
            else{
            	// JKH checks for object properties set 
                $obj['title'] = isset($r->title) ? $r->title : "";
                $obj['nid'] = $r->entity_id;
            }
            $entities[] = $obj;
        }
        $count = count($entities);
        $pages = 1;
        $page_size = $count;
    }

    drupal_json_output(array("metadata" => array("count"=>$count, "offset"=>$page, "page_size"=> (isset($_REQUEST["since"]))? $page_size :(int)($page_size > $count? $count:$page_size), "pages"=>$pages),"result" => $entities));
}
function _cmp_api_add_for_use_by( &$term )
{
    if ( empty($term) ) { return; }

    if ( isset($term->field_for_use_by_text) )
    {
        $term->field_for_use_by = $term->field_for_use_by_text;
    } else if ( $term->vocabulary_machine_name == 'site_strucutre_taxonomy' ) {
        $all_parents = taxonomy_get_parents_all($term->tid);
        if ( !empty($all_parents) )
        {
            $top_parent = array_pop($all_parents);
            $top_parent = taxonomy_term_load($top_parent->tid);
            if ( !empty($top_parent) && !empty($top_parent->name) )
            {
                $term->field_for_use_by = $top_parent->field_for_use_by;
            }
        }
    } else {
        $term->field_for_use_by = null;
    }
}
function _cmp_api_add_reference_info( &$entity, &$ex_entities )
{
    if ( empty($entity) ) { return false; }
    try
    {
        $reindex_field = array();
        $uuid_info =& _cmp_api_uuid_info();
        $entity_type   = null;
        $entity_bundle = null;
        if ( isset($entity->tid) && isset($entity->vocabulary_machine_name) )
        {
            $entity_type   = 'taxonomy_term';
            $entity_bundle = $entity->vocabulary_machine_name;
        } else if ( isset($entity->nid) && isset($entity->type) ) {
            $entity_type   = 'node';
            $entity_bundle = $entity->type;
        }
        if ( empty($entity_type) || empty($entity_bundle) ) { return false; }
        $fields = field_info_instances($entity_type,$entity_bundle);
        foreach ( array_keys($fields) as $field )
        {
            if ( !isset($entity->{$field}) || !isset($entity->{$field}['und']) )
            {
                continue;
            }
            $field_info = field_info_field($field);
            if ( !isset($field_info['type'])
                || !in_array($field_info['type'],
                    ['taxonomy_term_reference','relation_add','entityreference','node_reference']) )
            {
                continue;
            }
            foreach ( $entity->{$field}['und'] as $i=>$ref )
            {
                $ref_uuid = null;
                if ( isset($ref['nid']) )
                {
                    if ( isset($ref['uuid']) )
                    {
                        $ref_uuid = $ref['uuid'];
                    } else if ( is_string($ref['nid']) && strlen($ref['nid'])==36 ) {
                        $ref_uuid = $ref['nid'];
                    } else if ( isset($ref['id']) && is_string($ref['id']) && strlen($ref['id'])==36 ) {
                        $ref_uuid = $ref['id'];
                    } else {
                        $ref_uuid = entity_get_uuid_by_id('node', array($ref['nid']));
                        $ref_uuid = reset($ref_uuid);
                    }
                    if ( empty($ref_uuid) || empty($uuid_info[$ref_uuid]) )
                    {
                        unset($entity->{$field}['und'][$i]);
                        $reindex_field[] = $field;
                        _cdss_log('Warn: CDSS '.__FUNCTION__.' uuid:'. $entity->uuid .' field:'.$field.' is missing a reference so the field is being removed');
                        continue;
                    }
                    $entity->{$field}['und'][$i]['uuid']   = $ref_uuid;
                    $entity->{$field}['und'][$i]['type']   = $uuid_info[$ref_uuid]['type'];
                    $entity->{$field}['und'][$i]['bundle'] = $uuid_info[$ref_uuid]['bundle'];
                    $entity->{$field}['und'][$i]['nid']    = $ref['nid'];

                } elseif ( isset($ref['tid']) ) {
                    if ( isset($ref['uuid']) )
                    {
                        $ref_uuid = $ref['uuid'];
                    } else if ( is_string($ref['tid']) && strlen($ref['tid'])==36 ) {
                        $ref_uuid = $ref['tid'];
                    } else {
                        $ref_uuid = entity_get_uuid_by_id('taxonomy_term', array($ref['tid']));
                        $ref_uuid = reset($ref_uuid);
                    }
                    if ( empty($ref_uuid) || empty($uuid_info[$ref_uuid]) )
                    {
                        unset($entity->{$field}['und'][$i]);
                        $reindex_field[] = $field;
                        // _cdss_log('Warn: CDSS '.__FUNCTION__.' uuid:'. $entity->uuid .' field:'.$field.' is missing a reference so the field is being removed');
                        continue;
                    }
                    $entity->{$field}['und'][$i]['uuid']   = $ref_uuid;
                    $entity->{$field}['und'][$i]['type']   = $uuid_info[$ref_uuid]['type'];
                    $entity->{$field}['und'][$i]['bundle'] = $uuid_info[$ref_uuid]['bundle'];
                    $entity->{$field}['und'][$i]['tid']    = $uuid_info[$ref_uuid]['id'];
                } else if ( isset($ref['target_id']) ) {
                    if (!in_array($ref['target_id'], $ex_entities)) {

                        if (isset($ref['uuid'])) {
                            $ref_uuid = $ref['uuid'];
                        } else if (is_string($ref['target_id']) && strlen($ref['target_id']) == 36) {
                            $ref_uuid = $ref['target_id'];
                        } else {
                            $ref_uuid = entity_get_uuid_by_id('taxonomy_term', array($ref['target_id']));
                            if (empty($ref_uuid)) {
                                $ref_uuid = entity_get_uuid_by_id('node', array($ref['target_id']));
                            }
                            if (empty($ref_uuid)) {
                                $ref_uuid = entity_get_uuid_by_id('relation', array($ref['target_id']));
                                $ref_uuid = reset($ref_uuid);
                            }
                            if (is_array($ref_uuid) && isset($ref_uuid[$ref['target_id']])){
                                $ref_uuid = $ref_uuid[$ref['target_id']];
                            }
                        }
                        //print_r($uuid_info[$ref_uuid]);exit;
                        if (empty($ref_uuid) || empty($uuid_info[$ref_uuid])) {
                            unset($entity->{$field}['und'][$i]);
                            $reindex_field[] = $field;
                            // _cdss_log('Warn: CDSS ' . __FUNCTION__ . ' uuid:' . $entity->uuid . ' field:' . $field . ' is missing a reference so the field is being removed');
                            continue;
                        }
                        $entity->{$field}['und'][$i]['uuid'] = $ref_uuid;
                        $entity->{$field}['und'][$i]['type'] = $uuid_info[$ref_uuid]['type'];
                        $entity->{$field}['und'][$i]['bundle'] = $uuid_info[$ref_uuid]['bundle'];
                        $entity->{$field}['und'][$i]['target_id'] = $uuid_info[$ref_uuid]['id'];
                    }
                    else{
                        unset($entity->{$field}['und'][$i]);
                        $reindex_field[] = $field;
                    }
                } else if ( isset($ref['endpoints']) && !empty($ref['endpoints']['und']) ) {
                    foreach ( $ref['endpoints']['und'] as $j=>$ep )
                    {
                        if ( isset($ep['uuid']) )
                        {
                            $ref_uuid = $ep['uuid'];
                        } else if ( isset($ep['entity_uuid']) ) {
                            $ref_uuid = $ep['entity_uuid'];
                        } else if ( is_string($ep['entity_id']) && strlen($ep['entity_id'])==36 ) {
                            $ref_uuid = $ep['entity_id'];
                        } else if ( isset($ep['entity_type']) ) {
                            $ref_uuid = entity_get_uuid_by_id($ep['entity_type'], array($ep['entity_id']));
                            $ref_uuid = reset($ref_uuid);
                        }
                        if ( empty($ref_uuid) || empty($uuid_info[$ref_uuid]) )
                        {
                            $entity->{$field} = array();
                            // _cdss_log('Warn: CDSS '.__FUNCTION__.' uuid:'. $entity->uuid .' field:'.$field.' is missing a reference so the field is being removed');
                            break;
                        }
                        $entity->{$field}['und'][$i]['endpoints']['und'][$j]['entity_uuid']   = $ref_uuid;
                        $entity->{$field}['und'][$i]['endpoints']['und'][$j]['entity_type']   = $uuid_info[$ref_uuid]['type'];
                        $entity->{$field}['und'][$i]['endpoints']['und'][$j]['entity_bundle'] = $uuid_info[$ref_uuid]['bundle'];
                        $entity->{$field}['und'][$i]['endpoints']['und'][$j]['entity_id']     = $uuid_info[$ref_uuid]['id'];
                    }
                }
            }
        }
        foreach($reindex_field as $field){
            $entity->{$field}['und'] = array_values($entity->{$field}['und']);
        }
        return true;
    } catch( Exception $e ) {
        return false;
    }
}
function _cmp_api_add_term_parent( &$term )
{
    if ( empty($term) ) { return; }
    $uuid_info =& _cmp_api_uuid_info();
    $ref_uuid = null;
    if ( empty($term->parent) )
    {
        $ref_uuid = db_query(
            "SELECT t.uuid
             FROM {taxonomy_term_hierarchy} h
                  JOIN {taxonomy_term_data} t ON (h.parent=t.tid)
             WHERE h.tid=:tid"
            ,array(":tid"=>$term->tid)
        )->fetchField();
    } else if ( is_string($term->parent) && strlen($term->parent)==36 ) {
        $ref_uuid = $term->parent;
    } else {
        $ref_uuid = entity_get_uuid_by_id('taxonomy_term', array($term->parent));
        $ref_uuid = reset($ref_uuid);
    }
    if ( !empty($ref_uuid) && isset($uuid_info[$ref_uuid]) )
    {
        $term->parent_uuid = $ref_uuid;
        $term->parent      = $uuid_info[$ref_uuid]['id'];
    }
    if ( empty($term->parent)      ) { $term->parent      = "0"; }
    if ( empty($term->parent_uuid) ) { $term->parent_uuid = null; }
}
function _cmp_api_add_term_children( &$term )
{
    if ( empty($term) ) { return; }
    if ( empty($term->children) )
    {
        $hier =& _cmp_api_term_hier_info();
        if ( !empty($hier[$term->uuid]) && !empty($hier[$term->uuid]['children']) )
        {
            $term->children = $hier[$term->uuid]['children'];
        }
    }
    if ( empty($term->children) ) { $term->children = array(); }
}
function &_cmp_api_term_hier_info( $refresh=false )
{
    $term_hier_info = &drupal_static(__FUNCTION__);
    if ( $term_hier_info===null || $refresh )
    {
        $hier = db_query("
            SELECT
                p.tid  as parent_tid,
                p.uuid as parent_uuid,
                c.tid  as child_tid,
                c.uuid as child_uuid
            FROM {taxonomy_term_hierarchy} h
                  JOIN {taxonomy_term_data} c ON (h.tid    = c.tid)
                  JOIN {taxonomy_term_data} p ON (h.parent = p.tid)
        ");
        $term_hier_info = array();
        foreach ( $hier as $info )
        {
            if ( !isset($term_hier_info[$info->parent_uuid]) )
            {
                $term_hier_info[$info->parent_uuid] = array(
                    "parent"   => "0",
                    "children" => array()
                );
            }
            if ( !isset($term_hier_info[$info->child_uuid]) )
            {
                $term_hier_info[$info->child_uuid] = array(
                    "parent"   => "0",
                    "children" => array()
                );
            }
            $term_hier_info[$info->parent_uuid]['children'][] = array(
                "uuid" => $info->child_uuid,
                "tid"  => $info->child_tid
            );
            $term_hier_info[$info->child_uuid]['parent'] = array(
                "uuid" => $info->parent_uuid,
                "tid"  => $info->parent_tid
            );
        }
    }
    return $term_hier_info;
}

function _cmp_api_add_s3_urls( &$node )
{
    if ( empty($node) ) { return; }
    $s3path  = '//'. variable_get('s3fs_bucket') .'.s3.amazonaws.com/';
    $s3regex = '/s3\:\/{2,3}/i';
    if ( isset($node->field_file_media)
        && isset($node->field_file_media['und'])
        && isset($node->field_file_media['und'][0])
        && isset($node->field_file_media['und'][0]['uri']) )
    {
        $realURL = preg_replace($s3regex, $s3path, $node->field_file_media['und'][0]['uri'] );
        $node->field_file_media['und'][0]['uri']=$realURL;
    }
    if ( isset($node->field_file_text)
        && isset($node->field_file_text['und'])
        && isset($node->field_file_text['und'][0])
        && isset($node->field_file_text['und'][0]['uri']) )
    {
        $realURL = preg_replace($s3regex, $s3path, $node->field_file_text['und'][0]['uri']);
        $node->field_file_text['und'][0]['uri']=$realURL;
    }
    if ( isset($node->field_html)
        && isset($node->field_html['und'])
        && isset($node->field_html['und'][0]) )
    {
        if ( isset($node->field_html['und'][0]['value']) )
        {
            $node->field_html['und'][0]['value'] = preg_replace($s3regex, $s3path, $node->field_html['und'][0]['value']);
        }
        if ( isset($node->field_html['und'][0]['safe_value']) )
        {
            $node->field_html['und'][0]['safe_value'] = preg_replace($s3regex, $s3path, $node->field_html['und'][0]['safe_value']);
        }
    }
    if ( isset($node->body)
        && isset($node->body['und'])
        && isset($node->body['und'][0]) )
        # && in_array($node->type,['text_content_type','html_content_type']) )
    {
        if ( isset($node->body['und'][0]['value']) )
        {
            $node->body['und'][0]['value'] = preg_replace($s3regex, $s3path, $node->body['und'][0]['value']);
        }
        if ( isset($node->body['und'][0]['summary']) )
        {
            $node->body['und'][0]['summary'] = preg_replace($s3regex, $s3path, $node->body['und'][0]['summary']);
        }
        if ( isset($node->body['und'][0]['safe_value']) )
        {
            $node->body['und'][0]['safe_value'] = preg_replace($s3regex, $s3path, $node->body['und'][0]['safe_value']);
        }
        if ( isset($node->body['und'][0]['safe_summary']) )
        {
            $node->body['und'][0]['safe_summary'] = preg_replace($s3regex, $s3path, $node->body['und'][0]['safe_summary']);
        }
    }
}
function _cmp_api_get_text_asset_by_id(){
    $nidjson=arg(5);
    if(isset($nidjson)) {
        $nid = str_replace(".json","",$nidjson);
        $n = node_load($nid);
        if (!empty($n)) {
            $ret = cmp_api_get_text_asset($n);
            drupal_json_output(array("metadata" => array("exists" => true), "result" => $ret));
        }
        else {

            drupal_json_output(array("metadata"=>array("exists"=>false)));
        }
    }
    else{
        drupal_json_output(array("metadata"=>array("exists"=>false)));
    }
}
function &_cmp_api_uuid_info( $refresh=false )
{
    $uuid_info = &drupal_static(__FUNCTION__);
    if ( $uuid_info===null || $refresh )
    {
        $uuid_info = db_query("
            ( SELECT uuid,
                     'taxonomy_term' as 'type',
                     machine_name    as 'bundle',
                     tid             as 'id'
              FROM   taxonomy_term_data  d
                JOIN taxonomy_vocabulary v
                        ON d.vid=v.vid )
            UNION
            ( SELECT uuid, 'node', type, nid FROM node )
            UNION
            ( SELECT uuid, 'relation', relation_type, rid FROM relation )
        ")->fetchAllAssoc('uuid',PDO::FETCH_ASSOC);
    }
    return $uuid_info;
}

if ( !function_exists('entity_language') ) {
    function entity_language() { return null; }
}

function _cmp_api_get_text_assets($page=0, $page_size=20, $query = null, $date=null, $terms_filter=null, $result_filter=null){
    $noDeletedNodes = true;
    $ret = array();
    $cols = [];
    $allowed_cols = array("id", "title", "summary", "language", "html", "contact_center_only", "status", "location", "for_use_by", "topics", "tags", "created_at", "updated_at", "changed_at");
    if (isset($_REQUEST["page_size"]) && !empty($_REQUEST["page_size"])){
        $page_size = $_REQUEST["page_size"];
    }
    if (isset($_REQUEST["page"]) && !empty($_REQUEST["page"])){
        $page = $_REQUEST["page"];
    }
    if (isset($_REQUEST["query"]) && !empty($_REQUEST["query"])){
        $query = $_REQUEST["query"];
    }
    if (isset($_REQUEST["result_filter"]) && !empty($_REQUEST["result_filter"])){

        $columns = explode(",",strtolower(trim($_REQUEST["result_filter"])));

        foreach($columns as $c){
            if (!empty($c) && !in_array(trim($c), $allowed_cols)){
                drupal_json_output(array("metadata" => array("message" => "There was an error in your query", "errors" => array("result_filter" =>$c." is not exist."))));
                return;
            }
            $cols[]=trim($c);
        }
    }
    $nid_sql = ' n.status = 1 ';
    if (isset($_REQUEST["terms_filter"]) && !empty($_REQUEST["terms_filter"])) {
        $terms = explode("::", strtolower(trim($_REQUEST["terms_filter"])));

        foreach ($terms as $tt) {
            $fieldVal = explode(":", trim($tt));
            if (count($fieldVal) == 2) {
                if (!in_array($fieldVal[0], $allowed_cols)) {
                    drupal_json_output(array("metadata" => array("message" => "There was an error in your query", "errors" => array("terms_filter" => $fieldVal[0] . " is not correct."))));
                    return;
                }
                $vals = explode(",", $fieldVal[1]);
                //build query based on field
                if ($fieldVal[0] == 'id') {
                    $extra_where[] = ' n.nid IN (:nid)';
                    $extra_where_param[":nid"] = $vals;
                }
                if ($fieldVal[0] == 'title') {
                    $extra_where[] = ' n.title IN (:title) ';
                    $extra_where_param[":title"] = $vals;
                }
                if ($fieldVal[0] == 'status') {
                    $nid_list = [];
                    foreach ( $vals as $val )
                    {
                        $s = strtolower($val);
                        if ( $s == "published" )
                        {
                            $nid_list[] = ' n.nid IN ( SELECT nid FROM node WHERE node.status = 1 ) ';
                        } else if ( $s == "archived" ) {
                            $nid_list[] = ' n.nid IN ( 
                                SELECT
                                    nn.nid
                                FROM
                                    node nn
                                    LEFT JOIN node_deleted                      nd on ( nn.nid = nd.nid )
                                    LEFT JOIN field_data_field_archive_date     na on ( nn.nid = na.entity_id )
                                    LEFT JOIN field_data_field_schedule_publish np on ( nn.nid = np.entity_id )
                                    LEFT JOIN workbench_moderation_node_history nw on ( nn.nid = nw.nid AND nn.vid = nw.vid AND nw.is_current = 1 )
                                WHERE
                                    # node is not deleted
                                    ( nd.deletion_state IS NULL OR nd.deletion_state != :soft )
                                    # current revision is not already published
                                    AND nn.status != 1
                                    # is not archived
                                    AND (
                                        # archive date set
                                        na.field_archive_date_value IS NOT NULL
                                        AND # archive date is in the past
                                        na.field_archive_date_value <= NOW()
                                        AND ( # there is no auto-publish date
                                            np.field_schedule_publish_value IS NULL
                                            OR # the auto-publish date is in the future
                                            np.field_schedule_publish_value >= NOW()
                                            OR # the auto-publish date was before the auto-archive date
                                            np.field_schedule_publish_value <= na.field_archive_date_value
                                        )
                                    )
                            )';
                            $extra_where_param[":soft"] = "soft";
                        } else if ( $s == "deleted" ) {
                            $nid_list[] = ' n.nid IN ( SELECT nid FROM node_deleted ) ';
                        }
                    }
                    if ( !empty($nid_list) )
                    {
                        $nid_sql =  ' ( '. join($nid_list,' OR ') .' ) ';
                    }
                }
                if ($fieldVal[0] == 'created_at') {
                    $extra_where[] = ' n.created = :created_at ';
                    $extra_where_param[":created_at"] = strtotime($vals);
                }
                if ($fieldVal[0] == 'updated_at') {
                    $extra_where[] = ' n.changed = :changed_at ';
                    $extra_where_param[":changed_at"] = strtotime($vals);
                }
                if ($fieldVal[0] == 'changed_at') {
                    $extra_where[] = ' n.changed = :changed_at ';
                    $extra_where_param[":changed_at"] = strtotime($vals);
                }
                if ($fieldVal[0] == 'html') {
                    $extra_join[] = ' INNER JOIN field_data_body fb ON fb.entity_id = n.nid ';

                    if(count($vals) ==1){
                        $extra_where[]=' fb.body_value LIKE :str ';
                        $extra_where_param[":str"] = '%'.db_like($vals[0]).'%';
                    }
                    elseif(count($vals) >1){
                        $temp_extra_where = array();
                        $i =0;
                        foreach($vals as $v){
                            $temp_extra_where[] = 'fb.body_value LIKE :str'.$i;
                            $extra_where_param[":str".$i] = '%'.db_like($v).'%';
                            $i++;
                        }
                        $extra_where[]=' ('.join(' OR ', $temp_extra_where).') ';
                    }
                }
                if ($fieldVal[0] == 'language'){
                    $extra_join[] =' INNER JOIN field_data_field_language fl ON fl.entity_id = n.nid ';
                    $extra_where[]=' fl.field_language_value IN (:lang) ';
                    $extra_where_param[":lang"] = $vals;
                }
                if ($fieldVal[0] == 'location'){
                    $i =0;
                    $nids = array();
                    foreach($vals as $v){
                        $r = db_query("SELECT fu.field_friendly_url_value, t.name, field_asset_order_content_target_id as nid FROM field_data_field_asset_order_content aoc
                                        INNER JOIN field_data_field_friendly_url fu ON fu.entity_id = aoc.entity_id
                                        INNER JOIN taxonomy_term_data t ON t.tid=aoc.entity_id
                                        WHERE fu.field_friendly_url_value LIKE :loc".$i." OR t.name LIKE :loc".$i." OR field_asset_order_content_target_id LIKE :loc".$i, array(":loc".$i=>'%'.db_like($v).'%'));

                        foreach($r as $l){
                            $nids[] = $l->nid;
                        }
                        $i++;
                    }

                    $extra_where[] = ' n.nid IN (:nids) ';
                    $extra_where_param[":nids"] = $nids;

                }
                if ($fieldVal[0] == 'for_use_by'){
                    $extra_join[] =' INNER JOIN field_data_field_for_use_by_text ffut ON ffut.entity_id = n.nid ';
                    $extra_where[]=' ffut.field_for_use_by_text_value IN (:uby) ';
                    $extra_where_param[":uby"] = $vals;
                }
                if ($fieldVal[0] == 'tags'){
                    $extra_join[] =' INNER JOIN field_data_field_content_tags fct ON fct.entity_id = n.nid ';
                    $extra_join[] =' INNER JOIN taxonomy_term_data ttd ON ttd.tid = fct.field_content_tags_tid ';
                    if(count($vals) ==1){
                        $extra_where[]=' ttd.name LIKE :tags ';
                        $extra_where_param[":tags"] = '%'.db_like($vals[0]).'%';
                    }
                    elseif(count($vals) >1){
                        $temp_extra_where = array();
                        $i =0;
                        foreach($vals as $v){
                            $temp_extra_where[] = 'ttd.name LIKE :tags'.$i;
                            $extra_where_param[":tags".$i] = '%'.db_like($v).'%';
                            $i++;
                        }
                        $extra_where[]=' ('.join(' OR ', $temp_extra_where).') ';
                    }
                }
                /*if ($fieldVal[0] == 'topics'){
                    $extra_join[] =' INNER JOIN field_data_field_asset_topic_taxonomy fatt ON fatt.entity_id = n.nid ';
                    $extra_join[] =' INNER JOIN taxonomy_term_data ttd2 ON ttd2.tid = fatt.field_asset_topic_taxonomy_tid ';
                    if(count($vals) ==1){
                        $extra_where[]=' ttd2.name LIKE :topics ';
                        $extra_where_param[":topics"] = '%'.db_like($vals[0]).'%';
                    }
                    elseif(count($vals) >1){
                        $temp_extra_where = array();
                        $i =0;
                        foreach($vals as $v){
                            $temp_extra_where[] = 'ttd2.name LIKE :topics'.$i;
                            $extra_where_param[":topics".$i] = '%'.db_like($v).'%';
                            $i++;
                        }
                        $extra_where[]=' ('.join(' OR ', $temp_extra_where).') ';
                    }
                }*/
                if ($fieldVal[0] == 'summary'){
                    $extra_join[] =' INNER JOIN field_data_field_description fd ON fd.entity_id = n.nid ';

                    if(count($vals) ==1){
                        $extra_where[]=' fd.field_description_value LIKE :desc ';
                        $extra_where_param[":desc"] = '%'.db_like($vals[0]).'%';
                    }
                    elseif(count($vals) >1){
                        $temp_extra_where = array();
                        $i =0;
                        foreach($vals as $v){
                            $temp_extra_where[] = 'fd.field_description_value LIKE :desc'.$i;
                            $extra_where_param[":desc".$i] = '%'.db_like($v).'%';
                            $i++;
                        }
                        $extra_where[]=' ('.join(' OR ', $temp_extra_where).') ';
                    }
                }
                if ($fieldVal[0] == 'contact_center_only'){
                    $extra_join[] =' INNER JOIN field_data_field_contact_center_info fcci ON fcci.entity_id = n.nid ';

                    if(count($vals) ==1){
                        $extra_where[]=' fcci.field_contact_center_info_value LIKE :fcci ';
                        $extra_where_param[":fcci"] = '%'.db_like($vals[0]).'%';
                    }
                    elseif(count($vals) >1){
                        $temp_extra_where = array();
                        $i =0;
                        foreach($vals as $v){
                            $temp_extra_where[] = 'fcci.field_contact_center_info_value LIKE :fcci'.$i;
                            $extra_where_param[":fcci".$i] = '%'.db_like($v).'%';
                            $i++;
                        }
                        $extra_where[]=' ('.join(' OR ', $temp_extra_where).') ';
                    }
                }
                if ($fieldVal[0] == 'html') {
                    $extra_join[] = ' INNER JOIN field_data_body fb ON fb.entity_id = n.nid ';

                    if(count($vals) ==1){
                        $extra_where[]=' fb.body_value LIKE :str ';
                        $extra_where_param[":str"] = '%'.db_like($vals[0]).'%';
                    }
                    elseif(count($vals) >1){
                        $temp_extra_where = array();
                        $i =0;
                        foreach($vals as $v){
                            $temp_extra_where[] = 'fb.body_value LIKE :str'.$i;
                            $extra_where_param[":str".$i] = '%'.db_like($v).'%';
                            $i++;
                        }
                        $extra_where[]=' ('.join(' OR ', $temp_extra_where).') ';
                    }
                }
            }
        }
    }
    $add_where[] = $nid_sql;
    $add_where[] = "n.type = 'text_content_type'";
    if (!empty($extra_where)){
        $add_where = array_merge($add_where, $extra_where);
    }
    $where_param = (!empty($extra_where_param)? $extra_where_param : array());
    $join = (!empty($extra_join)? $extra_join : array());

    if (isset($_REQUEST["date_filter"]) && !empty($_REQUEST["date_filter"])){
        $dates = $_REQUEST["date_filter"];
        $dts = explode(',',$dates);
        $error_occurred = false;
        if (count($dts) == 2){
            if (validateDate($dts[0]) && validateDate($dts[1])) {
                // between query
                $add_where[] = ' n.changed >= :dt1 ';
                $add_where[] = ' n.changed <= :dt2 ';
                $where_param[":dt1"] = strtotime(_reformatDate($dts[0]));
                $where_param[":dt2"] = strtotime(_reformatDate($dts[1]));
            }
            else{
                $error_occurred=true;
            }
        }
        elseif(count($dts) == 1){
            if (validateDate($dts[0])) {
                // since
                $add_where[] = ' n.changed >= :dt1';
                $where_param[":dt1"] = strtotime(_reformatDate($dts[0]));
            }
            else{
                $error_occurred=true;
            }
        }

        if ($error_occurred) {
            drupal_json_output(array("metadata" => array("message" => "There was an error in your query", "errors" => array("date_filter" => "Time is out of range, format is YYYY-MM-DD(,YYYY-MM-DD) or YYYY-MM-DDT00:00:00.00(,YYYY-MM-DD)"))));
            return;
        }
    }
    if (!empty($query)){
        $join[] = ' INNER JOIN field_data_body fdb ON fdb.entity_id = n.nid ';
        $add_where[] = ' (n.title LIKE :str OR fdb.body_value LIKE :str )';
        $where_param[":str"] = '%'.db_like(strtolower($query)).'%';
    }


    $sql_count = "SELECT count(*) FROM node n ".join(' ',$join)." WHERE ".join(' AND ', $add_where);
    $sql = "SELECT * FROM node n ".join(' ',$join)." WHERE ".join(' AND ', $add_where)." LIMIT ".$page_size .' OFFSET '.$page ;

    $count = db_query($sql_count, $where_param)->fetchField(0);
    $pages = ceil($count/$page_size);

    $res = db_query($sql, $where_param);
    foreach($res as $r) {
        $n = node_load($r->nid);
        $ret[] =cmp_api_get_text_asset($n, $cols);
    }

    drupal_json_output(array("metadata"=>array("count"=>(int)$count, "page"=>$page, "page_size"=>(int)($page_size > $count? $count:$page_size), "pages"=>$pages),"results"=>$ret));
}
function _reformatDate($date){
    $date = str_replace('T00:00:00.000', ' ', $date);
    $date = str_replace('T00:00:00.00', ' ', $date);
    $date = str_replace('T', ' ', $date);
    $date = str_replace('.000Z','', $date);
    $date = str_replace('.000','', $date);
    $date = str_replace('.00','', $date);
    $date = str_replace('Z','', $date);
    return $date;
}
function validateDate($date, $format = 'Y-n-j')
{

    $formats = array('Y-m-d', 'Y-n-d','Y-m-dH:i:s', 'Y-n-dH:i:s');
    $date = str_replace('T00:00:00.000', '', $date);
    $date = str_replace('T00:00:00.00', '', $date);
    $date = str_replace('T', '', $date);
    $date = str_replace('.000Z','', $date);
    $date = str_replace('.000','', $date);
    $date = str_replace('.00','', $date);
    // print $date; exit;
    foreach($formats as $f){
        $d = DateTime::createFromFormat($format, $date);
        $res = $d && $d->format($f) == $date;

        if (!$res ){
            return true;
        }
    }
    return false;
}
function _cmp_api_get_directory_records_router(){
    $args = arg();

    if (isset($args[5])){

        if ($args[5] =='bbb.json' || $args[5] =='bbb'){
            $extra_where[]=' fdt.field_directory_type_value LIKE \'Better Business Bureaus\' ';
            $extra_join[] =' INNER JOIN field_data_field_directory_type fdt ON fdt.entity_id = n.nid ';
            _cmp_api_get_directory_records($page=0, $page_size=20, $query = null, $date=null, $terms_filter=null, $result_filter=null,$extra_where , $extra_join  );
        }
        elseif ($args[5] =='federal.json' || $args[5] =='federal'){
            $extra_where[]=' fdt.field_directory_type_value LIKE \'Federal Agencies\' ';
            $extra_join[] =' INNER JOIN field_data_field_directory_type fdt ON fdt.entity_id = n.nid ';
            _cmp_api_get_directory_records($page=0, $page_size=20, $query = null, $date=null, $terms_filter=null, $result_filter=null,$extra_where , $extra_join  );
        }
        elseif ($args[5] =='consumer_agencies.json' || $args[5] =='consumer_agencies'){
            $extra_where[]=' fdt.field_directory_type_value LIKE \'Government Consumer Protection Offices\' ';
            $extra_join[] =' INNER JOIN field_data_field_directory_type fdt ON fdt.entity_id = n.nid ';
            _cmp_api_get_directory_records($page=0, $page_size=20, $query = null, $date=null, $terms_filter=null, $result_filter=null,$extra_where , $extra_join  );
        }
        elseif ($args[5] =='state' && isset($args[6])){
            $extra_where[]=' LOWER(fs.field_state_value) LIKE :state';
            $extra_join[] =' INNER JOIN field_data_field_state fs ON fs.entity_id = n.nid ';
            $where_param[":state"] = '%'.db_like(strtolower(str_replace('.json','',$args[6]))).'%';
            _cmp_api_get_directory_records($page=0, $page_size=20, $query = null, $date=null, $terms_filter=null, $result_filter=null,$extra_where , $extra_join, $where_param );
        }
        elseif(is_numeric(str_replace('.json', '',$args[5]))){
            $extra_where[]=' n.nid = :nid';
            $nid = str_replace('.json', '',$args[5]);
            $where_param[":nid"] = $nid;
            _cmp_api_get_directory_records($page=0, $page_size=20, $query = null, $date=null, $terms_filter=null, $result_filter=null,$extra_where, $extra_join = null, $where_param,null,false,"single_dirtype" );
        }
        elseif(($args[5] =='autocomplete.json' || $args[5] =='autocomplete') && isset($_REQUEST["directory_type"])){
            $extra_where[]=' fdt.field_directory_type_value LIKE :dir_type';
            $where_param[":dir_type"] = db_like($_REQUEST["directory_type"]);
            $extra_join[] =' INNER JOIN field_data_field_directory_type fdt ON fdt.entity_id = n.nid ';

            if (isset($_REQUEST["language"])){
                $extra_where[]=' fl.field_language_value LIKE :langu';
                $where_param[":langu"] = db_like($_REQUEST["language"]);
                $extra_join[] =' INNER JOIN field_data_field_language fl ON fl.entity_id = n.nid ';
            }
            if (isset($_REQUEST["name"])){
                $extra_where[]=' n.title LIKE :name';
                $where_param[":name"] = '%'.db_like($_REQUEST["name"]).'%';
            }
            _cmp_api_get_directory_records($page=0, $page_size=20, $query = null, $date=null, $terms_filter=null, $result_filter=null, $extra_where, $extra_join, $where_param, array('id', 'title', 'source_url'), true );
        }
        else{
            drupal_json_output(array("metadata"=>array("exists"=>"kkk")));
        }
    }
    elseif(isset($args[4]) && ($args[4] == 'directory_records.json' || $args[4] == 'directory_records')){
        _cmp_api_get_directory_records();
    }
    else {
        drupal_json_output(array("metadata"=>array("exists"=>false)));
    }
}
function _cmp_api_get_directory_records($page=0, $page_size=20, $query = null, $date=null, $terms_filter=null, $result_filter=null,$extra_where =null, $extra_join = null, $extra_where_param = null, $cols=null, $all_result=false, $type=null ){

    $ret = array();
    $allowed_cols = array("id","title", "source_url", "state_detail_id", "language", "alpha_order_name", "street_one", "street_two", "city", "state","status",
        "zip", "summary", "directory_type", "donated_money", "government_branch", "phone_number", "acronym", "contact_links", "website_links", "created_at", "updated_at", "changed_at", "parent", "children");
    if (isset($_REQUEST["page_size"]) && !empty($_REQUEST["page_size"])){
        $page_size = $_REQUEST["page_size"];
    }
    if (isset($_REQUEST["page"]) && !empty($_REQUEST["page"])){
        $page = $_REQUEST["page"];
    }
    if (isset($_REQUEST["query"]) && !empty($_REQUEST["query"])){
        $query = $_REQUEST["query"];
    }
    if (isset($_REQUEST["result_filter"]) && !empty($_REQUEST["result_filter"])){

        $columns = explode(",",strtolower(trim($_REQUEST["result_filter"])));

        foreach($columns as $c){
            if (!empty($c) && !in_array(trim($c), $allowed_cols)){
                drupal_json_output(array("metadata" => array("message" => "There was an error in your query", "errors" => array("result_filter" =>$c." is not exist."))));
                return;
            }
            $cols[]=trim($c);
        }
    }
    if (isset($_REQUEST["terms_filter"]) && !empty($_REQUEST["terms_filter"])){
        $terms = explode("::",strtolower(trim($_REQUEST["terms_filter"])));

        foreach($terms as $tt){
            $fieldVal=explode(":",trim($tt));
            if (count($fieldVal) ==2){
                if (!in_array($fieldVal[0], $allowed_cols)){
                    drupal_json_output(array("metadata" => array("message" => "There was an error in your query", "errors" => array("terms_filter" =>$fieldVal[0]." is not correct."))));
                    return;
                }
                $vals = explode(",", $fieldVal[1]);
                //build query based on field
                if ($fieldVal[0] == 'id'){
                    $extra_where[]=' n.nid IN (:nid)';
                    $extra_where_param[":nid"] = $vals;
                }
                if ($fieldVal[0] == 'title'){
                    $extra_where[]=' n.title IN (:title) ';
                    $extra_where_param[":title"] = $vals;
                }
                if ($fieldVal[0] == 'status'){
                    $extra_where[]=' n.status = :sstatus ';
                    $extra_where_param[":sstatus"] = (strtolower($vals[0]) == 'published'? 1 : 0);
                }
                if ($fieldVal[0] == 'created_at'){
                    $extra_where[]=' n.created = :created_at ';
                    $extra_where_param[":created_at"] =strtotime($vals);
                }
                if ($fieldVal[0] == 'updated_at'){
                    $extra_where[]=' n.changed = :changed_at ';
                    $extra_where_param[":changed_at"] = strtotime($vals);
                }
                if ($fieldVal[0] == 'changed_at'){
                    $extra_where[]=' n.changed = :changed_at ';
                    $extra_where_param[":changed_at"] = strtotime($vals);
                }
                if ($fieldVal[0] == 'state'){
                    $extra_join[] =' INNER JOIN field_data_field_state fs ON fs.entity_id = n.nid ';
                    $extra_where[]=' fs.field_state_value IN (:state) ';
                    $extra_where_param[":state"] = $vals;
                }
                if ($fieldVal[0] == 'directory_type'){
                    $extra_join[] =' INNER JOIN field_data_field_directory_type fdt ON fdt.entity_id = n.nid ';
                    $extra_where[]=' fdt.field_directory_type_value IN (:dirtype) ';
                    $extra_where_param[":dirtype"] = $vals;
                }
                if ($fieldVal[0] == 'language'){
                    $extra_join[] =' INNER JOIN field_data_field_language fl ON fl.entity_id = n.nid ';
                    $extra_where[]=' fl.field_language_value IN (:lang) ';
                    $extra_where_param[":lang"] = $vals;
                }
                if ($fieldVal[0] == 'alpha_order_name'){
                    $extra_join[] =' INNER JOIN field_data_field_alpha_order_name faon ON faon.entity_id = n.nid ';
                    $extra_where[]=' faon.field_alpha_order_name_value IN (:aoname) ';
                    $extra_where_param[":aoname"] = $vals;
                }
                if ($fieldVal[0] == 'street_one'){
                    $extra_join[] =' INNER JOIN field_data_field_street_1 fs1 ON fs1.entity_id = n.nid ';
                    $extra_where[]=' fs1.field_street_1_value IN (:st1) ';
                    $extra_where_param[":st1"] = $vals;
                }
                if ($fieldVal[0] == 'street_two'){
                    $extra_join[] =' INNER JOIN field_data_field_street_2 fs2 ON fs2.entity_id = n.nid ';
                    $extra_where[]=' fs2.field_street_2_value IN (:st2) ';
                    $extra_where_param[":st2"] = $vals;
                }
                if ($fieldVal[0] == 'city'){
                    $extra_join[] =' INNER JOIN field_data_field_city fc ON fc.entity_id = n.nid ';
                    $extra_where[]=' fc.field_city_value IN (:city) ';
                    $extra_where_param[":city"] = $vals;
                }
                if ($fieldVal[0] == 'zip'){
                    $extra_join[] =' INNER JOIN field_data_field_zip fz ON fz.entity_id = n.nid ';
                    $extra_where[]=' fz.field_zip_value IN (:zip) ';
                    $extra_where_param[":zip"] = $vals;
                }
                if ($fieldVal[0] == 'summary'){
                    $extra_join[] = ' INNER JOIN field_data_field_description fd ON fd.entity_id = n.nid ';
                    if(count($vals) ==1){
                        $extra_where[]=' fd.field_description_value LIKE :desc ';
                        $extra_where_param[":desc"] = '%'.db_like($vals[0]).'%';
                    }
                    elseif(count($vals) >1){
                        $temp_extra_where = array();
                        $i =0;
                        foreach($vals as $v){
                            $temp_extra_where[] = 'fd.field_description_value LIKE :desc'.$i;
                            $extra_where_param[":desc".$i] = '%'.db_like($v).'%';
                            $i++;
                        }
                        $extra_where[]=' ('.join(' OR ', $temp_extra_where).') ';
                    }
                }
                if ($fieldVal[0] == 'donated_money'){
                    $extra_join[] =' INNER JOIN field_data_field_donated_money fdm ON fdm.entity_id = n.nid  ';
                    $extra_where[]=' fdm.field_donated_money_value IN (:donated_money) ';
                    $extra_where_param[":donated_money"] = $vals;
                }
                if ($fieldVal[0] == 'government_branch'){
                    $extra_join[] =' INNER JOIN field_data_field_government_branch fgb ON fgb.entity_id = n.nid  ';
                    $extra_where[]=' fgb.field_government_branch_value IN (:gov_branch) ';
                    $extra_where_param[":gov_branch"] = $vals;
                }
                if ($fieldVal[0] == 'phone_number'){
                    $extra_join[] =' INNER JOIN field_data_field_phone_number fpn ON fpn.entity_id = n.nid  ';
                    $extra_where[]=' fpn.field_phone_number_value LIKE :phone_num ';
                    $extra_where_param[":phone_num"] = '%'.db_like($vals[0]).'%';
                }
                if ($fieldVal[0] == 'acronym'){
                    $extra_join[] =' INNER JOIN field_data_field_acronym fa ON fa.entity_id = n.nid  ';
                    $extra_where[]=' fa.field_acronym_value IN (:acronym) ';
                    $extra_where_param[":acronym"] = $vals;
                }
                if ($fieldVal[0] == 'contact_links'){
                    $extra_join[] =' INNER JOIN field_data_field_contact_links fcl ON fcl.entity_id = n.nid  ';
                    $extra_where[]=' fcl.field_contact_links_value LIKE :contact_links ';
                    $extra_where_param[":contact_links"] = '%'.db_like($vals[0]).'%';
                }
                if ($fieldVal[0] == 'website_links'){
                    $extra_join[] =' INNER JOIN field_data_field_website_links fwl ON fwl.entity_id = n.nid  ';
                    $extra_where[]=' fwl.field_website_links_value LIKE :website_links ';
                    $extra_where_param[":website_links"] = '%'.db_like($vals[0]).'%';
                }
            }
            else
            {
                drupal_json_output(array("metadata" => array("message" => "There was an error in your query", "errors" => array("terms_filter" =>$tt." is not correct."))));
                return;
            }
        }
    }

    $add_where[] = "n.type = 'directory_record_content_type'";
    $add_where[] = "n.status = 1";
    $add_where[] = "n.nid NOT IN (SELECT nid FROM node_deleted)";

    if (!empty($extra_where)){
        $add_where = array_merge($add_where, $extra_where);
    }
    $where_param = (!empty($extra_where_param)? $extra_where_param : array());
    $join = (!empty($extra_join)? $extra_join : array());

    if (isset($_REQUEST["date_filter"]) && !empty($_REQUEST["date_filter"])){
        $dates = $_REQUEST["date_filter"];
        $dts = explode(',',$dates);
        $error_occurred = false;
        if (count($dts) == 2){
            if (validateDate($dts[0]) && validateDate($dts[1])) {
                // between query
                $add_where[] = ' n.changed >= :dt1 ';
                $add_where[] = ' n.changed <= :dt2 ';
                $where_param[":dt1"] = strtotime(_reformatDate($dts[0]));
                $where_param[":dt2"] = strtotime(_reformatDate($dts[1]));
            }
            else{
                $error_occurred=true;
            }
        }
        elseif(count($dts) == 1){
            if (validateDate($dts[0])) {
                // since
                $add_where[] = ' n.changed >= :dt1';
                $where_param[":dt1"] = strtotime(_reformatDate($dts[0]));
            }
            else{
                $error_occurred=true;
            }
        }

        if ($error_occurred) {
            drupal_json_output(array("metadata" => array("message" => "There was an error in your query", "errors" => array("date_filter" => "Time is out of range, format is YYYY-MM-DD(,YYYY-MM-DD)"))));
            return;
        }
    }
    if (!empty($query)){
        $join[] = ' INNER JOIN field_data_field_alpha_order_name aon ON aon.entity_id = n.nid ';
        $add_where[] = ' (n.title LIKE :str OR aon.field_alpha_order_name_value LIKE :str)';
        $where_param[":str"] = '%'.db_like($query).'%';
    }

    $sql_count = "SELECT count(*) FROM node n ".join(' ',$join)." WHERE ".join(' AND ', $add_where);
    $sql = "SELECT * FROM node n ".join(' ',$join)." WHERE ".join(' AND ', $add_where).((!$all_result)? (" LIMIT ".$page_size .' OFFSET '.$page) : "" );
    //print_r($where_param);
    //exit;
    $count = db_query($sql_count, $where_param)->fetchField(0);
    $pages = ceil($count/$page_size);

    $res = db_query($sql, $where_param);
    foreach($res as $r) {
        $n = node_load($r->nid);
        $ret[] =cmp_api_get_directory_record($n, $cols);
    }

    if (empty($ret)){
        drupal_json_output(array("metadata" => array("exists" => false)));
        return;
    }
    elseif(!empty($type) && $type =='single_dirtype'){

        drupal_json_output(array("metadata" => array("exists" => true), "result" => $ret));
    }
    elseif (!$all_result) {
        drupal_json_output(array("metadata" => array("count" => (int)$count, "page" => $page, "page_size" => (int)($page_size > $count? $count:$page_size), "pages" => $pages), "results" => $ret));
    }

    else {
        drupal_json_output(array("results" => $ret));
    }

}
function cmp_api_get_directory_record($n,$cols){

    $cached_terms=array();
    $useby = array();
    foreach($n->field_for_use_by_text['und'] as $uby){
        $useby[] = $uby['value'];
    }

    if ($n->field_language['und'][0]['value'] == 'Spanish'){
        $englishMode=false;
        $site = "https://www.usa.gov/espanol";
    }
    else{
        $englishMode=true;
        $site = 'https://usa.gov';
    }

    $parent = array();
    foreach($n->field_parent_record_en['und'] as $att){
        if (array_key_exists($att['target_id'],$cached_terms)) {
            $parent[] = array("id"=>$att['target_id'], "title"=>$cached_terms[$att['target_id']]);
        }
        else {
            $r = db_query("SELECT title FROM node WHERE nid =:nid", array(":nid" => $att['target_id']));
            foreach ($r as $node) {
                $parent[] = array("id"=>$att['target_id'], "title"=>$node->title);
                $cached_terms[$att['target_id']] =$node->title;
            }
        }
    }

    $children = array();
    foreach($n->field_child_records_en['und'] as $att){
        if (array_key_exists($att['target_id'],$cached_terms)) {
            $children[] =  array("id"=>$att['target_id'], "title"=>$cached_terms[$att['target_id']]);
        }
        else {
            $r = db_query("SELECT title FROM node WHERE nid =:nid", array(":nid" => $att['target_id']));
            foreach ($r as $node) {
                $children[$att['target_id']] =  array("id"=>$att['target_id'], "title"=>$node->title);
                $cached_terms[$att['target_id']] =$node->title;
            }
        }
    }

    // for url
    $title = $n->title;
    $dirRecordType = $n->field_directory_type['und'][0]['value'];
    $urlAlphaOrderName = $n->field_alpha_order_name['und'][0]['value'];
    $dbState = $n->field_state['und'][0]['value'];

    // URL-friendly version of the alpha-name
    if ( empty($urlAlphaOrderName) ) {
        $urlAlphaOrderName = '!NotSetInCMP!';
    } else {
        $urlAlphaOrderName = strtolower($urlAlphaOrderName);
        $urlAlphaOrderName = str_replace(' ', '-', $urlAlphaOrderName);
        $urlAlphaOrderName = str_replace('.', '-', $urlAlphaOrderName);
        $urlAlphaOrderName = str_replace(',', '-', $urlAlphaOrderName);
        $urlAlphaOrderName = str_replace(')', '-', $urlAlphaOrderName);
        $urlAlphaOrderName = str_replace('(', '-', $urlAlphaOrderName);
        $urlAlphaOrderName = str_replace('–', '-', $urlAlphaOrderName);
        $urlAlphaOrderName = rtrim($urlAlphaOrderName, '-');
        $urlAlphaOrderName = ltrim($urlAlphaOrderName, '-');
        while ( strpos($urlAlphaOrderName, '--') !== false ) {
            $urlAlphaOrderName = str_replace('--', '-', $urlAlphaOrderName);
        }
    }

    // URL-friendly version of the title
    if ( empty($title) ) {
        $urlTitle = '!NotSetInCMP!';
    } else {
        $urlTitle = $title;
        $urlTitle = strtolower($urlTitle);
        $urlTitle = str_replace(' ', '-', $urlTitle);
        $urlTitle = str_replace('.', '-', $urlTitle);
        $urlTitle = str_replace(',', '-', $urlTitle);
        $urlTitle = str_replace('(', '-', $urlTitle);
        $urlTitle = str_replace(')', '-', $urlTitle);
        $urlTitle = str_replace('–', '-', $urlTitle);
        $urlTitle = rtrim($urlTitle, '-');
        $urlTitle = ltrim($urlTitle, '-');
        while ( strpos($urlTitle, '--') !== false ) {
            $urlTitle = str_replace('--', '-', $urlTitle);
        }
    }

    // URL-friendly version of [full] state name
    if ( empty($dbState) ) {
        $urlShortState = '!NotSetInCMP!';
    } else {
        $urlShortState = directory_pages_acronymToStateName($dbState);
    }
    // Based on the Directory-Record type, return an [alias] URL
    switch ( strtolower($dirRecordType) ) {

        case 'federal agencies';
        case 'Better Business Bureaus';

            $source_url = ( $englishMode ? '/federal-agencies/' : '/agencias-federales/') . _sanitzie_path($urlTitle);break;

        case 'consumer organizations';
        case 'government consumer protection offices';

            $source_url= ( $englishMode ? '/state-consumer/' : '/organizaciones-consumidor/') . _sanitzie_path($urlShortState);break;

        case 'state government agencies';

            $source_url= ( $englishMode ? '/state-government/' : '/gobiernos-estatales/') . _sanitzie_path($urlShortState);break;
        default:

            $source_url= ( $englishMode ? '/federal-agencies/' : '/agencias-federales/') . _sanitzie_path($urlTitle);
    }


    if (empty($cols)) {
        $ret = array("id" =>(int) $n->nid,
            "title" => $n->title,
            "source_url" => $site . $source_url,
            "language" => $n->field_language['und'][0]['value'],
            "alpha_order_name" => $n->alpha_order_name['und'][0]['value'],
            "street_one" => $n->field_street_1['und'][0]['value'],
            "street_two" => $n->field_street_2['und'][0]['value'],
            "status" => ($n->status ? "Published" : "Draft"),
            "city" => $n->field_city['und'][0]['value'],
            "state" => $n->field_state['und'][0]['value'],
            "zip" => $n->field_zip['und'][0]['value'],
            "summary" => htmlspecialchars($n->field_description['und'][0]['value']),
            "directory_type" => $n->field_directory_type['und'][0]['value'],
            "donated_money" => $n->field_donated_money['und'][0]['value'],
            "government_branch" => $n->field_government_branch['und'][0]['value'],
            "phone_number" => $n->field_phone_number['und'][0]['value'],
            "acronym" => $n->field_acronym['und'][0]['value'],
            "contact_links" => htmlspecialchars($n->field_contact_links['und'][0]['value']),
            "website_links" => htmlspecialchars($n->field_website_links['und'][0]['value']),
            "created_at" => date("Y-m-d", $n->created).'T'.date("G:i:s.000",$n->created)."Z",
            "updated_at" => date("Y-m-d", $n->changed).'T'.date("G:i:s.000",$n->changed)."Z",
            "changed_at" => date("Y-m-d", $n->changed).'T'.date("G:i:s.000",$n->changed)."Z",
            "parent" => $parent,
            "children" => $children
        );
    }
    else{

        $ret = [];
        if (in_array('id',$cols)){
            $ret['id'] = (int)$n->nid;
        }
        if (in_array('title',$cols)){
            $ret['title'] = $n->title;
        }
        if (in_array('source_url',$cols)){
            $ret['source_url'] = $site . $source_url;
        }
        if (in_array('language',$cols)){
            $ret['language'] = $n->field_language['und'][0]['value'];
        }
        if (in_array('alpha_order_name',$cols)){
            $ret['alpha_order_name'] = $n->alpha_order_name['und'][0]['value'];
        }
        if (in_array('street_one',$cols)){
            $ret['street_one'] = $n->field_street_1['und'][0]['value'];
        }
        if (in_array('street_two',$cols)){
            $ret['street_two'] = $n->field_street_2['und'][0]['value'];
        }
        if (in_array('status',$cols)){
            $ret['status'] = ($n->status ? "Published" : "Draft");
        }
        if (in_array('city',$cols)){
            $ret['city'] = $n->field_city['und'][0]['value'];
        }
        if (in_array('state',$cols)){
            $ret['state'] = $n->field_state['und'][0]['value'];
        }
        if (in_array('zip',$cols)){
            $ret['zip'] = (int)$n->field_zip['und'][0]['value'];
        }
        if (in_array('summary',$cols)){
            $ret['summary'] = htmlspecialchars($n->field_description['und'][0]['value']);
        }
        if (in_array('directory_type',$cols)){
            $ret['directory_type'] = $n->field_directory_type['und'][0]['value'];
        }
        if (in_array('donated_money',$cols)){
            $ret['donated_money'] = $n->field_donated_money['und'][0]['value'];
        }
        if (in_array('government_branch',$cols)){
            $ret['government_branch'] = $n->field_government_branch['und'][0]['value'];
        }
        if (in_array('phone_number',$cols)){
            $ret['phone_number'] = $n->field_phone_number['und'][0]['value'];
        }
        if (in_array('acronym',$cols)){
            $ret['acronym'] = $n->field_acronym['und'][0]['value'];
        }
        if (in_array('contact_links',$cols)){
            $ret['contact_links'] = htmlspecialchars($n->field_contact_links['und'][0]['value']);
        }
        if (in_array('website_links',$cols)){
            $ret['website_links'] = htmlspecialchars($n->field_website_links['und'][0]['value']);
        }
        if (in_array('created_at',$cols)){
            $ret['created_at'] = date("Y-m-d", $n->created).'T'.date("G:i:s.000",$n->created)."Z";
        }
        if (in_array('updated_at',$cols)){
            $ret['updated_at'] =date("Y-m-d", $n->changed).'T'.date("G:i:s.000",$n->changed)."Z";
        }
        if (in_array('changed_at',$cols)){
            $ret['changed_at'] = date("Y-m-d", $n->changed).'T'.date("G:i:s.000",$n->changed)."Z";
        }
        if (in_array('parent',$cols)){
            $ret['parent'] = $parent;
        }
        if (in_array('children',$cols)){
            $ret['children'] = $children;
        }
    }

    return $ret;
}

function _get_term_parents(){

}

function cmp_api_get_text_asset($n, $cols=null){
    $ret = array();

    $cached_terms=array();
    $useby = array();
    $tags = array();
    $topics = array();
    $location = array();
    foreach($n->field_for_use_by_text['und'] as $uby){
        $useby[] = $uby['value'];
    }
    $all_topics = array();
    $sstids = db_query("SELECT entity_id FROM field_data_field_asset_order_content WHERE field_asset_order_content_target_id = :nid", array(':nid'=>$n->nid));
    foreach($sstids as $sstt){
        $term_parents = taxonomy_get_parents_all($sstt->entity_id);
        foreach($term_parents as $ttt){
            $topics[] = $ttt->name;
        }
        $all_topics[] = $topics;
        $topics=array();
    }

    foreach($n->field_content_tags['und'] as $ctag){

        if (array_key_exists($ctag['tid'],$cached_terms)) {
            $tags[] = $cached_terms[$ctag['tid']];
        }
        else {
            $r = db_query("SELECT name FROM taxonomy_term_data WHERE tid =:tid", array(":tid" => $ctag['tid']));
            foreach ($r as $term) {
                $tags[] = $term->name;
                $cached_terms[$ctag['tid']] =$term->name;
            }
        }
    }
    $site = '';
    /* if (in_array("GobiernoUSA.gov", $useby)){

         $site="https://usa.gov";
     }
     else{

     }*/
    $site="https://usa.gov";
    $r = db_query("SELECT fu.field_friendly_url_value, t.name FROM field_data_field_asset_order_content aoc
      INNER JOIN field_data_field_friendly_url fu ON fu.entity_id = aoc.entity_id
      INNER JOIN taxonomy_term_data t ON t.tid=aoc.entity_id
      WHERE field_asset_order_content_target_id = :nid", array(":nid"=>$n->nid));
    foreach($r as $l){
        $location[] = array("page_title"=>$l->name, "url"=> $site.$l->field_friendly_url_value."#item-".$n->nid);
    }

    if (empty($cols)) {
        $ccInfo = "";
        if ( isset($n->field_contact_center_info['und']) )
        {
            $ccInfo = htmlspecialchars($n->field_contact_center_info['und'][0]['value']);
        }

        $ret = array("id" => (int)$n->nid,
            "title" => $n->title,
            "summary" => htmlspecialchars($n->field_description['und'][0]['value']),
            "language" => $n->field_language['und'][0]['value'],
            "html" => htmlspecialchars(_internalLink_fixer($n->body['und'][0]['value'])),
            "contact_center_only" => $ccInfo,
            "status" => ($n->status ? "Published" : "Draft"),
            "location" => $location,
            "for_use_by" => $useby,
            "tags" => $tags,
            "topics" => $all_topics,
            "created_at" => date("Y-m-d", $n->created).'T'.date("G:i:s.000",$n->created)."Z",
            "updated_at" => date("Y-m-d", $n->changed).'T'.date("G:i:s.000",$n->changed)."Z",
            "changed_at" => date("Y-m-d", $n->changed).'T'.date("G:i:s.000",$n->changed)."Z"
        );
    }
    else{
        if (in_array('id', $cols)){
            $ret['id'] = (int) $n->nid;
        }
        if (in_array('title', $cols)){
            $ret['title'] = $n->title;
        }
        if (in_array('summary', $cols)){
            $ret['summary'] = htmlspecialchars($n->field_description['und'][0]['value']);
        }
        if (in_array('language', $cols)){
            $ret['language'] =$n->field_language['und'][0]['value'];
        }
        if (in_array('html', $cols)){
            $ret['html'] = htmlspecialchars($n->body['und'][0]['value']);
        }
        if (in_array('contact_center_only', $cols)){
            $ret['contact_center_only'] = htmlspecialchars($n->field_contact_center_info['und'][0]['value']);
        }
        if (in_array('status', $cols)){
            $ret['status'] = ($n->status ? "Published" : "Draft");
        }
        if (in_array('location', $cols)){
            $ret['location'] = $location;
        }
        if (in_array('for_use_by', $cols)){
            $ret['for_use_by'] = $useby;
        }
        if (in_array('tags', $cols)){
            $ret['tags'] = $tags;
        }
        if (in_array('topics', $cols)){
            $ret['topics'] = $topics;
        }
        if (in_array('created_at', $cols)){
            $ret['created_at'] = date("Y-m-d", $n->created).'T'.date("G:i:s.000",$n->created)."Z";
        }
        if (in_array('updated_at', $cols)){
            $ret['updated_at'] = date("Y-m-d", $n->changed).'T'.date("G:i:s.000",$n->changed)."Z";
        }
        if (in_array('changed_at', $cols)){
            $ret['changed_at'] = date("Y-m-d", $n->changed).'T'.date("G:i:s.000",$n->changed)."Z";
        }
    }

    return $ret;
}

function _internalLink_fixer($html){

    $doc = new DOMDocument();
    $doc->loadHTML($html);
    $xpath = new DOMXPath($doc);
    $nodeList = $xpath->query('//a/@href');

    $itHas = false;
    for ($i = 0; $i < $nodeList->length; $i++) {

        if (substr($nodeList->item($i)->value, 0, 1) == '/'){
            $itHas = true;
            $urls[] = $nodeList->item($i)->value;
        }
    }

    if ($itHas){
        foreach($urls as $url){
            $html = str_replace($url, 'https://usa.gov'.$url, $html);
        }
    }
    return $html;
}

function _sanitzie_path($str) {

    $table = array(
        ' '=>'-', 'Š'=>'S', 'š'=>'s', 'Ð'=>'Dj', 'Ž'=>'Z', 'ž'=>'z', 'C'=>'C', 'c'=>'c', 'C'=>'C', 'c'=>'c',
        'À'=>'A', 'Á'=>'A', 'Â'=>'A', 'Ã'=>'A', 'Ä'=>'A', 'Å'=>'A', 'Æ'=>'A', 'Ç'=>'C', 'È'=>'E', 'É'=>'E',
        'Ê'=>'E', 'Ë'=>'E', 'Ì'=>'I', 'Í'=>'I', 'Î'=>'I', 'Ï'=>'I', 'Ñ'=>'N', 'Ò'=>'O', 'Ó'=>'O', 'Ô'=>'O',
        'Õ'=>'O', 'Ö'=>'O', 'Ø'=>'O', 'Ù'=>'U', 'Ú'=>'U', 'Û'=>'U', 'Ü'=>'U', 'Ý'=>'Y', 'Þ'=>'B', 'ß'=>'Ss',
        'à'=>'a', 'á'=>'a', 'â'=>'a', 'ã'=>'a', 'ä'=>'a', 'å'=>'a', 'æ'=>'a', 'ç'=>'c', 'è'=>'e', 'é'=>'e',
        'ê'=>'e', 'ë'=>'e', 'ì'=>'i', 'í'=>'i', 'î'=>'i', 'ï'=>'i', 'ð'=>'o', 'ñ'=>'n', 'ò'=>'o', 'ó'=>'o',
        'ô'=>'o', 'õ'=>'o', 'ö'=>'o', 'ø'=>'o', 'ù'=>'u', 'ú'=>'u', 'û'=>'u', 'ý'=>'y', 'ý'=>'y', 'þ'=>'b',
        'ÿ'=>'y', 'R'=>'R', 'r'=>'r', "'"=>'-', '"'=>'-', '.'=>'-', ','=>'-', '('=>'-', ')'=>'-', '–'=>'-'
    );

    $sanitized = strtr($str, $table);
    $sanitized = preg_replace('/-{2,}/','-',$sanitized);
    return $sanitized;
}
function directory_pages_acronymToStateName($acronym, $whatToRetOnFail = false) {

    $acronym = strtolower($acronym);

    $state_list = _state_list();

    if ( empty($state_list[$acronym]) ) {
        if ( in_array($acronym, $state_list) ) {
            return $acronym;
        } else {
            return $whatToRetOnFail;
        }
    } else {
        return $state_list[$acronym];
    }
}
function _state_list(){
    $state_list = array('um'=>'minor outlying islands','mh'=>'republic of the marshall islands','pw'=>'republic of palau','fm'=>'federated states of micronesia','gu'=>'guam','as'=>'american samoa','al'=>"alabama",'ak'=>"alaska",'az'=>"arizona",'ar'=>"arkansas",'ca'=>"california",'co'=>"colorado",'ct'=>"connecticut",'de'=>"delaware",'dc'=>"district of columbia",'fl'=>"florida",'ga'=>"georgia",'hi'=>"hawaii",'id'=>"idaho",'il'=>"illinois",'in'=>"indiana",'ia'=>"iowa",'ks'=>"kansas",'ky'=>"kentucky",'la'=>"louisiana",'me'=>"maine",'md'=>"maryland",'ma'=>"massachusetts",'mi'=>"michigan",'mn'=>"minnesota",'ms'=>"mississippi",'mo'=>"missouri",'mt'=>"montana",'ne'=>"nebraska",'nv'=>"nevada",'nh'=>"new hampshire",'nj'=>"new jersey",'nm'=>"new mexico",'ny'=>"new york",'nc'=>"north carolina",'nd'=>"north dakota",'oh'=>"ohio",'ok'=>"oklahoma",'or'=>"oregon",'pa'=>"pennsylvania",'ri'=>"rhode island",'sc'=>"south carolina",'sd'=>"south dakota",'tn'=>"tennessee",'tx'=>"texas",'ut'=>"utah",'vt'=>"vermont",'va'=>"virginia",'wa'=>"washington",'wv'=>"west virginia",'wi'=>"wisconsin",'wy'=>"wyoming", 'as' => 'american samoa', 'vi' => 'u.s. virgin islands', 'mp' => 'northern mariana islands', 'pr' => 'puerto rico', 'gu' => 'guam');
    $stateQuery = "SELECT distinct ca.field_state_acronym_value as abbr,
                          cn.field_state_canonical_name_value as canonical
                        FROM node n
                        INNER JOIN field_data_field_state_canonical_name cn ON n.nid = cn.entity_id
                        INNER JOIN field_data_field_state_acronym ca ON n.nid = ca.entity_id
    					WHERE n.status = 1";
    $stateAggs = db_query($stateQuery);

    foreach($stateAggs as $item){
        $state_list[$item->abbr]=$item->canonical;
    }

    return $state_list;
}
function cmp_api_services_resources()
{
    $api = array(
        'narratives' => array(
            'operations' => array(
                'retrieve' => array(
                    'help' => 'All text assets will be served via this api call.',
                    'callback' => '_cmp_api_get_narratives',
                    'access callback' => '_cmp_api_perm',
                    'access arguments' => array('access content'),
                    'access arguments append' => FALSE,
                    'args' => array(
                        array(
                            'name' => 'fn',
                            'type' => 'string',
                            'description' => 'asset id',
                            'source' => array('path' => '0'),
                            'optional' => TRUE,
                            'default' => '0',
                        ),
                    ),
                ),
            ),
        ),
    );
    return $api;
}

function _cmp_api_get_narratives($fn='all') {
    $ret = array();
    $res = db_query("SELECT * FROM node WHERE type = 'text_content_type' LIMIT 30" );
    foreach($res as $r) {
        $n = node_load($r->nid);
        $ret[] = array("id"=>$n->nid,
            "title"=>$n->title);
    }
    return $ret;
}

function _cmp_api_perm(){
    return TRUE;
}

function cmp_api_taxonomy_term_delete( $term )
{
    db_query(
        "REPLACE INTO {cmp_api_deleted_entities} (uuid,entity_id,vid,name,entity_type,changed)
         VALUES (:uuid,:tid,:vid,:name,:entity_type,UNIX_TIMESTAMP(NOW()))",
        array(
            ':uuid'  => $term->uuid,
            ':tid'   => $term->tid,
            ':vid'   => $term->vid,
            ':name'  => substr($term->name,0,255),
            ':entity_type' =>'term'
        )
    );
}
function cmp_api_node_delete( $node )
{
    db_query(
        "REPLACE INTO {cmp_api_deleted_entities} (uuid,entity_id,vid,name,entity_type,changed)
         VALUES (:uuid,:nid,:vid,:name,:entity_type,UNIX_TIMESTAMP(NOW()))",
        array(
            ':uuid'  => $node->uuid,
            ':nid'   => $node->nid,
            ':vid'   => 0,
            ':name'  => substr($node->name,0,255),
            ':entity_type' =>'node'
        )
    );
}