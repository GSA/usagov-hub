<?php
/* NOTE: INSTALL TAXONOMY_CHANGED MODULE AND REMOVE _cdss_setup_term_changed_timestamp LOGIC */



function _cdss_setup()
{
    _cdss_setup_elasticsearch();
    _cdss_setup_drupal();
}

function _cdss_setup_elasticsearch()
{
    _cdss_setup_schema_index();
    _cdss_setup_content_index();
}

function _getExportTaxonomyStructureCode() {

    $selected_bundles = array();
    foreach ( _bundle_copy_bundle_info('taxonomy_term', TRUE) as $machineName => $label ) {
        $selected_bundles[$machineName] = $machineName;
    }

    $instances = array();
    foreach ($selected_bundles as $key => $bundle) {
        if ($key === $bundle) {
          $instances += field_info_instances('taxonomy_term', $bundle);
        }
    }
    ksort($instances);

    $selectedFields = array();
    foreach ( $instances as $machineName => $fieldInfo ) {
        $selectedFields[$machineName] = $machineName;
    }

    $fieldGroupIds = array();
    $fieldGroupData = array();
    $all_groups = function_exists('field_group_info_groups') ? field_group_info_groups() : array();
    if ( !empty($all_groups) && !empty($all_groups['taxonomy_term']) ) {
        foreach ($all_groups['taxonomy_term'] as $vocabName => $formData) {
            foreach ($formData['form'] as $groupName => $data) {
                $fieldGroupIds[$data->id] = $data->id;
                $fieldGroupData[$data->id] = $data;
            }
        }
    }

    $selected_data = array(
        1 => array(
            'bundles' => $selected_bundles
        ),
        2 => array(
            'fields' => $selectedFields,
            'fieldgroups' => $fieldGroupIds,
            'fieldgroups-full' => $fieldGroupData,
        ),
    );

    return _bundle_copy_export_data('taxonomy_term', $selected_data);
}

function _getExportNodeStructureCode() {

    $selected_bundles = variable_get('udm_conttypes', array());

    $instances = array();
    foreach ($selected_bundles as $key => $bundle) {
        if ($key === $bundle) {
          $instances += field_info_instances('node', $bundle);
        }
    }
    ksort($instances);

    $selectedFields = array();
    foreach ( $instances as $machineName => $fieldInfo ) {
        $selectedFields[$machineName] = $machineName;
    }

    $selected_data = array(
        1 => array(
            'bundles' => $selected_bundles
        ),
        2 => array(
            'fields' => $selectedFields
        ),
    );

    return _bundle_copy_export_data('node', $selected_data);
}

function _cdss_setup_schema_index()
{

    //create schema index
    try{
        $data = '{
            "settings" : {
                "index" : {
                    "number_of_shards" : 1,
                    "number_of_replicas" : 0
                }
            }
        }';

        $options = array(
                        'method' => 'PUT',
                        'data' => $data,
                );

        $result = drupal_http_request('http://elasticsearch_server:9200/cmp-data-schema/', $options);
        return $result;
    } catch(Exception $exception){
        dsm($exception);
        return false;
    }
}

function _cdss_schema_to_elasticsearch()
{
    //add schema data
    try{

        $schema_taxonomy = _getExportTaxonomyStructureCode();
        $schema_taxonomy_sha1 = sha1($schema_taxonomy);
        $schema_node = _getExportNodeStructureCode();
        $schema_node_sha1 = sha1($schema_node);


        $arr = array('taxonomy_sha1' => $schema_taxonomy_sha1, 'taxonomy' => $schema_taxonomy, 'node_sha1' =>$schema_node_sha1, 'nodes' => $schema_node);

        $json_object = json_encode($arr);


        $options = array(
                        'method' => 'POST',
                        'data' => $json_object,
                );

        $result = drupal_http_request('http://elasticsearch_server:9200/cmp-data-schema/schema/', $options);
        return $result;
    } catch(Exception $exception){
        dsm($exception);
        return false;
   }
}

function _cdss_setup_content_index()
{

            try{
                $data = '{
                    "settings" : {
                        "index" : {
                            "number_of_shards" : 1,
                            "number_of_replicas" : 0
                        }
                    },
                    "mappings": {
                       "entities": {
                         "properties": {
                           "changed": {
                             "type": "integer"
                           }
                         }
                       }
                     }
                }';

                    $options = array(
                                    'method' => 'PUT',
                                    'data' => $data,
                            );

                $result = drupal_http_request('http://elasticsearch_server:9200/cmp-data-entities/', $options);
                return $result;
            } catch(Exception $exception){
                dsm($exception);
                return false;
            }
}

function _cdss_setup_drupal()
{
    _cdss_setup_queue();
    _cdss_setup_term_changed_timestamp();
}

function _cdss_setup_queue()
{
  $queue = DrupalQueue::get('cmp_data_sync');
  $queue->createQueue();
}

function _cdss_add_entity_to_queue($e_id, $e_type)
{
  // - unique upon entity_ids
  $queue = DrupalQueue::get('cmp_data_sync');
  $q_item = array(
    'entity_id'   => $e_id,
    'entity_type' => $e_type
  );
  $queue->createItem($q_item);
}

function _cdss_process_queue_entity()
{
  $queue = DrupalQueue::get('cmp_data_sync');

  $lease_time=10;
  $q_item = $queue->claimItem($lease_time);
  if ( empty(!$q_item) )
  {
      $success = _cdss_send_to_elasticsearch( $q_item->data, $timeout=10 );
      if ( $success===true )
      {
        $queue->deleteItem($q_item);
      } else {
        $queue->releaseItem($q_item);
      }
  }
}

function _cdss_process_queue()
{
  $max_time   = 30; // should determine this number dynamically
  $start_time = time();
  $loop_time  = $start_time;
  $time_spent = $start_time-$loop_time;
  $loops      = 0;
  $avg_time   = 0;
  while ( ($time_spent+$avg_time) < $max_time )
  {
    $queue = DrupalQueue::get('cmp_data_sync');
    $result = _cdss_process_queue_entity($queue);
    if ( $result==='no-more-queued-items' )
    {
        break;
    }
    $loops++;
    $loop_time  = time();
    $time_spent = $start_time-$loop_time;
    $avg_time   = $time_spent/$loops;
  }
}

function _cdss_send_to_elasticsearch($e_id, $e_type)
{
    if($e_type === 'node'){
        $entity = node_load($e_id);
    } elseif($e_type === 'term') {
        $entity = taxonomy_term_load($entity);
    }

    if(!empty($entity)){

        try{

            $jentity = json_encode($entity);
            //dsm($jentity);

            $options = array(
                            'method' => 'PUT',
                            'data' => $jentity,
                    );

            $result = drupal_http_request('http://10.0.2.2:9200/cmp-data-entities2/entities/'. $e_type . '_' . $e_id, $options);
            dsm($result);

        } catch(Exception $exception){
            dsm($exception);
        }

    }
}

function _cdss_setup_term_changed_timestamp()
{
    if (!field_info_field('changed')) {
        $field = array(
          'field_name' => 'changed',
          'cardinality' => 1,
          'type' => 'text',
        );
        field_create_field($field);


        $instance = array( 'field_name' => $field['field_name'],
                'entity_type' => 'taxonomy_term',
                'bundle' => 'site_strucutre_taxonomy',
                'label' => 'Changed Time',
                'description' => '',
                'required' => FALSE,
        );
        field_create_instance($instance);
    }
}

/*
 * Implements HOOK_menu()
 */
function cmp_data_sync_server_menu() {

    $items = array();

    // Configuration page
    $items['admin/content/cmp-data-sync-server'] = array(
        'title' => 'CMP Data Sync To ElasticSearch',
        'description' => 'Testing',
        'page callback' => 'cmp_data_sync_server_test',
        'access callback' => true,
        'type' => MENU_CALLBACK,
    );

    return $items;
}

function cmp_data_sync_server_test(){
    $p = drupal_get_query_parameters();
    if ( !empty($p['function']) && function_exists('_cdss_'.$p['function']) )
    {
        $_p = $p;
        unset($_p['function']);
        dsm([$p['function'],call_user_func_array( '_cdss_'.$p['function'] , array_keys($_p) )]);
    }
    return 'test';
}
