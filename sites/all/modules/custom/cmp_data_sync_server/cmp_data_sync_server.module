<?php
/* NOTE: INSTALL TAXONOMY_CHANGED MODULE AND REMOVE _cdss_setup_term_changed_timestamp LOGIC */

function cmp_data_sync_server_menu()
{
    $items = array();
    // Configuration page
    $items['admin/content/cmp-data-sync-server'] = array(
        'title'           => 'CMP Data Sync To ElasticSearch',
        'description'     => 'Testing',
        'page callback'   => 'cmp_data_sync_server_test',
        'access callback' => true,
        'type'            => MENU_CALLBACK,
    );
    return $items;
}

function cmp_data_sync_server_test()
{
    $p = drupal_get_query_parameters();
    if ( !empty($p['function']) && function_exists('_cdss_'.$p['function']) )
    {
        $_p = $p;
        unset($_p['function']);
        dsm([$p['function'],call_user_func_array( '_cdss_'.$p['function'] , array_keys($_p) )]);
    }
    return 'test';
}

function cmp_data_sync_server_cron()
{
    _cdss_process_queue();
}


/// private setup functions

function _cdss_setup_elasticsearch()
{
    $schema_success = _cdss_setup_schema_index();
    $content_success = _cdss_setup_content_index();
    return $schema_success && $content_success;
}
function _cdss_teardown_elasticsearch()
{
    $schema_success = _cdss_teardown_schema_index();
    $content_success = _cdss_teardown_content_index();
    return $schema_success && $content_success;
}

function _cdss_setup_schema_index()
{
    try{
        $response = drupal_http_request('http://elasticsearch_server:9200/cmp-data-schema', array('method'=>'HEAD') );
        if ( $response->code === '200' ) { return true; }

        $data = '{
            "settings" : {
                "index" : {
                    "number_of_shards" : 1,
                    "number_of_replicas" : 0
                }
            }
        }';
        $options = array(
            'method' => 'PUT',
            'data' => $data,
        );
        $response = drupal_http_request('http://elasticsearch_server:9200/cmp-data-schema', $options);
        if ( $response->code === '400' || $response->code === '200' )
        {
            return true;
        } else {
            return false;
        }
    } catch(Exception $exception){
        dsm($exception);
        return false;
    }
}
function _cdss_teardown_schema_index()
{
    try{
        $response = drupal_http_request('http://elasticsearch_server:9200/cmp-data-schema', array('method'=>'HEAD') );
        if ( $response->code === '404' ) { return true; }

        $options = array(
            'method' => 'DELETE'
        );
        $response = drupal_http_request('http://elasticsearch_server:9200/cmp-data-schema', $options);
        if ( $response->code === '200' )
        {
            return true;
        } else {
            return false;
        }
    } catch(Exception $exception){
        dsm($exception);
        return false;
    }
}

function _cdss_setup_content_index()
{
    try{
        $response = drupal_http_request('http://elasticsearch_server:9200/cmp-data-entities', array('method'=>'HEAD') );
        if ( $response->code === '200' ) { return true; }

        $data = '{
            "settings" : {
                "index" : {
                    "number_of_shards" : 1,
                    "number_of_replicas" : 0
                }
            },
            "mappings": {
                "entities": {
                    "properties": {
                        "changed": {
                            "type": "integer"
                        }
                    }
                }
            }
        }';
        $options = array(
            'method' => 'PUT',
            'data'   => $data,
        );
        $response = drupal_http_request('http://elasticsearch_server:9200/cmp-data-entities', $options);
        if ( $response->code === '400' || $response->code === '200' )
        {
            return true;
        } else {
            return false;
        }
    } catch(Exception $exception){
        dsm($exception);
        return false;
    }
}
function _cdss_teardown_content_index()
{
    try{
        $response = drupal_http_request('http://elasticsearch_server:9200/cmp-data-entities', array('method'=>'HEAD') );
        if ( $response->code === '404' ) { return true; }

        $options = array(
            'method' => 'DELETE'
        );
        $response = drupal_http_request('http://elasticsearch_server:9200/cmp-data-entities', $options);
        if ( $response->code === '200' )
        {
            return true;
        } else {
            return false;
        }
    } catch(Exception $exception){
        dsm($exception);
        return false;
    }
}

function _cdss_setup_drupal()
{
    _cdss_setup_drupal_queue();
    _cdss_setup_drupal_vars();
}
function _cdss_teardown_drupal()
{
    _cdss_teardown_drupal_queue();
    _cdss_teardown_drupal_vars();
}
function _cdss_setup_drupal_queue()
{
    $queue = DrupalQueue::get('cmp_data_sync');
    $queue->createQueue();
}
function _cdss_teardown_drupal_queue()
{
    $queue = DrupalQueue::get('cmp_data_sync');
    $queue->deleteQueue();
}
function _cdss_setup_drupal_vars()
{
    /// check this logic: don't want to clobber with empty values if already exists

    variable_set('cdss_node_bundles',array());
    variable_set('cdss_term_bundles',array());
}
function _cdss_teardown_drupal_vars()
{
    variable_del('cdss_node_bundles');
    variable_del('cdss_term_bundles');
}

/// private action functions

function _cdss_send_schema_to_elasticsearch()
{
    try{
        $schema_node          = _getExportNodeStructureCode();
        dsm($schema_node);
        $schema_taxonomy      = _getExportTaxonomyStructureCode();
        $schema_node_sha1     = sha1($schema_node);
        $schema_taxonomy_sha1 = sha1($schema_taxonomy);
        $data = array(
            'taxonomy_sha1' => $schema_taxonomy_sha1,
            'taxonomy'      => $schema_taxonomy,
            'node_sha1'     => $schema_node_sha1,
            'nodes'         => $schema_node
        );
        $response = drupal_http_request(
            'http://elasticsearch_server:9200/cmp-data-schema/schema/node_taxonomy',
            array(
                'method' => 'PUT',
                'data'   => json_encode($data),
            )
        );
        if ( $response->code === '200' || $response->code === '201' )
        {
            return true;
        } else {
            return false;
        }
    } catch(Exception $exception){
        dsm($exception);
        return false;
    }
}

function _cdss_add_entity_to_queue($e_id, $e_type)
{
    /// an entity_id should only be in the Q once,
    /// any new entries for an entity should replace older one
    $queue = DrupalQueue::get('cmp_data_sync');
    $queue->createItem(array(
        'entity_id'   => $e_id,
        'entity_type' => $e_type
    ));
}

function _cdss_add_all_nodes_to_queue()
{
    $selected_bundles = variable_get('cdss_node_bundles', array());
    // SELECT nid FROM nodes WHERE type in ( selected_bundles )
    // steal query for figuring out which nodes are elligable from old module
}

function _cdss_add_all_terms_to_queue()
{
    $selected_bundles = variable_get('cdss_term_bundles', array());
    // SELECT tid FROM taxonomy_term_data WHERE vid in ( selected_bundles ) just 42 ?
    // will we ever care about asset_topic or any other vocabularies ?
}


function _cdss_process_queue()
{
    $queue = DrupalQueue::get('cmp_data_sync');

    // $max_time   = intval(ini_get("max_execution_time"))*.9;
    // $start_time = time();
    // $loop_time  = $start_time;
    // $time_spent = $start_time-$loop_time;
    // $loops      = 0;
    // $avg_time   = 0;

    // while ( ($time_spent+$avg_time) < $max_time )
    // {
    //     $result = _cdss_process_queue_item($queue);
    //     if ( $result===null )
    //     {
    //         break; // no more queue items - we got them all
    //     }
    //     $loops++;
    //     $loop_time  = time();
    //     $time_spent = $start_time-$loop_time;
    //     $avg_time   = $time_spent/$loops;
    // }

    while( $queue->numberOfItems() > 0 )
    {
        _cdss_process_queue_item($queue);
    }
}

function _cdss_process_queue_item($queue)
{
    $lease_time = 10;

    $q_item = $queue->claimItem($lease_time);
    if ( empty($q_item) )
    {
        return null;
    }
    $success = _cdss_send_entity_to_elasticsearch(
        $q_item->data['entity_id'],
        $q_item->data['entity_type'],
        $lease_time
    );
    if ( $success===null )
    {
        /// fatal error : couldn't find node
        /// we can't possibly process this
        /// just remove it
        $queue->deleteItem($q_item);
    } else if ( $success===true ) {
        $queue->deleteItem($q_item);
    } else {
        /// success===false means there was a non-fatal problem
        /// talking to elasticsearch
        /// we can put this back and try again later
        $queue->releaseItem($q_item);
    }
    return $success;
}

function _cdss_send_entity_to_elasticsearch($e_id, $e_type, $lease_time=10)
{
    if ( $e_type === 'node' ) {
        $entity = _cdss_load_sanitized_node($e_id);
    } elseif ( $e_type === 'taxonomy_term' ) {
        $entity = _cdss_load_sanitized_term($e_id);
    } else {
        return null;
    }
    if(empty($entity))
    {
        return null;
    }
    try{
        /// put with an explicit ID will act as an upsert
        $response = drupal_http_request(
            'http://elasticsearch_server:9200/cmp-data-entities/entity/'.$e_type.'_'.$e_id,
            array(
                'method'  => 'PUT',
                'data'    => json_encode($entity),
                'timeout' => $lease_time
            )
        );
        /// there are probably some response codes
        /// that should really be fatal and return NULL
        /// for now we are assuming anything but 200/201
        /// means a temporary problem and we will return FALSE
        if ( $response->code === '201' || $response->code === '200' )
        {
            return true;
        } else {
            return false;
        }
    } catch(Exception $exception){
        dsm($exception);
        return false;
    }
}

function _cdss_load_sanitized_node($e_id)
{
    $node = node_load($e_id);
    if(empty($node))
    {
        return $node;
    }

    $node->uid = 1;
    unset($node->workbench_moderation);
    unset($node->revision_timestamp);
    unset($node->revision_uid);
    unset($node->vid);
    unset($node->path);
    unset($node->picture);
    $node->field_owner = array();
    unset($node->cid);
    unset($node->last_comment_timestamp);
    unset($node->last_comment_name);
    unset($node->last_comment_uid);
    unset($node->comment_count);

    return $node;
}
function _cdss_load_sanitized_term($e_id)
{
    $term = taxonomy_term_load($e_id);
    if(empty($term))
    {
        return $term;
    }

    $parent = db_query(
        'SELECT parent FROM {taxonomy_term_hierarchy} where tid=:tid',
        array(':tid'=>$e_id)
    )->fetchField();
    if ( !empty($parent) && $parent!=='0' && $parent!==0 )
    {
        $term->parent = $parent;
    }
    return $term;
}

function _getExportTaxonomyStructureCode()
{
    $selected_bundles = variable_get('cdss_term_bundles', array());
    $selected_bundles = array();
    foreach ( _bundle_copy_bundle_info('taxonomy_term', TRUE) as $machineName => $label ) {
        $selected_bundles[$machineName] = $machineName;
    }

    $instances = array();
    foreach ($selected_bundles as $key => $bundle) {
        if ($key === $bundle) {
            $instances += field_info_instances('taxonomy_term', $bundle);
        }
    }
    ksort($instances);

    $selectedFields = array();
    foreach ( $instances as $machineName => $fieldInfo ) {
        $selectedFields[$machineName] = $machineName;
    }

    $fieldGroupIds = array();
    $fieldGroupData = array();
    $all_groups = function_exists('field_group_info_groups') ? field_group_info_groups() : array();
    if ( !empty($all_groups) && !empty($all_groups['taxonomy_term']) ) {
        foreach ($all_groups['taxonomy_term'] as $vocabName => $formData) {
            foreach ($formData['form'] as $groupName => $data) {
                $fieldGroupIds[$data->id] = $data->id;
                $fieldGroupData[$data->id] = $data;
            }
        }
    }

    $selected_data = array(
        1 => array(
            'bundles' => $selected_bundles
        ),
        2 => array(
            'fields' => $selectedFields,
            'fieldgroups' => $fieldGroupIds,
            'fieldgroups-full' => $fieldGroupData,
        ),
    );

    return _bundle_copy_export_data('taxonomy_term', $selected_data);
}

function _getExportNodeStructureCode()
{

        $selected_bundles = variable_get('cdss_node_bundles', array());

        $instances = array();
        foreach ($selected_bundles as $key => $bundle) {
            if ($key === $bundle) {
              $instances += field_info_instances('node', $bundle);
            }
        }
        ksort($instances);

        $selectedFields = array();
        foreach ( $instances as $machineName => $fieldInfo ) {
            $selectedFields[$machineName] = $machineName;
        }

        $selected_data = array(
            1 => array(
                'bundles' => $selected_bundles
            ),
            2 => array(
                'fields' => $selectedFields
            ),
        );


        return _bundle_copy_export_data('node', $selected_data);
}
