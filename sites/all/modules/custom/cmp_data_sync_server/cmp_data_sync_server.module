<?php

$GLOBALS['cdss_queued_entities'] = array();

define('CDSS_SUCCESS',   TRUE  );
define('CDSS_TRY_AGAIN', FALSE );
define('CDSS_FATAL',     NULL  );

function cmp_data_sync_server_menu()
{
    $items = array();
    // Configuration page
    $items['admin/config/cmp-data-sync-server'] = array(
        'title'           => 'CMP Data Sync To ElasticSearch',
        'description'     => 'Settings',
        'page callback'   => 'drupal_get_form',
        'page arguments'  => array('cmp_data_sync_server_config_form'),
        'access callback' => true,
        'type'            => MENU_CALLBACK,
        'file'            => 'cmp_data_sync_server.admin.inc'
    );
    $items['admin/config/cmp-data-sync-server/process_queue'] = array(
        'title'           => 'Process Queue',
        'description'     => 'Process Queue',
        'page callback'   => '_cdss_ajax_process_queue',
        'access callback' => true,
        'type'            => MENU_CALLBACK,
        'file'            => 'cmp_data_sync_server.admin.inc'
    );
    $items['admin/config/cmp-data-sync-server/add_all_to_queue'] = array(
        'title'           => 'Add all to Queue',
        'description'     => 'Add all to Queue',
        'page callback'   => '_cdss_ajax_add_all_to_queue',
        'access callback' => true,
        'type'            => MENU_CALLBACK,
        'file'            => 'cmp_data_sync_server.admin.inc'
    );
    $items['admin/content/cmp-data-sync-server'] = array(
        'title'           => 'CMP Data Sync To ElasticSearch',
        'description'     => 'Testing',
        'page callback'   => 'cmp_data_sync_server_test',
        'access callback' => true,
        'type'            => MENU_CALLBACK,
    );
    return $items;
}
function cmp_data_sync_server_test()
{
    $p = drupal_get_query_parameters();
    if ( !empty($p['function']) && function_exists('_cdss_'.$p['function']) )
    {
        $_p = $p;
        unset($_p['function']);
        dsm([$p['function'],call_user_func_array( '_cdss_'.$p['function'] , array_keys($_p) )]);
    }
    return 'test';
}

// function cmp_data_sync_server_cron()
// {
// }
function cmp_data_sync_server_cron_queue_info()
{
    /// will pull items off the queue while cron is running
    $queues = array();
    $queues['cmp_data_sync'] = array(
      'worker callback' => '_cdss_process_queue_item',
      'time'            => 30
    );
    return $queues;
}
function cmp_data_sync_server_entity_insert($entity, $type)
{
    if($type === 'node')
    {
        if($entity->status === 1)
        {
            if ( empty($GLOBALS['cdss_queued_entities'][$type.$entity->nid]) )
            {
                _cdss_add_entity_to_queue($entity->nid, $type);
                $GLOBALS['cdss_queued_entities'][$type.$entity->nid] = true;
            }
        }
    }
    if($type === 'taxonomy_term')
    {
        if ( empty($GLOBALS['cdss_queued_entities'][$type.$entity->tid]) )
        {
            _cdss_add_entity_to_queue($entity->tid, $type);
            $GLOBALS['cdss_queued_entities'][$type.$entity->tid] = true;
        }
    }
}
function cmp_data_sync_server_entity_update($entity, $type)
{
    if($type === 'node')
    {
        if($entity->status === 1)
        {
            if ( empty($GLOBALS['cdss_queued_entities'][$type.$entity->nid]) )
            {
                _cdss_add_entity_to_queue($entity->nid, $type);
                $GLOBALS['cdss_queued_entities'][$type.$entity->nid] = true;
            }
        }
    }
    if($type === 'taxonomy_term')
    {
        if ( empty($GLOBALS['cdss_queued_entities'][$type.$entity->tid]) )
        {
            _cdss_add_entity_to_queue($entity->tid, $type);
            $GLOBALS['cdss_queued_entities'][$type.$entity->tid] = true;
        }
    }
}

/// deletion logic
function cmp_data_sync_server_taxonomy_term_delete($term)
{
    db_query(
        "REPLACE INTO {cdss_deleted_terms} (tid,vid,title) VALUES (:tid,:vid,:title)",
        array(
            ':tid'=>$term->tid,
            ':vid'=>$term->vid,
            ':title'=>$term->title
        )
    );
    _cdss_add_entity_to_queue($term->tid, 'deleted_term');
}

/// private setup functions

function _cdss_setup_elasticsearch()
{
    $schema_success  = _cdss_setup_schema_index();
    $content_success = _cdss_setup_content_index();
    $status_success  = _cdss_setup_status_index();
    return $schema_success && $content_success && $status_success;
}
function _cdss_teardown_elasticsearch()
{
    $schema_success  = _cdss_teardown_schema_index();
    $content_success = _cdss_teardown_content_index();
    $status_success  = _cdss_teardown_status_index();
    return $schema_success && $content_success && $status_success;
}
function _cdss_setup_schema_index()
{
    $elasticsearch_server = variable_get('cdss_elasticsearch_server');
    try{
        $response = drupal_http_request($elasticsearch_server.'/cmp-data-schema', array('method'=>'HEAD') );
        if ( $response->code !== '200' )
        {
            $data = '{
                "settings" : {
                    "index" : {
                        "number_of_shards" : 1,
                        "number_of_replicas" : 0
                    }
                }
            }';
            $options = array(
                'method' => 'PUT',
                'data' => $data,
            );
            $response = drupal_http_request($elasticsearch_server.'/cmp-data-schema', $options);
            if (  $response->code === '200' )
            {
                _cdss_log('Info: CDSS '.__FUNCTION__.' Created ElasticSearch Index for CMP Schema : response='.$response->data);
            } else if ( !($response->code === '400' || $response->code === '200') ) {
                _cdss_log('Fail: CDSS '.__FUNCTION__.' Failed to Created ElasticSearch Index for CMP Schema : response='.$response->data);
                return false;
            }
        }
        $response = drupal_http_request($elasticsearch_server.'/cmp-data-schema/schema/node_term', array('method'=>'HEAD') );
        if ( $response->code === '200' )
        {
            return true;
        } else {
            return _cdss_send_schema_to_elasticsearch();
        }
    } catch(Exception $e){
        _cdss_log('Fail: CDSS '.__FUNCTION__.' Exception : '.$e->getMessage() .' : '. $e->getTraceAsString());
        return false;
    }
}
function _cdss_teardown_schema_index()
{
    $elasticsearch_server = variable_get('cdss_elasticsearch_server');
    try{
        $response = drupal_http_request($elasticsearch_server.'/cmp-data-schema', array('method'=>'HEAD') );
        if ( $response->code === '404' ) { return true; }

        $options = array(
            'method' => 'DELETE'
        );
        $response = drupal_http_request($elasticsearch_server.'/cmp-data-schema', $options);
        if ( $response->code === '200' )
        {
            _cdss_log('Info: CDSS '.__FUNCTION__.' Deleted ElasticSearch Index for CMP Schema : response='.$response->data);
            return true;
        } else {
            return false;
        }
    } catch(Exception $e){
        _cdss_log('Fail: CDSS '.__FUNCTION__.' Exception : '.$e->getMessage() .' : '. $e->getTraceAsString() );
        return false;
    }
}
function _cdss_setup_content_index()
{
    $elasticsearch_server = variable_get('cdss_elasticsearch_server');
    try{
        $response = drupal_http_request($elasticsearch_server.'/cmp-data-entities', array('method'=>'HEAD') );
        if ( $response->code === '200' ) { return true; }

        $data = '{
            "settings" : {
                "index" : {
                    "number_of_shards" : 1,
                    "number_of_replicas" : 0
                }
            },
            "mappings": {
                "entity": {
                    "properties": {
                        "changed": {
                            "type": "integer"
                        }
                    }
                }
            }
        }';
        $options = array(
            'method' => 'PUT',
            'data'   => $data,
        );
        $response = drupal_http_request($elasticsearch_server.'/cmp-data-entities', $options);
        if (  $response->code === '200' )
        {
            _cdss_log('Info: Created ElasticSearch Index for CMP Content : response='.$response->data);
            return true;
        } else if ( !($response->code === '400' || $response->code === '200') ) {
            _cdss_log('Fail: CDSS '.__FUNCTION__.' Failed to Created ElasticSearch Index for CMP Content : response='.$response->data);
            return false;
        }
    } catch(Exception $e){
        _cdss_log('Fail: CDSS '.__FUNCTION__.' Exception : '.$e->getMessage() .' : '. $e->getTraceAsString());
        return false;
    }
}
function _cdss_teardown_content_index()
{
    $elasticsearch_server = variable_get('cdss_elasticsearch_server');
    try{
        $response = drupal_http_request($elasticsearch_server.'/cmp-data-entities', array('method'=>'HEAD') );
        if ( $response->code === '404' ) { return true; }

        $options = array(
            'method' => 'DELETE'
        );
        $response = drupal_http_request($elasticsearch_server.'/cmp-data-entities', $options);
        if ( $response->code === '200' )
        {
            _cdss_log('Info: CDSS '.__FUNCTION__.' Deleted ElasticSearch Index for CMP Content : response='.$response->data);
            return true;
        } else {
            return false;
        }
    } catch(Exception $e){
        _cdss_log('Fail: CDSS '.__FUNCTION__.' Exception : '.$e->getMessage() .' : '. $e->getTraceAsString());
        return false;
    }
}
function _cdss_setup_status_index()
{
    $elasticsearch_server = variable_get('cdss_elasticsearch_server');
    try{
        $response = drupal_http_request($elasticsearch_server.'/cmp-data-status', array('method'=>'HEAD') );
        if ( $response->code === '200' ) { return true; }

        $data = '{
            "settings" : {
                "index" : {
                    "number_of_shards" : 1,
                    "number_of_replicas" : 0
                }
            }
        }';
        $options = array(
            'method' => 'PUT',
            'data'   => $data,
        );
        $response = drupal_http_request($elasticsearch_server.'/cmp-data-status', $options);
        if (  $response->code === '200' )
        {
            _cdss_log('Info: Created ElasticSearch Index for CMP Status Checks : response='.$response->data);
            return true;
        } else if ( !($response->code === '400' || $response->code === '200') ) {
            _cdss_log('Fail: CDSS '.__FUNCTION__.' Failed to Created ElasticSearch Index for CMP Status Checks : response='.$response->data);
            return false;
        }
    } catch(Exception $e){
        _cdss_log('Fail: CDSS '.__FUNCTION__.' Exception : '.$e->getMessage() .' : '. $e->getTraceAsString());
        return false;
    }
}
function _cdss_teardown_status_index()
{
    $elasticsearch_server = variable_get('cdss_elasticsearch_server');
    try{
        $response = drupal_http_request($elasticsearch_server.'/cmp-data-status', array('method'=>'HEAD') );
        if ( $response->code === '404' ) { return true; }

        $options = array(
            'method' => 'DELETE'
        );
        $response = drupal_http_request($elasticsearch_server.'/cmp-data-status', $options);
        if ( $response->code === '200' )
        {
            _cdss_log('Info: CDSS '.__FUNCTION__.' Deleted ElasticSearch Index for CMP Status Checks : response='.$response->data);
            return true;
        } else {
            return false;
        }
    } catch(Exception $e){
        _cdss_log('Fail: CDSS '.__FUNCTION__.' Exception : '.$e->getMessage() .' : '. $e->getTraceAsString());
        return false;
    }
}

function _cdss_setup_drupal()
{
    $queue_success = _cdss_setup_drupal_queue();
    $vars_success  = _cdss_setup_drupal_vars();
    return $queue_success && $vars_success;
}
function _cdss_teardown_drupal()
{
    $queue_success = _cdss_teardown_drupal_queue();
    $vars_success  = _cdss_teardown_drupal_vars();
    return $queue_success && $vars_success;
}
function _cdss_setup_drupal_queue()
{
    try {
        $queue = DrupalQueue::get('cmp_data_sync');
        $queue->createQueue();
        return true;
    } catch (Exception $e) {
        _cdss_log('Fail: CDSS '.__FUNCTION__.' Exception : '.$e->getMessage() .' : '. $e->getTraceAsString());
        return false;
    }
}
function _cdss_teardown_drupal_queue()
{
    try {
        $queue = DrupalQueue::get('cmp_data_sync');
        $queue->deleteQueue();
        return true;
    } catch (Exception $e) {
        _cdss_log('Fail: CDSS '.__FUNCTION__.' Exception : '.$e->getMessage() .' : '. $e->getTraceAsString());
        return false;
    }
}
function _cdss_setup_drupal_vars()
{
    /// check this logic: don't want to clobber with empty values if already exists
    if ( variable_get('cdss_node_bundles')===null )
    {
        variable_set('cdss_node_bundles',array());
    }
    if ( variable_get('cdss_term_bundles')===null )
    {
        variable_set('cdss_term_bundles',array());
    }
    if ( variable_get('cdss_elasticsearch_server')===null )
    {
        variable_set('cdss_elasticsearch_server','');
    }
}
function _cdss_teardown_drupal_vars()
{
    variable_del('cdss_node_bundles');
    variable_del('cdss_term_bundles');
    return true;
}

/// private action functions

function _cdss_log( $message, $destination='php' )
{
    if ( $destination == 'php' ) {
        error_log($message);
    } else if ( $destination == 'slack'
             && function_exists('slack_send_message')
             && in_array(
                 strtolower(getenv('CMP_DRUPAL_ENVIRONMENT_NAME')),
                 ['production','prod','prd',
                  'staging','stage','stg',
                  'testing','test','tst']))
    {
        slack_send_message(
            slack_get_default_webhook_url(),
            $message,
            "#cmp-notify",
            $_SERVER['HTTP_HOST'],
            ['type'=>'','icon'=>0,'emoji'=>0]
        );
    }
}

function _cdss_add_entity_to_queue($e_id, $e_type)
{
    /// an entity_id should only be in the Q once,
    /// any new entries for an entity should replace older one
    try {
        $queue = DrupalQueue::get('cmp_data_sync');
        $queue->createItem(array(
            'entity_id'   => $e_id,
            'entity_type' => $e_type
        ));
        _cdss_log('Info: CDSS '.__FUNCTION__.' : entity_id='.$e_id.' entity_type='.$e_type);
        return CDSS_SUCCESS;
    } catch (Exception $e) {
        _cdss_log('Fail: CDSS '.__FUNCTION__.' Exception : entity_id='.$e_id.' entity_type='.$e_type .' : '. $e->getMessage() .' : '. $e->getTraceAsString());
        return CDSS_TRY_AGAIN;
    }
}
function _cdss_process_queue_item($q_item_data)
{
    if ( empty($q_data['entity_id']) || empty($q_data['entity_type']) )
    {
        return CDSS_FATAL;
    }
    $success = _cdss_send_entity_to_elasticsearch(
        $q_item_data['entity_id'],
        $q_item_data['entity_type']
    );
    if ( $success===CDSS_TRY_AGAIN )
    {
        throw new Exception('Failed to process queue item. Will try again later.');
    }
    return $success;
}

function _cdss_send_schema_to_elasticsearch()
{
    $elasticsearch_server = variable_get('cdss_elasticsearch_server');
    try{
        $schema_node      = _getExportNodeStructureCode();
        $schema_term      = _getExportTaxonomyStructureCode();
        $schema_node_sha1 = sha1($schema_node);
        $schema_term_sha1 = sha1($schema_term);
        $data = array(
            'term'      => $schema_term,
            'node'      => $schema_node,
            'term_sha1' => $schema_term_sha1,
            'node_sha1' => $schema_node_sha1,
        );
        $response = drupal_http_request(
            $elasticsearch_server.'/cmp-data-schema/schema/node_term',
            array(
                'method' => 'PUT',
                'data'   => json_encode($data),
            )
        );
        if ( $response->code === '201' || $response->code === '200' )
        {
            _cdss_log('Info: CDSS '.__FUNCTION__.' Schema Sent : response='.$response->data);
            return true;
        } else {
            _cdss_log('Fail: CDSS '.__FUNCTION__.' Schema Not Sent : response='.$response->data);
            return false;
        }
    } catch(Exception $e) {
        _cdss_log('Fail: CDSS '.__FUNCTION__.' Exception : '. $e->getMessage() .' : '. $e->getTraceAsString());
        return false;
    }
}
function _cdss_send_entity_to_elasticsearch($e_id, $e_type, $timeout=10)
{
    if ( $e_type === 'node' ) {
        $entity = _cdss_load_sanitized_node($e_id);
    } elseif ( $e_type === 'taxonomy_term' ) {
        $entity = _cdss_load_sanitized_term($e_id);
    } elseif ( $e_type === 'deleted_term' ) {
        $entity = _cdss_load_deleted_term($e_id);
    } else {
        _cdss_log('Fail: CDSS '.__FUNCTION__.' Entity type unknown, removing from queue : entity_id='.$e_id.' entity_type='.$e_type);
        return CDSS_FATAL; /// remove from queue
    }
    if(empty($entity))
    {
        _cdss_log('Fail: CDSS '.__FUNCTION__.' Entity empty, removing from queue : entity_id='.$e_id.' entity_type='.$e_type);
        return CDSS_FATAL; /// remove from queue
    }
    $elasticsearch_server = variable_get('cdss_elasticsearch_server');
    // try{ // leave these exceptions for _cron_queue_info
    /// put with an explicit ID will act as an upsert
    $response = drupal_http_request(
        $elasticsearch_server.'/cmp-data-entities/entity/'.$e_type.'_'.$e_id,
        array(
            'method'  => 'PUT',
            'data'    => json_encode($entity),
            'timeout' => $timeout
        )
    );
    /// there are probably some response codes
    /// that should really be fatal and return NULL
    /// for now we are assuming anything but 200/201
    /// means a temporary problem and we will return FALSE
    if ( $response->code === '201' || $response->code === '200' )
    {
        _cdss_log('Info: CDSS '.__FUNCTION__.' Indexed : entity_id='.$e_id.' entity_type='.$e_type);
        return CDSS_SUCCESS; /// remove from queue
    } else {
        _cdss_log('Fail: CDSS '.__FUNCTION__.' Not Indexed : entity_id='.$e_id.' entity_type='.$e_type.' response='.$response->data);
        return CDSS_TRY_AGAIN; /// keep in queue, try again
    }
    // // leave these exceptions for _cron_queue_info
    // } catch(Exception $exception){
    //     dsm($exception);
    //     return false; /// keep in queue, try again
    // }
    /// uncaught exception should be handled by _cron_queue_info
    /// which will keep this item in the queue and try again
}

function _cdss_add_all_to_queue()
{
    _cdss_add_all_nodes_to_queue();
    _cdss_add_all_terms_to_queue();
}
function _cdss_add_all_nodes_to_queue()
{
    $selected_bundles = variable_get('cdss_node_bundles', array());
    $result = db_query(
        'SELECT nid FROM node WHERE type in (:types) and ( status=1 OR deleted=1 )',
        array(':types'=>$selected_bundles)
    );
    $success = 0;
    $cnt=0;
    while ( $e_id = $result->fetchField() )
    {
        _cdss_log('Number of times run this looop:'.$cnt);
        $success += _cdss_add_entity_to_queue($e_id, 'node');
        $cnt++;
    }
    _cdss_log('Info: CDSS '.__FUNCTION__.' results : '.$success.'/'.$result->rowCount());
}
function _cdss_add_all_terms_to_queue()
{
    $selected_bundles = variable_get('cdss_term_bundles', array());
    $result = db_query(
        'SELECT tid
         FROM taxonomy_term_data d
	     JOIN taxonomy_vocabulary v on ( d.vid = v.vid )
         WHERE v.machine_name in (:vocabs)',
        array(':vocabs'=>$selected_bundles)
    );
    $success = 0;
    while ( $e_id = $result->fetchField() )
    {
        $success += _cdss_add_entity_to_queue($e_id, 'taxonomy_term');
    }
    /// loop through all deleted terms - add them to the queue
    /// $success += _cdss_add_entity_to_queue($e_id, 'deleted_term');
    _cdss_log('Info: CDSS '.__FUNCTION__.' results : '.$success.'/'.$result->rowCount());
}

function _cdss_load_sanitized_node($e_id)
{
    $node = node_load($e_id);
    if(empty($node))
    {
    	return $node;
    }

    $node->uid = 1;
    unset($node->workbench_moderation);
    unset($node->revision_timestamp);
    unset($node->revision_uid);
    unset($node->vid);
    unset($node->path);
    unset($node->picture);
    $node->field_owner = array();
    unset($node->cid);
    unset($node->last_comment_timestamp);
    unset($node->last_comment_name);
    unset($node->last_comment_uid);
    unset($node->comment_count);

    return $node;
}
function _cdss_load_sanitized_term($e_id)
{
    $term = taxonomy_term_load($e_id);
    if(empty($term))
    {
    	return $term;
    }

    $parent = db_query(
    	'SELECT parent FROM {taxonomy_term_hierarchy} where tid=:tid',
    	array(':tid'=>$e_id)
    )->fetchField();
    if ( !empty($parent) && $parent!=='0' && $parent!==0 )
    {
    	$term->parent = $parent;
    }
    $term->deleted = false;
    return $term;
}
function _cdss_load_deleted_term($e_id)
{
    $results = db_query(
    	'SELECT tid,vid,title,changed,1 as deleted FROM {cdss_deleted_terms} where tid=:tid LIMIT 1',
    	array(':tid'=>$e_id)
    )->fetchAssoc();
    foreach ( $results as $result )
    {
        return (object)$result;
    }
    return null;
}

function _getExportTaxonomyStructureCode()
{
    $selected_bundles = variable_get('cdss_term_bundles', array());
    // $selected_bundles = array();
    // foreach ( _bundle_copy_bundle_info('taxonomy_term', TRUE) as $machineName => $label ) {
    //     $selected_bundles[$machineName] = $machineName;
    // }

    $instances = array();
    foreach ($selected_bundles as $key => $bundle) {
    	if ($key === $bundle) {
    		$instances += field_info_instances('taxonomy_term', $bundle);
    	}
    }
    ksort($instances);

    $selectedFields = array();
    foreach ( $instances as $machineName => $fieldInfo ) {
    	$selectedFields[$machineName] = $machineName;
    }

    $fieldGroupIds = array();
    $fieldGroupData = array();
    $all_groups = function_exists('field_group_info_groups') ? field_group_info_groups() : array();
    if ( !empty($all_groups) && !empty($all_groups['taxonomy_term']) ) {
    	foreach ($all_groups['taxonomy_term'] as $vocabName => $formData) {
    		foreach ($formData['form'] as $groupName => $data) {
    			$fieldGroupIds[$data->id] = $data->id;
    			$fieldGroupData[$data->id] = $data;
    		}
    	}
    }

    $selected_data = array(
    	1 => array(
    		'bundles' => $selected_bundles
    	),
    	2 => array(
    		'fields' => $selectedFields,
    		'fieldgroups' => $fieldGroupIds,
    		'fieldgroups-full' => $fieldGroupData,
    	),
    );

    return _bundle_copy_export_data('taxonomy_term', $selected_data);
}
function _getExportNodeStructureCode()
{
	$selected_bundles = variable_get('cdss_node_bundles', array());

	$instances = array();
	foreach ($selected_bundles as $key => $bundle) {
		if ($key === $bundle) {
		  $instances += field_info_instances('node', $bundle);
		}
	}
	ksort($instances);

	$selectedFields = array();
	foreach ( $instances as $machineName => $fieldInfo ) {
		$selectedFields[$machineName] = $machineName;
	}

	$selected_data = array(
		1 => array(
			'bundles' => $selected_bundles
		),
		2 => array(
			'fields' => $selectedFields
		),
	);


	return _bundle_copy_export_data('node', $selected_data);
}

function _cdss_process_queue()
{
    $queue = DrupalQueue::get('cmp_data_sync');

    $lease_time = 10;
    $queued_item_count = $queue->numberOfItems($lease_time);
    $attempted = 0;
    $success   = 0;
    //while ( ($time_spent+$avg_time) < $max_time )
    while( $queue->numberOfItems()>0 )
    {
        $q_item = $queue->claimItem($lease_time);
        if ( empty($q_item) )
        {
            /// we done
            break;
        }
        $attempted++;
        try
        {
            $result = _cdss_process_queue_item($q_item->data);
            if ( $result===CDSS_FATAL )
            {
                /// we can't possibly process this
                /// just remove it
                $queue->deleteItem($q_item);
            } else if ( $result===CDSS_SUCCESS ) {
                $queue->deleteItem($q_item);
            } else {
                /// success===CDSS_TRY_AGAIN means there was a non-fatal problem
                /// while talking to elasticsearch
                /// we can put this back and try again later
                $queue->releaseItem($q_item);
            }
            $success++;
        } catch(Exception $e) {
            _cdss_log('Fail: CDSS '.__FUNCTION__.' Exception releasing q_item: '.$e->getMessage() .' : '. $e->getTraceAsString() );
            $queue->releaseItem($q_item);
        }
    }
    _cdss_log('Info: CDSS '.__FUNCTION__.' results : '.$success.'/'.$attempted.' of '.$queued_item_count.' total');

}

// function _cdss_process_queue_item($queue)
// {
//     $lease_time = 10;
//
//     $q_item = $queue->claimItem($lease_time);
//     if ( empty($q_item) )
//     {
//         return null;
//     }
//     $success = _cdss_send_entity_to_elasticsearch(
//         $q_item->data['entity_id'],
//         $q_item->data['entity_type'],
//         $lease_time
//     );
//     if ( $success===null )
//     {
//         /// we can't possibly process this
//         /// just remove it
//         $queue->deleteItem($q_item);
//     } else if ( $success===true ) {
//         $queue->deleteItem($q_item);
//     } else {
//         /// success===false means there was a non-fatal problem
//         /// talking to elasticsearch
//         /// we can put this back and try again later
//         $queue->releaseItem($q_item);
//     }
//     return $success;
// }
/*
cmp-data-status/check/current
{
    data_verification_failure = FALSE,
    term_sha1 = "",
    node_sha1 = "",
    node:{
        'type1': { 'count': 111 },
        'type2': { 'count': 222 }
    }
    term:{
        'vocabA': { 'count': 333 },
        'vocabB': { 'count': 444 }
    }
}



cmp-data-status/check/schema  : true
cmp-data-status/check/content : timestamp

cmp - set sha1 = fff
cmp - updates elasticsearch
cmp - check elasticsearch


Then elastic search takes a shit....
Then elastic search loses half of data...but keeps check correct as true....
Then CMP cant update because of shit
CHILD should see sha1-check=fff but actual-sha1=zzz

*/
