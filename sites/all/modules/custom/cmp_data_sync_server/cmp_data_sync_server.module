<?php


/*
 * Implements HOOK_menu()
 */
function cmp_data_sync_server_menu() {


    $items = array();

    // Configuration page
    $items['admin/content/cmp-data-sync-server'] = array(
        'title' => 'CMP Data Sync To ElasticSearch',
        'description' => 'Testing',
        'page callback' => 'cmp_data_sync_server_test',
        'access callback' => true,
        'type' => MENU_CALLBACK,
    );

    return $items;
}

function cmp_data_sync_server_test(){



    function getExportTaxonomyStructureCode() {

        $selected_bundles = array();
        foreach ( _bundle_copy_bundle_info('taxonomy_term', TRUE) as $machineName => $label ) {
            $selected_bundles[$machineName] = $machineName;
        }

        $instances = array();
        foreach ($selected_bundles as $key => $bundle) {
            if ($key === $bundle) {
              $instances += field_info_instances('taxonomy_term', $bundle);
            }
        }
        ksort($instances);

        $selectedFields = array();
        foreach ( $instances as $machineName => $fieldInfo ) {
            $selectedFields[$machineName] = $machineName;
        }

        $fieldGroupIds = array();
        $fieldGroupData = array();
        $all_groups = function_exists('field_group_info_groups') ? field_group_info_groups() : array();
        if ( !empty($all_groups) && !empty($all_groups['taxonomy_term']) ) {
            foreach ($all_groups['taxonomy_term'] as $vocabName => $formData) {
                foreach ($formData['form'] as $groupName => $data) {
                    $fieldGroupIds[$data->id] = $data->id;
                    $fieldGroupData[$data->id] = $data;
                }
            }
        }

        $selected_data = array(
            1 => array(
                'bundles' => $selected_bundles
            ),
            2 => array(
                'fields' => $selectedFields,
                'fieldgroups' => $fieldGroupIds,
                'fieldgroups-full' => $fieldGroupData,
            ),
        );

        return _bundle_copy_export_data('taxonomy_term', $selected_data);

    }





    function getExportNodeStructureCode() {

        $selected_bundles = variable_get('udm_conttypes', array());

        $instances = array();
        foreach ($selected_bundles as $key => $bundle) {
            if ($key === $bundle) {
              $instances += field_info_instances('node', $bundle);
            }
        }
        ksort($instances);

        $selectedFields = array();
        foreach ( $instances as $machineName => $fieldInfo ) {
            $selectedFields[$machineName] = $machineName;
        }

        $selected_data = array(
            1 => array(
                'bundles' => $selected_bundles
            ),
            2 => array(
                'fields' => $selectedFields
            ),
        );

        return _bundle_copy_export_data('node', $selected_data);

    }


    $schema_taxonomy = getExportTaxonomyStructureCode();
    $schema_taxonomy_sha1 = sha1($schema_taxonomy);
    $schema_node = getExportNodeStructureCode();
    $schema_node_sha1 = sha1($schema_node);


    $arr = array('taxonomy_sha1' => $schema_taxonomy_sha1, 'taxonomy' => $schema_taxonomy, 'node_sha1' =>$schema_node_sha1, 'nodes' => $schema_node);
    $json_object = json_encode($arr);


    try{
        $data = '{
            "settings" : {
                "index" : {
                    "number_of_shards" : 1,
                    "number_of_replicas" : 0
                }
            }
        }';

            $options = array(
                            'method' => 'PUT',
                            'data' => $data,
                    );

            $result = drupal_http_request('http://10.0.2.2:9200/cmp-data-schema/', $options);
        dsm($result);




        $data = $json_object;

        $options = array(
                        'method' => 'POST',
                        'data' => $data,
                );

        $result = drupal_http_request('http://10.0.2.2:9200/cmp-data-schema/schema/', $options);
        dsm($result);

    } catch(Exception $whatever){
        dsm($whatever);
    }




    return 'test';
}
