<?php
// JKH 
// setupAssetTopicEvents question, again...
// require_once DRUPAL_ROOT . "/tracetofile.php";

function asset_topic_placement_init() {
	// JKH added to figure out why setupAssetTopicEvents is not defined...
	// tracetofile(__FILE__,__LINE__,'asset_topic_placement_init()');
	// tracetofile(__FILE__,__LINE__,request_uri());
	// JKH changed this 
	$request_uri = request_uri();
    // On any taxonomy edit-page or site_strucutre_taxonomy adding-page...
    // this one showing error...
    // admin/structure/taxonomy_manager/voc/asset_topic_taxonomy
    if (strpos($request_uri, 'taxonomy/term/') !== false && strpos($request_uri, '/edit') !== false
        || strpos($request_uri, '/admin/structure/taxonomy/site_strucutre_taxonomy/add') !== false
        // || strpos($request_uri, '/admin/structure/taxonomy_manager/voc/site_strucutre_taxonomy') !== false
        // JKH added generic  URIs, after trace work...,  
        // stopped looking after this length -> /admin/structure/taxonomy_manager/voc
        || strpos($request_uri, '/admin/structure/taxonomy_manager/voc') !== false
    ) {
        // tracetofile(__FILE__,__LINE__,'including js');
        // Include asset_topic_placement.js
        // JKH we need to load the jstree control, jstree checks for existing...
        drupal_add_js(drupal_get_path('module', 'taxonomy_tree_widget') . '/dist/jstree.min.js','file');
        drupal_add_js(drupal_get_path('module', 'asset_topic_placement') . '/jquery.waituntilexists.js', 'file');
        drupal_add_js(drupal_get_path('module', 'asset_topic_placement') . '/asset_topic_placement2.js', 'file');
        drupal_add_css(drupal_get_path('module', 'asset_topic_placement') . '/asset_topic_placement.css', 'file');

    } else {
    	// JKH added 
    	// tracetofile(__FILE__,__LINE__,'not including js');
    }
}

/*
 * Implements HOOK_menu()
 */
function asset_topic_placement_menu() {
    $items = array();

    // Ajax handeler for getting nodes under given Asset-Topic(s)
    $items['atm/get-nodes-under-topics'] = array(
        'title' => 'Get Nodes Under Topics',
        'description' => 'AJAX return for nodes under given Asset-Topics',
        'page callback' => 'asset_topic_placement_ajaxReturnNodesUnderTopics',
        'access callback' => 'user_is_logged_in',
        'type' => MENU_CALLBACK
    );

    // Ajax handeler for getting node data by nid
    $items['atm/get-nodes-data'] = array(
        'title' => 'Get Data for Nodes-IDs',
        'description' => 'AJAX return',
        'page callback' => 'asset_topic_placement_ajaxReturnNodesInfo',
        'access callback' => 'user_is_logged_in',
        'type' => MENU_CALLBACK
    );

    return $items;
}

function _taxonomy_manager_form_fixer(&$form)
{
    $form['assetTopicTrigger'] = array(
        '#markup' => "<script>setTimeout(setupAssetTopicEvents,200);</script>",
        '#weight' => 1000,
    );
    if (!empty($form['#term']['field_asset_order_content']['und'])) {
        $js_inline = array(
            'NodeInfoCache = ( typeof NodeInfoCache != "undefined" ? NodeInfoCache : {} );'
        );

        $assets = $form['#term']['field_asset_order_content']['und'];
        $asset_nids = [];
        foreach ( $assets as $asset )
        {
            $asset_nids[] = $asset['target_id'];
        }
        $nids   = array_unique(array_map('intval',$asset_nids));
        // Note this node info in a global NodeInfoCache JavaScript variable
        $nodes = __get_node_info($nids);
        foreach ( $nodes as $node )
        {
            $js_inline[] = "NodeInfoCache['n". $node->nid ."'] = ".json_encode($node).";";
        }

        $topics = $form['#term']['field_asset_topic_taxonomy']['und'];
        $nutCacheKey = '';
        foreach ( $topics as $topic )
        {
        	// JKH need to double check this
            // $nutCacheKey += 't'.intval($topic['tid']);
            $nutCacheKey .= '\'t'.intval($topic['tid']).'\'';
            // tracetofile(__FILE__,__LINE__,"nutCacheKey " . $nutCacheKey . ", tid " . $topic['tid']);
        }
        $cachedNodes = json_encode($nodes);

        if ( !empty($nutCacheKey) )
        {
            $js_inline[] = "
                if ( typeof NodeUnderTopicCache === 'undefined' ) {
                    NodeUnderTopicCache = {};
                }
                NodeUnderTopicCache[{$nutCacheKey}] = {$cachedNodes};
            ";
        	// tracetofile(__FILE__,__LINE__,"js_inline");
        	// traceobjects($js_inline);             
        }
       
        $form['assetTopicJS'] = array(
            '#markup' => "<script>". implode("\n",$js_inline) ."</script>",
            '#weight' => -10,
        );
    }
}

function _parent_tid_by_tid($tid){
    $field = db_query("SELECT parent FROM taxonomy_term_hierarchy WHERE tid = :tid", array(':tid'=>$tid))->fetchField(0);

    /* 11726 USA.gov
   125 Gobierno
   126 Call Center
   11279 Blog.USA.gov
   3897 Kids.gov
   11632 For Teachers Stickers
    */

    if (empty($field)){
        return $tid;
    }
    $parents= array(11726, 125, 126, 11279, 3897,11632);

    if (in_array($field, $parents)){
        return $field;
    }
    else {
        return _parent_tid_by_tid($field);
    }

}

function asset_topic_placement_form_taxonomy_form_term_alter(&$form, &$form_state, $form_id)
{
    drupal_add_js("jQuery(document).ready(function(){ setTimeout(setupAssetTopicEvents,200) });", 'inline');
    if ( empty($form['#term']) ) { return; }
    $field_asset_order_content  = [];
    $field_asset_topic_taxonomy = [];
    if ( is_array($form['#term']) )
    {
        if ( !empty($form['#term']['field_asset_order_content'])
            && !empty($form['#term']['field_asset_order_content']['und']) )
        {
            $field_asset_order_content = $form['#term']['field_asset_order_content']['und'];
        }
        if ( !empty($form['#term']['field_asset_topic_taxonomy'])
            && !empty($form['#term']['field_asset_topic_taxonomy']['und']) )
        {
            $field_asset_topic_taxonomy = $form['#term']['field_asset_topic_taxonomy']['und'];
        }
    } else if ( is_object($form['#term']) ) {
        if ( !empty($form['#term']->field_asset_order_content)
            && !empty($form['#term']->field_asset_order_content['und']) )
        {
            $field_asset_order_content = $form['#term']->field_asset_order_content['und'];
        }
        if ( !empty($form['#term']->field_asset_topic_taxonomy)
            && !empty($form['#term']->field_asset_topic_taxonomy['und']) )
        {
            $field_asset_topic_taxonomy = $form['#term']->field_asset_topic_taxonomy['und'];
        }
    }

    $js_inline = array(
        'NodeInfoCache = ( typeof NodeInfoCache != "undefined" ? NodeInfoCache : {} );'
    );
    $assets = $field_asset_order_content;
    $asset_nids = [];
    foreach ( $assets as $asset )
    {
        $asset_nids[] = $asset['target_id'];
    }
    $nids   = array_unique(array_map('intval',$asset_nids));
    // Note this node info in a global NodeInfoCache JavaScript variable
    $nodes = __get_node_info($nids);
    foreach ( $nodes as $node )
    {
        $js_inline[] = "NodeInfoCache['n". $node->nid ."'] = ".json_encode($node).";";
    }

    $topics = $field_asset_topic_taxonomy;
    $nutCacheKey = '';
    foreach ( $topics as $topic )
    {
        if ( is_array($topic) && !empty($topic['tid']) && is_numeric($topic['tid']) ) {
          // JKH error here: non-numeric value encountered
          // $nutCacheKey += 't'.intval($topic['tid']);
          $nutCacheKey .= '\'t'.intval($topic['tid']).'\'';
          // tracetofile(__FILE__,__LINE__,"nutCacheKey " . $nutCacheKey . ", tid " . $topic['tid']);
        }
    }
    $cachedNodes = json_encode($nodes);

    if ( !empty($nutCacheKey) )
    {
        $js_inline[] = "
            if ( typeof NodeUnderTopicCache === 'undefined' ) {
                NodeUnderTopicCache = {};
            }
            NodeUnderTopicCache[{$nutCacheKey}] = {$cachedNodes};
        ";
        // tracetofile(__FILE__,__LINE__,"js_inline");
        // traceobjects($js_inline);
    }

    drupal_add_js(implode("\n",$js_inline), 'inline');

    // var nutCacheKey = 't' + tidAssetTopics.join('t', tidAssetTopics);
    // jQuery.get('/atm/get-nodes-under-topics?terms='+tidAssetTopics.join(','), function (nodes)
    //
    //     // Cache what nodes are under this/these topic(s)
    //     NodeUnderTopicCache[nutCacheKey] = nodes;


    // foreach ($assets as $assetNidContainer) {
    //     $nid = $assetNidContainer['target_id'];
    //
    //     // Get the revision of the published version of this node
    //     $targetRevId = db_query("
    //         SELECT r.vid
    //         FROM node n
    //         LEFT JOIN node_revision r ON ( r.nid = n.nid AND r.vid= n.vid )
    //         WHERE n.nid = :nid AND n.status = 1 AND r.status = 1
    //     ",array(':nid'=>$nid))->fetchColumn();
    //     $wasPublished = 1;
    //
    //     // If the node has never been published yet, then default to the latest revision
    //     if ($targetRevId == false) {
    //         $targetRevId = db_query("
    //             SELECT vid
    //             FROM node_revision
    //             WHERE nid = :nid
    //             ORDER BY vid DESC
    //             LIMIT 1
    //         ",array(':nid'=>$nid))->fetchColumn();
    //         $wasPublished = 0;
    //     }
    //
    //     if ($targetRevId==false) {
    //         continue;
    //     }
    //
    //     // Obtain node info
    //     $nodeInfo = db_query("
    //         SELECT
    //             nid,
    //             title,
    //             type,
    //             field_priority_value AS 'priority',
    //             p.revision_id AS 'vid',
    //             {$wasPublished} AS 'haspubrevision'
    //         FROM node n
    //         LEFT JOIN field_revision_field_priority p ON ( p.entity_id = n.nid AND p.revision_id = :rid )
    //         WHERE n.nid = :nid
    //     ",array(':nid'=>$nid,':rid'=>$targetRevId))->fetchAll();
    //     $nodeInfo = isset($nodeInfo[0]) ? $nodeInfo[0] : array() ;
    //
    //     // Note this node info in a global NodeInfoCache JavaScript variable
    //     drupal_add_js("NodeInfoCache['n{$nid}'] = ".json_encode($nodeInfo), 'inline');
    // }

}

function asset_topic_placement_ajaxReturnNodesUnderTopics() {

    @ob_end_clean();
    while (@ob_end_clean());
    header('Content-Type: application/json');

    // Obtain terms argument
    if (empty($_REQUEST['terms'])) {
        exit('{}');
        # Error - no terms argument supplied');
    }

    // MySQL string sanitization
    // $terms     = explode(',', $_REQUEST['terms']);
    // $msqlTerms = [];
    // foreach ($terms as $term) {
    //     $msqlTerms[] = intval($term);
    // }
    //$msqlTerms = implode(',', $msqlTerms);
    $tids = array_unique(array_map('intval',explode(',', $_REQUEST['terms'])));
    if ( empty($tids) )
    {
        echo '{}';
        exit();
    }

    // ADD USEBY LOGIC
    $uby = array();
    /* 11726 USA.gov
       125 Gobierno
       126 Call Center
       11279 Blog.USA.gov
       3897 Kids.gov
       11632 For Teachers Stickers
    */

    foreach($tids as $t) {
        $ptid = _parent_tid_by_tid($t);

        if ($ptid == 11726 || $t==11726 || $ptid == 381 || $t==381){
            $uby[] = 'USA.gov';
        }
        if ($ptid == 125 || $t==125){
            $uby[] = 'GobiernoUSA.gov';
        }
        if ($ptid == 11279 || $t==11279){
            $uby[] = 'Blog.USA.gov';
        }
        if ($ptid == 3897 || $t==3897){
            $uby[] = 'Kids.gov';
        }
    }


    /* Get all node-ids that are associated with the given Asset-Topic terms, based
     on the information in the field_data_field_asset_topic_taxonomy table */
    $nids = db_query("
      SELECT t.entity_id
      FROM field_data_field_asset_topic_taxonomy t
      INNER JOIN node n ON n.nid = t.entity_id and n.status = 1
      INNER JOIN field_data_field_for_use_by_text ubyt ON field_for_use_by_text_value IN (:USEBY_TEXT) AND ubyt.entity_id = n.nid
	  LEFT JOIN node_deleted d ON ( t.entity_id = d.nid AND d.deletion_state='soft' )
      WHERE t.entity_type = 'node' AND d.deletion_state IS NULL AND field_asset_topic_taxonomy_tid IN (:tids)
      UNION
      SELECT t.entity_id
      FROM field_data_field_asset_topic_taxonomy t
      INNER JOIN node n ON n.nid = t.entity_id and n.status = 1
      INNER JOIN field_data_field_for_use_by uby ON field_for_use_by_value IN (:USEBY_TEXT) AND uby.entity_id = n.nid
	  LEFT JOIN node_deleted d ON ( t.entity_id = d.nid AND d.deletion_state='soft' )
      WHERE t.entity_type = 'node' AND d.deletion_state IS NULL AND field_asset_topic_taxonomy_tid IN (:tids)
    ",array(':tids'=>$tids, ':USEBY_TEXT'=>$uby))->fetchCol();

    if (count($nids) === 0) {
        echo '{}';
        exit();
    }

    // Get information on these nodes
    $nodes = [];
    // foreach ($nids as $nid) {
    //     // If this is a broken pointer (if this node-id dosnt exist), ignore...
    //     if (db_query('SELECT count(*) FROM node WHERE nid = :nid',array(':nid'=>$nid))->fetchColumn() == 0) {
    //         continue;
    //     }
    //
    //     // Get the revision of the published version of this node
    //     $targetRevId = db_query("
    //         SELECT r.vid
    //         FROM node n
    //         LEFT JOIN node_revision r ON ( r.nid = n.nid AND r.vid= n.vid )
    //         WHERE n.nid = :nid AND n.status = 1 AND r.status = 1
    //     ",array(':nid'=>$nid))->fetchColumn();
    //     $wasPublished = 1;
    //
    //     // If the node has never been published yet, then default to the latest revision
    //     if ($targetRevId == false) {
    //         $targetRevId = db_query("
    //             SELECT vid
    //             FROM node_revision
    //             WHERE nid = :nid
    //             ORDER BY vid DESC
    //             LIMIT 1
    //         ",array(':nid'=>$nid))->fetchColumn();
    //         $wasPublished = 0;
    //     }
    //
    //     // Obtain node info
    //     $thisNode = db_query("
    //         SELECT
    //             nid,
    //             title,
    //             type,
    //             field_priority_value AS 'priority',
    //             p.revision_id AS 'vid',
    //             {$wasPublished} AS 'haspubrevision'
    //         FROM node n
    //         LEFT JOIN field_revision_field_priority p ON ( p.entity_id = n.nid AND p.revision_id = {$targetRevId} )
    //         WHERE n.nid = {$nid}
    //     ",array(':rid'=>$targetRevId,':nid'=>$nid))->fetchAll();
    //     $nodes[] = $thisNode[0];
    // }
    $nodes = __get_node_info($nids);
    echo json_encode($nodes);

    exit();
}

function asset_topic_placement_ajaxReturnNodesInfo() {

    @ob_end_clean();
    while (@ob_end_clean());
    header('Content-Type: application/json');

    // Obtain nids argument
    if ( empty($_REQUEST['nids']) ) {
        exit('Error - no nids argument supplied');
    }

    // MySQL string sanitization and get Node-IDs
    // $nids     = explode(',', $_REQUEST['nids']);
    // $msqlNids = [];
    // foreach ($nids as $nid) {
    //     $msqlNids[] = intval($nid);
    // }
    $nids   = array_unique(array_map('intval',explode(',', $_REQUEST['nids'])));

    // Get information on these nodes
    $nodes = [];
    // foreach ($nids as $nid) {
    //
    //     // Get the revision of the published version of this node
    //     $targetRevId = db_query("
    //         SELECT r.vid
    //         FROM node n
    //         LEFT JOIN node_revision r ON ( r.nid = n.nid AND r.vid= n.vid )
    //         WHERE n.nid = :nid AND n.status = 1 AND r.status = 1
    //     ",array(':nid'=>$nid))->fetchColumn();
    //     $wasPublished = 1;
    //
    //     // If the node has never been published yet, then default to the latest revision
    //     if ($targetRevId == false) {
    //         $targetRevId = db_query("
    //             SELECT vid
    //             FROM node_revision
    //             WHERE nid = :nid
    //             ORDER BY vid DESC
    //             LIMIT 1
    //         ",array(':nid'=>$nid))->fetchColumn();
    //         $wasPublished = 0;
    //     }
    //
    //     /* If we still couldn't find the $targetRevId, then this node doesn't
    //     exists, (this is a broken reference), ignore/skip. */
    //     if ($targetRevId === false) {
    //         continue;
    //     }
    //
    //     // Obtain node info
    //     $thisNode = db_query("
    //         SELECT
    //             nid,
    //             title,
    //             type,
    //             field_priority_value AS 'priority',
    //             p.revision_id AS 'vid',
    //             {$wasPublished} AS 'haspubrevision'
    //         FROM node n
    //         LEFT JOIN field_revision_field_priority p ON ( p.entity_id = n.nid AND p.revision_id = :rid )
    //         WHERE n.nid = :nid
    //     ",array(':nid'=>$nid,':rid'=>$targetRevId))->fetchAll();
    //     $nodes[] = $thisNode[0];
    //     $nodes = isset($thisNode[0]) ? $thisNode[0] : array() ;
    // }
    $nodes = __get_node_info($nids);
    echo json_encode($nodes);

    exit();
}

function __get_node_info($nids)
{
    if ( ! is_array($nids) )
    {
        $nids = array($nids);
    }
    $nids = array_unique(array_map('intval',$nids));
    if ( empty($nids) ) { return []; }
    $info = db_query("
        SELECT
        	n.nid, 	n.title,
        	n.type,	p.field_priority_value AS 'priority',
        	IF (n.vid IS NOT NULL, n.vid,MAX(r.vid) ) AS 'vid',
        	IF (n.vid IS NULL, IF (MAX(r.vid)>0, 1,0  ), 1) AS 'haspubrevision'
        FROM
        	node n
        	LEFT JOIN node_revision r
                ON ( r.nid = n.nid )
        	LEFT JOIN field_revision_field_priority p
                ON ( p.entity_id = n.nid AND p.revision_id = n.vid )
        WHERE n.nid IN (:nids)
        GROUP BY n.nid",array(':nids'=>$nids))->fetchAll();
    return $info;
}

/// When a Term updates, go ahead and vet it's Region's Assets and remove any bad ones
function asset_topic_placement_taxonomy_term_presave($term)
{
    /// grab existing region/asset maps
    // $topics  = field_get_items('taxonomy_term', $term, 'field_asset_topic_taxonomy');
    // $assets  = [];
    // foreach ( ['bottom','carousel','content','menu','sidebar'] as $region )
    // {
    //     $region_assets = field_get_items('taxonomy_term', $term, 'field_asset_order_'.$region);
    //     foreach ( $region_assets as $asset )
    //     {
    //         $assets[$asset['target_id']] = array( 'nid'=>$asset['target_id'], ''=>'' );
    //     }
    // }

    /// for a page term, get all of it's region's asset id
    /// match the assets against how many topics they share with the page
    /// return any assets that do not share any topics with their page
    /// return a list of unwated assets for each region
    $sql = "
        SELECT
            pageRegion.region as region,
            pageRegion.target_id as nid,
            SUM(nodeTopic.entity_id IS NOT NULL) as remainingTopics
        FROM
            (
                ( SELECT 'bottom' as region, entity_id, field_asset_order_bottom_target_id as target_id
                  FROM field_data_field_asset_order_bottom WHERE entity_id = :tid
                ) UNION (
                  SELECT 'carousel' as region, entity_id, field_asset_order_carousel_target_id
                  FROM field_data_field_asset_order_carousel WHERE entity_id = :tid
                ) UNION (
                  SELECT 'content' as region, entity_id, field_asset_order_content_target_id
                  FROM field_data_field_asset_order_content WHERE entity_id = :tid
                ) UNION (
                  SELECT 'menu' as region, entity_id, field_asset_order_menu_target_id
                  FROM field_data_field_asset_order_menu WHERE entity_id = :tid
                ) UNION (
                  SELECT 'sidebar' as region, entity_id, field_asset_order_sidebar_target_id
                  FROM field_data_field_asset_order_sidebar WHERE entity_id = :tid
                )
            ) pageRegion
            JOIN field_data_field_asset_topic_taxonomy pageTopic
                ON ( pageTopic.entity_id = pageRegion.entity_id )
            LEFT JOIN field_data_field_asset_topic_taxonomy nodeTopic
                ON ( nodeTopic.field_asset_topic_taxonomy_tid = pageTopic.field_asset_topic_taxonomy_tid
                     AND nodeTopic.entity_id = pageRegion.target_id )
        GROUP BY pageRegion.region, pageRegion.target_id
        HAVING remainingTopics = 0
    ";
    // JKH we need to check this...
    if(!isset($term->tid)) {
        // if no tid, return
        // tracetofile(__FILE__,__LINE__,"no term tid");
		return;
    }
    /// put them in this format list[region]=array(1,2,3)
    $remove = [];
    $removable_assets = db_query($sql,array(':tid'=>$term->tid));
    foreach ( $removable_assets as $asset )
    {
        if ( !isset($remove[$asset->region]) ) { $remove[$asset->region] = array(); }
        $remove[$asset->region][] = $asset->nid;
    }
    $changed_tids  = array();
    /// remove any unwanted asset ids from each region's table
    foreach ( $remove as $region=>$nids )
    {
        $sql_sstid = "SELECT entity_id FROM field_data_field_asset_order_{$region} WHERE entity_id = :tid AND field_asset_order_{$region}_target_id IN (:nids)";
        $sstid_rest = db_query($sql_sstid,array( ':tid'=>$term->tid, ':nids'=>$nids ));
        foreach($sstid_rest as $rtid){
            $changed_tids[$rtid] = $rtid;
        }

        $sql = "DELETE FROM field_data_field_asset_order_{$region} WHERE entity_id = :tid AND field_asset_order_{$region}_target_id IN (:nids)";
        db_query($sql,array( ':tid'=>$term->tid, ':nids'=>$nids ));
    }

}
