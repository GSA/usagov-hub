<?php

/** update base_url to be https **/
if ( empty($GLOBALS['base_url']) && !empty($_SERVER['HTTP_HOST']) )
{
    $GLOBALS['base_url'] = ( (!empty($_SERVER['HTTPS']) && $_SERVER['HTTPS']=='on') ? 'https://' : 'http://' ) . $_SERVER['HTTP_HOST'];
} else {
    //header('XXX: BASE_URL ALREADY SET');
}
/*
if ( !empty(getenv('CMP_AWS_S3_BUCKET')) ) 
{
    if ( empty(variable_get('s3fs_bucket')) ) 
    {
        variable_set( 's3fs_bucket',     getenv('CMP_AWS_S3_BUCKET') );
        variable_set( 'amazons3_bucket', getenv('CMP_AWS_S3_BUCKET') );
        if ( isset($GLOBALS['conf']) && isset($GLOBALS['conf']['s3fs_bucket']) )
        {
            $GLOBALS['conf']['s3fs_bucket'] = getenv('CMP_AWS_S3_BUCKET');
        }
    }
   
    if ( isset($_POST['s3fs_bucket']) && empty($_POST['s3fs_bucket']) )
    {
        $_POST['s3fs_bucket']    = getenv('CMP_AWS_S3_BUCKET');
        $_REQUEST['s3fs_bucket'] = getenv('CMP_AWS_S3_BUCKET');
    }
}*/


function cmp_misc_init() 
{
    drupal_add_js(drupal_get_path('module', 'cmp_misc') .'/js/global.js');
    drupal_add_css(drupal_get_path('module', 'cmp_misc') .'/global_fix.css');
}

function cmp_misc_menu() {
    $items = array();
    return $items;
}

/* Implements HOOK_user_login
 *
 * When a user successfully logs into the CMP/Data-Entry site, set a 
 * top-domain cookie. This cookie will be used to inform a child-site 
 * (when the user navigates to it), that this is an authenticated user
 * [with the CMP site]
 */
function cmp_misc_user_login($edit, $account) {

    error_log(
        "User {$account->name} has logged into the CMP, setting a cookie in this"
            ."user's browser to state they should be admin-links on child-sites."
    );

    /* I'll programtically detect the top-devel-domain here so this works on our 
    Stage environments */
    $hostnameParts = explode('.', $_SERVER['HTTP_HOST']);
    $topLevelDomainName = '.' . array_pop($hostnameParts); // .gov
    $topLevelDomainName = array_pop($hostnameParts) . $topLevelDomainName; // usa.gov

    // Set cookie saying this user is autheticate with the CMP
    $secondsInOneDay = 86400;
    setcookie (
        'cmp-authenticated', /* cookie name */
        'yes', /* cookie value */
        time()+$secondsInOneDay, /* cookie-expiry time */
        '/', /* cookie shall be available on all pages */
        $topLevelDomainName /* cookie shall be available on all usa.gov subdomains */
    );

    // Collect which roles this user has 
    $roles = array();
    if ( !empty($account->roles) && is_array($account->roles) && count($account->roles) > 0 ) {
        $roles = $account->roles;
    }

    // Set a cookie stating what roles this user has on the CMP
    $secondsInOneDay = 86400;
    setcookie (
        'cmp-roles', /* cookie name */
        implode(',', $roles), /* cookie value */
        time()+$secondsInOneDay, /* cookie-expiry time */
        '/', /* cookie shall be available on all pages */
        $topLevelDomainName /* cookie shall be available on all usa.gov subdomains */
    );

}

function _get_region_node_count_by_tid($tids) {
/*
| field_data_field_asset_order_bottom             |
| field_data_field_asset_order_carousel           |
| field_data_field_asset_order_content            |
| field_data_field_asset_order_menu               |
| field_data_field_asset_order_sidebar            |
 * */

    /*$sql_b = 'SELECT COUNT(*) FROM node n
        INNER JOIN field_data_field_asset_order_bottom t ON n.nid = t.field_asset_order_bottom_target_id
        WHERE t.entity_id IN (' . implode(',', $tids) . ') AND n.status = 1';
    $res_b = db_query($sql_b)->fetchField();

    $sql_car = 'SELECT COUNT(*) FROM node n
        INNER JOIN field_data_field_asset_order_carousel t ON n.nid = t.field_asset_order_carousel_target_id
        WHERE t.entity_id IN (' . implode(',', $tids) . ') AND n.status = 1';
    $res_car = db_query($sql_car)->fetchField();

    $sql_con = 'SELECT COUNT(*) FROM node n
        INNER JOIN field_data_field_asset_order_content t ON n.nid = t.field_asset_order_content_target_id
        WHERE t.entity_id IN (' . implode(',', $tids) . ') AND n.status = 1';
    $res_con = db_query($sql_con)->fetchField();

    $sql_m = 'SELECT COUNT(*) FROM node n
        INNER JOIN field_data_field_asset_order_menu t ON n.nid = t.field_asset_order_menu_target_id
        WHERE t.entity_id IN (' . implode(',', $tids) . ') AND n.status = 1';
    $res_m = db_query($sql_m)->fetchField();
*/
    $sql_s = 'SELECT field_asset_topic_taxonomy_tid FROM field_data_field_asset_topic_taxonomy t
        WHERE t.entity_id IN (' . implode(',', $tids) . ')';
    $res_s = db_query($sql_s)->fetchField();
   // if (!empty($res_s_))
    //return _get_node_count_by_tid(array($res_s));
    return $res_s;
}

function _get_node_count_by_tid($tids){

    $sql = 'SELECT COUNT(*) FROM node n
        INNER JOIN taxonomy_index t ON n.nid = t.nid
        WHERE t.tid IN (' . implode(',', $tids) . ') AND n.status = 1';

    $res = db_query($sql)->fetchField();

    return $res;
}

function _get_child_terms_count_by_tid($tid){

    $sql = 'SELECT COUNT(*) FROM taxonomy_term_hierarchy t  WHERE t.parent = ' . $tid;

    $res = db_query($sql)->fetchField();

    return $res;
}


function cmp_misc_views_api() {
    return array(
        'api' => 3,
        'path' => drupal_get_path('module', 'cmp_misc'),
        'template path' => drupal_get_path('module', 'cmp_misc') . '/templates',
    );
}

function cmp_misc_views_pre_execute(&$view){

    if ( $view->name === 'dump_nodes' || $view->name === 'dump_taxonomy' ) {
        $page = ( empty($view->args[0]) ? 0 : intval($view->args[0]) );
        $query = $view->build_info['query'];
        $query->range($page*1, 1);
    }
}

function cmp_misc_views_pre_render(&$view) {
    $i = 0;
    if ($view->name == "sites_taxonomy_report" && $view->current_display == "summarized_report_page") {
        foreach($view->result as $row){
            $nav_count = 0;
            $asset_count = 0;
            $asset_page_count = 0;
            $term = taxonomy_term_load($row->tid);

            // nav pages
            if (isset($term->field_also_include_on_nav_page['und']) && is_array($term->field_also_include_on_nav_page['und'])) {
                $nav_count = count($term->field_also_include_on_nav_page['und']);
            }

            // asset topics
            $asset_tids  = array();
            $topic_count = 0;
            if (isset($term->field_asset_topic_taxonomy['und']) && is_array($term->field_asset_topic_taxonomy['und'])) {
                $topic_count = count($term->field_asset_topic_taxonomy['und']);
                foreach(array_values($term->field_asset_topic_taxonomy['und']) as $tid) {
                    $asset_tids[] = $tid['tid'];
                }
                $asset_count = _get_node_count_by_tid($asset_tids);
            }

            // term_child page count
            $child_term_count =_get_child_terms_count_by_tid($row->tid);
            //$term_page_count = _get_node_count_by_tid(array($row->tid));
            //$page_count= $asset_count+$term_page_count;

            $new_title = $view->result[$i]->taxonomy_term_data_name . ' ( '
                . $child_term_count . ' Child Page' . (($child_term_count!=1)?'s':'') . ', '
                . $nav_count . ' Supplemental Nav Link'. (($nav_count!=1)?'s':'') . ', '
                . $asset_count . ' Asset' . (($asset_count!=1)?'s':'') . ', '
                . $topic_count . ' Subtopic' . (($topic_count!=1)?'s':'') . ' )';

            $view->result[$i]->taxonomy_term_data_name = $new_title;
            $i++;
        }
    }
    elseif( $view->name == "content_taxonomy_report" && $view->current_display == "content_tag_report") {
        $is_asset_topic = (isset($view->exposed_data)
            && is_array($view->exposed_data)
            && $view->exposed_data['machine_name'] == 'asset_topic_taxonomy')? TRUE : FALSE;

        $is_site_structure = (isset($view->exposed_data)
            && is_array($view->exposed_data)
            && $view->exposed_data['machine_name'] == 'site_strucutre_taxonomy')? TRUE : FALSE;


        $i=0;
        foreach($view->result as $row){

            $array_tids[]=$row->tid;
            $asset_count = _get_node_count_by_tid(array($row->tid));

            $child_topics = ($is_asset_topic || $is_site_structure) ? _get_child_terms_count_by_tid($row->tid) : 0;

            if ($is_site_structure) {
                // node should be counted differently it will look for regions
                // find asset topic which is assigned to field_data_field_asset_topic_taxonomy
                $asset_tid = _get_region_node_count_by_tid(array($row->tid));
                if (is_numeric($asset_tid)) {
                    $asset_count = _get_node_count_by_tid(array($asset_tid));
                }
            }

            $new_title = $view->result[$i]->taxonomy_term_data_name . ' ( '
                . $asset_count . ' Asset' . (($asset_count!=0)?'s':'')
                . ($is_asset_topic || $is_site_structure? (', ' . ($child_topics . ' Subtopic' . (($child_topics!=0)?'s':''))) : '')
                . ' )';

            $view->result[$i]->taxonomy_term_data_name = $new_title;
            $i++;
        }

    }
    elseif($view->name == 'overriden_content_report' && $view->current_display == 'overriden_content_report_page') {

        $new_result = array();
        foreach($view->result as $row) {
                if ($row->users_node_uid != $row->users_node_revision_uid
                    && $row->users_node_revision_uid != 0
                    && $row->users_node_uid != 0) {
                    $new_result[] = $row;
                }

        }
        $view->result = $new_result;
    }
}

function cmp_misc_form_views_exposed_form_alter(&$form, $form_state) {

    /*if ($form['#id'] == 'views-exposed-form-overriden-content-report-overriden-content-report-page') {
        $form['stamp']['min']['#date_format'] = 'm/d/Y';
        $form['stamp']['max']['#date_format'] = 'm/d/Y';
        dpm($form);
    }*/


}


/**
 * Has this node ever been published
 *
 * @param $node
 *   The node being queried.
 *
 * @return
 *   Boolean, True if any revision of this node had ever been published.
 */
/**/
function cmp_misc_node_ever_published($node) {
  global $user;

  if (isset($node->workbench_moderation) && !empty($node->workbench_moderation['published'])) {
    return true;
  }

  // Get the moderation history of this node.
  $query = db_select('workbench_moderation_node_history', 'm');
  $query->condition('m.nid', $node->nid)
        ->condition('m.state', 'published')
        ->fields('m',array('stamp'));

  $moderations = $query->execute()->rowCount();

  // Make sure it's an array.
  return !empty($moderations);
}
/**/


function cmp_misc_form_alter(&$form, &$form_state, $form_id) {
    
    // Disabel the user log-in form - force users to go through GSA-Secure-Auth
    if ( request_uri() !== '/user' ) {

        if ( $form_id === 'user_pass' || $form_id === 'user_pass_block' ) {
            $form = array();
            exit('Service disabled');
        }

        if ( $form_id === 'user_login' || $form_id === 'user_login_block' ) {
            if ( empty($_SERVER['HTTPS']) ) {
                @ob_end_clean();
                while(@ob_end_clean());
                header('Location: https://'.$_SERVER['HTTP_HOST']);
                drupal_add_http_header('Location', 'https://'.$_SERVER['HTTP_HOST']);
                exit();
            }
            unset($form['name']);
            unset($form['pass']);
            unset($form['actions']);
            unset($form['links']);
            unset($form['#submit']);
            drupal_add_js(
                "
                    jQuery(document).ready( function () {
                        jQuery('.saml-link a').text('Log in through GSA Secure-Auth');
                    });
                ",
                'inline'
            );
            drupal_add_css("ul.tabs.primary { display: none !important; }", "inline");
        }
    }
    
    // If this is the edit form for any node under the 'Text Asset' content-type
    //if ( $form_id === 'text_content_type_node_form' ) {

        if ( !empty($form['#node']->workbench_moderation) ) {

            global $user;
            $isAdmin = in_array('administrator', $user->roles);

            $workflowState = $form['#node']->workbench_moderation['current']->state;
            $canApproveDelete = user_access('moderate content from awaiting_deletion to deleted',$user);
            $everPublished = cmp_misc_node_ever_published($form['#node']);

            /// if isAdmin : delete button + perm option
            if ( $isAdmin ) { return; } /// admin can always see delete
            /// if !ever_published : delete button
            if ( !$everPublished ) { return; } /// anyone can see delete
            /// if  ever_published &&  awaiting_deletion && !(state:awaiting->deleted) : disabled delete button + message    
            if ( $workflowState=='awaiting_deletion' && !$canApproveDelete && !empty($form['actions']['delete']) ) 
            { /* awaiting deletion approval */ 
                $form['actions']['delete']['#value'] = 'Awaiting Deletion';
                $form['actions']['delete']['#type'] = 'button';
                unset($form['actions']['delete']['#submit']);
                $form['actions']['delete']['#attributes'] = array(
                    'style' => 'background-color: lightgray; color: gray; outline: 1px dashed gray;',
                    "onclick" => "return (false);"
                );
                return;
            }
            /// if  ever_published &&  awaiting_deletion &&  (state:awaiting->deleted) : approve soft delete button
            if ( $workflowState=='awaiting_deletion' &&  $canApproveDelete && !empty($form['actions']['delete']) ) 
            { /* approve deletion */ 
                $form['actions']['delete']['#value'] = 'Approve Deletion';
                return;
            }
            /// if  ever_published &&  deleted : show state
            if ( $workflowState=='deleted' && !empty($form['actions']['delete']) ) 
            {
                $form['actions']['delete']['#value'] = 'Already Deleted';
                $form['actions']['delete']['#type'] = 'button';
                unset($form['actions']['delete']['#submit']);
                $form['actions']['delete']['#attributes'] = array(
                    'style' => 'background-color: lightgray; color: gray; outline: 1px dashed gray;',
                    "onclick" => "return (false);"
                );
                return;
            }
            /*
            $disableDelBtn = false;
             If this user isn't allowed to hard-delete, disabel the delete button if the node is in the soft-delete process
            if ( !$isAdmin && ( $workflowState == 'deleted' || $workflowState == 'awaiting_deletion' ) ) {
                $disableDelBtn = true;
            }

            if ( $disableDelBtn ) {
                $form['actions']['delete']['#value'] = 'Already ' . str_replace('_', ' ', $workflowState);
                $form['actions']['delete']['#type'] = 'button';
                unset($form['actions']['delete']['#submit']);
                $form['actions']['delete']['#attributes'] = array(
                    'style' => 'background-color: lightgray; color: gray; outline: 1px dashed gray;',
                    "onclick" => "return (false);"
                );
            }
            */
        }
    //}
}


/**
* Implements hook_mail_alter
*/
function cmp_misc_mail_alter(&$message) {
    //Sanitize and decode HTML entities in email subject
    $message['headers']['Content-Type'] = "html/text; charset=UTF-8; format=flowed; delsp=yes";
}

/*
 * Implements HOOK_node_presave
 */
function cmp_misc_node_presave($node) {

    // Strip trailing empty <p> tags from text-asset body fields
    if ( $node->type == 'text_content_type' && !empty($node->body['und'][0]['value']) ) {
        while ( substr($node->body['und'][0]['value'], -13) === '<p>&nbsp;</p>' ) {
            $strLen = strlen($node->body['und'][0]['value']);
            $bodyVal = $node->body['und'][0]['value'];
            $node->body['und'][0]['value'] = substr($bodyVal, 0, $strLen - 13);
        }
    }

}

/*
 * Implements HOOK_node_insert
 *
 * Some node(s) have a field_workflow_state_search field, which we want to always contain the current workflow-status.
 * We use this field as an easy way to obtain the workflow information with the ElasticSearch mdoule...
 */
function cmp_misc_node_insert($node) {
    
        // Strip trailing empty <p> tags from text-asset body fields
    if ( $node->type == 'text_content_type' && !empty($node->body['und'][0]['value']) ) {
        while ( substr($node->body['und'][0]['value'], -13) === '<p>&nbsp;</p>' ) {
            $strLen = strlen($node->body['und'][0]['value']);
            $bodyVal = $node->body['und'][0]['value'];
            $node->body['und'][0]['value'] = substr($bodyVal, 0, $strLen - 13);
        }
    }

    // If this node is of a content-type that has the workflow_state_search field....
    if ( isset($node->field_workflow_state_search) ) {

        // and if this node is under use of the workbench_moderation/workflow module...
        if ( isset($node->field_workflow_state_search) || !empty($node->workbench_moderation_state_new) ) {
            
            // Get the current work-flow status
            if ( !empty($node->workbench_moderation_state_new) ) {
                $currentWorkFlowStatus = $node->workbench_moderation_state_new; // only exsists when value changed?
            } else {
                $currentWorkFlowStatus = $node->workbench_moderation['current']->state; // seems to contain old value when the work-flow changes
            }

            // then set the current workflow-status into the workflow_state_search field
            $node->field_workflow_state_search = array(
                'und' => array(
                    0 => array(
                        'value' => $currentWorkFlowStatus
                    )
                )
            );

            // Debug - for those of us who tail the error_log
            $myFunct = __FUNCTION__;
            error_log(
                "Notice: {$myFunct} has set the current workflow-status ({$currentWorkFlowStatus}) "
                ."into field_workflow_state_search for node {$node->nid} ({$node->title})"
            );
        }
    }

}

/*
 * Implements HOOK_node_update
 *
 * Some node(s) have a field_workflow_state_search field, which we want to always contain the current workflow-status.
 * We use this field as an easy way to obtain the workflow information with the ElasticSearch mdoule...
 */
function cmp_misc_node_update($node) {

    // If this node is of a content-type that has the workflow_state_search field....
    if ( isset($node->field_workflow_state_search) ) {

        // and if this node is under use of the workbench_moderation/workflow module...
        if ( isset($node->field_workflow_state_search) || !empty($node->workbench_moderation_state_new) ) {
            
            // Get the current work-flow status
            if ( !empty($node->workbench_moderation_state_new) ) {
                $currentWorkFlowStatus = $node->workbench_moderation_state_new; // only exsists when value changed?
            } else {
                $currentWorkFlowStatus = $node->workbench_moderation['current']->state; // seems to contain old value when the work-flow changes
            }

            // then set the current workflow-status into the workflow_state_search field
            $node->field_workflow_state_search = array(
                'und' => array(
                    0 => array(
                        'value' => $currentWorkFlowStatus
                    )
                )
            );

            // Debug - for those of us who tail the error_log
            $myFunct = __FUNCTION__;
            error_log(
                "Notice: {$myFunct} has set the current workflow-status ({$currentWorkFlowStatus}) "
                ."into field_workflow_state_search for node {$node->nid} ({$node->title})"
            );
        }
    }

}



function cmp_misc_entity_load($entities, $type) 
{
    if ( $type === 'file' ) 
    {
        foreach ( $entities as $theEntity ) 
        {
            if ( !isset($theEntity->type) && isset($theEntity->uri) && strpos($theEntity->uri, 's3://') === 0 ) 
            {
                $theEntity->type = 'image';
            }
        }
    }
    if ( $type === 'node' ) 
    {
        foreach ( $entities as $theEntity ) 
        {
            if ( $row = db_query("select deleted, deletion_uid, deletion_timestamp, uuid from {node} where {node}.nid = {$theEntity->nid}")->fetchAssoc() )
            {
                $theEntity->deleted            = empty($row['deleted']) ? 0 : 1;
                $theEntity->deletion_uid       = $row['deletion_uid'];
                $theEntity->deletion_timestamp = $row['deletion_timestamp'];
                $theEntity->uuid               = $row['uuid'];
            }
        }
    }
}

/*
 * Implementation of hook_cronapi
 */
function cmp_misc_cronapi($op, $job = NULL) {

    $items['cmp_misc_daily_content_scan_cron'] = array(
        'description' => 'Send email to owner about archival of content',
        'rule' => '*/5 * * * *', // Every day at 2am assume 0 2
        'callback' => '_cmp_misc_send_report',
    );

    $items['cmp_misc_archival_cron'] = array(
        'description' => 'Archiving Content',
        'rule' => '*/15 * * * *', // Every 15 minutes
        'callback' => '_cmp_misc_check_archived_content',
    );
    return $items;
}

function _cmp_misc_check_archived_content() {
    watchdog('cron',"STARTED >> ARCHIVING CONTENT: " . date('Y-m-d H:i:s'));
}

function _cmp_misc_get_expiring_nodes() {

    $expiring_date = strtotime(date('Y-m-d H:i:s') . ' -6 months');

    $sql = "SELECT n.nid, n.title FROM field_data_field_date_last_reviewed lr
        INNER JOIN node n ON n.nid = lr.entity_id
        WHERE n.status = 1 AND UNIX_TIMESTAMP(lr.field_date_last_reviewed_value) <= :start_date";
    $result = db_query($sql, array(':start_date'=>$expiring_date));
    $arr = array();
    foreach($result as $row) {
        $node = node_load($row->nid);

        if (isset($node->field_owner['und'][0]['target_id'])) {
            $user = user_load($node->field_owner['und'][0]['target_id']);
            $arr[$node->field_owner['und'][0]['target_id']]['nodes'][] = l($node->title, 'node/'. $node->nid);
            $arr[$node->field_owner['und'][0]['target_id']]['name'] = $user->name;
            $arr[$node->field_owner['und'][0]['target_id']]['mail'] = $user->mail;
        }
    }
    return $arr;

}

/**
 * Allows modules to respond to state transitions.
 *
 * @param $node
 *  The node that is being transitioned.
 *
 * @param $previous_state
 *  The state of the revision before the transition occurred.
 *
 * @param $new_state
 *  The new state of the revision.
 */
function cmp_misc_workbench_moderation_transition($node, $previous_state, $new_state)
{
    // needs approval >>> needs discussion
    if ($previous_state == 'needs_review' && $new_state == 'needs_discussion') {
        $node_vs = node_revision_list($node);
        $node_vs_index = array_keys($node_vs);
        //dsm($node_vs);
        global $user;
        $last_edited_node = $last_edited_user = '';
        if (count($node_vs) > 2) {

            // second revision will be always last person who touched
            for($i=0; $i<count($node_vs); $i++) {
                $tmp_node = $node_vs[$node_vs_index[$i]];

                if ($user->uid != $tmp_node->uid) {
                    $last_edited_node = $node_vs[$node_vs_index[$i]];
                    $last_edited_user = user_load($last_edited_node->uid);
                    break;
                }
            }

            if ($last_edited_node != '' && $last_edited_user != '')  {
                $current_node = $node_vs[$node_vs_index[0]];
                $current_user = user_load($current_node->uid);
                _cmp_misc_send_last_edited_person($last_edited_user, $node);
            }
        }
    }

    // needs approval  from different state
    if ($previous_state != 'needs_review' && $new_state == 'needs_review') {
        _cmp_misc_send_needs_approval_notice_person( $node);
    }
}
function _cmp_misc_send_needs_approval_notice_person( $node) {

    if (isset( $node->field_workflow_notification_emai['und'][0]['value'])) {
        $to = $node->field_workflow_notification_emai['und'][0]['value'];
        global $user;

        // Subject
        $params['subject'] = "Approval Needed :" . $node->title;

        $alias = drupal_get_path_alias('node/' . $node->nid);
        // body
        $params['body'] = '<b>Content item needs approval </b> - <a href="' . $alias . '">' . $node->title . '</a> <br/>';
        $params['body'] .= '<b>Summary</b> - ' . $node->field_description['und'][0]['value'] . ' <br/>';
        $params['body'] .= '<b>User who requested review</b> - ' . $user->name . '<br/>';
        $params['body'] .= '<b>Last updated on </b>' . date('Y-m-d - H:i');

        $from = variable_get('site_mail', '');

        $params['from'] = trim(mime_header_encode(variable_get('site_name', "CMP USA.gov")) . ' <' . $from . '>');
        $params['headers']['Reply-To'] = trim(mime_header_encode(variable_get('site_name', "CMP USA.gov")) . ' <' . variable_get('site_mail', '') . '>');

        $res = drupal_mail('cmp_misc', 'scanning_content', trim($to), language_default(), $params, $params['from']);

        if ($res["send"]) {
            drupal_set_message("Approval notification email has been sent." . $to);
        }
    }
}

function _cmp_misc_send_last_edited_person($user_to_send, $node) {
    $to = $user_to_send->mail;
    global $user;

    // Subject
    $params['subject'] = "Discussion Needed :".$node->title;

    $alias = drupal_get_path_alias('node/'.$node->nid);
    // body
    $params['body'] = '<b>Content item needs discussion</b> - <a href="' . $alias . '">' . $node->title . '</a> <br/>';
    $params['body'] .= '<b>Summary</b> - ' . $node->field_description['und'][0]['value'] . ' <br/>';
    $params['body'] .= '<b>User who requested discussion</b> - '. $user->name . '<br/>';
    $params['body'] .= '<b>Last updated on </b>' . date('Y-m-d - H:i');

    $from = variable_get('site_mail', '');

    $params['from'] = trim(mime_header_encode(variable_get('site_name', "CMP USA.gov")) . ' <' . $from . '>');
    $params['headers']['Reply-To'] = trim(mime_header_encode(variable_get('site_name', "CMP USA.gov")) . ' <' . variable_get('site_mail', '') . '>');

    $res = drupal_mail('cmp_misc', 'scanning_content', trim($to), language_default(), $params, $params['from']);

    if ($res["send"]) {
        drupal_set_message("Person who last revision created is " . $user_to_send->name . ". Notification email has been sent." . $to);
    }
}

function _cmp_misc_send_report() {

    watchdog('cron',"STARTED >> DAILY SCANNING CONTENT: " . date('Y-m-d H:i:s'));

    $ret = _cmp_misc_get_expiring_nodes();
    $subject = "CMP Content Scan Result: " . date('Y-m-d H:i:s');
    $res = "";

    foreach($ret as $t =>$k) {
        $to = $k['mail'] .', ariun2006@gmail.com';
        $body="Dear " . $k['name'] . ", <br />You have the following content that has not been reviewed for more than 6 months: <br/>";
        $body .= "<ul>";

        foreach($k['nodes'] as $node_link) {
            $body .= '<li>' . $node_link . '</li>';
        }

        $body .= "</ul>";

        // Subject
        $params['subject'] = $subject;

        // body
        $params['body'] = $body;


        $from = variable_get('forward_sender_address', '');
        if (empty($from)) {
            $from = variable_get('site_mail', '');
        }

        $params['from'] = trim(mime_header_encode(variable_get('site_name', "CMP USA.gov")) . ' <' . $from . '>');
        $params['headers']['Reply-To'] = trim(mime_header_encode(variable_get('site_name', "CMP USA.gov")) . ' <' . variable_get('site_mail', '') . '>');

        $res = drupal_mail('cmp_misc', 'scanning_content', trim($to), language_default(), $params, $params['from']);
        if ($res["send"]) {
            watchdog("cron", "DAILY SCANNING CONTENT SENT AN EMAIL TO " . $to . date('Y-m-d H:i:s'));
        }
        else {
            watchdog("cron", "DAILY SCANNING CONTENT ERROR OCCURRED ". $res["result"]);
        }
        // Flood control
        flood_register_event('cmp_misc');
    }

    watchdog('cron',"FINISHED >> DAILY SCANNING CONTENT: ". date('Y-m-d H:i:s'));

    return $res;
}
function cmp_misc_mail($key, &$message, $params) {
    $language = $message['language'];
    if ($key == 'scanning_content') {
        $message['headers']['MIME-Version'] = '1.0';
        $message['headers']['Content-Type'] = 'text/html; charset=utf-8';
        $message['headers']['Reply-To'] = $params['headers']['Reply-To'];

        $message['subject']=t($params['subject']);
        $message['body'][]=$params['body'];
        $message['headers']['Content-Type'] = 'text/html; charset=UTF-8; format=flowed';
    }
}

class Cmp_miscMailSystem implements MailSystemInterface {
    /**
     * Concatenate and wrap the e-mail body for plain-text mails.
     *
     * @param $message
     *   A message array, as described in hook_mail_alter().
     *
     * @return
     *   The formatted $message.
     */
    public function format(array $message) {
        $message['body'] = implode("\n\n", $message['body']);
        return $message;
    }

    /**
     * Send an e-mail message, using Drupal variables and default settings.
     *
     * @see http://php.net/manual/en/function.mail.php
     * @see drupal_mail()
     *
     * @param $message
     *   A message array, as described in hook_mail_alter().
     * @return
     *   TRUE if the mail was successfully accepted, otherwise FALSE.
     */
    public function mail(array $message) {
        $mimeheaders = array();
        foreach ($message['headers'] as $name => $value) {
            $mimeheaders[] = $name . ': ' . mime_header_encode($value);
        }
        $line_endings = variable_get('mail_line_endings', MAIL_LINE_ENDINGS);
        return mail(
            $message['to'],
            mime_header_encode($message['subject']),
            // Note: e-mail uses CRLF for line-endings. PHP's API requires LF
            // on Unix and CRLF on Windows. Drupal automatically guesses the
            // line-ending format appropriate for your system. If you need to
            // override this, adjust $conf['mail_line_endings'] in settings.php.
            preg_replace('@\r?\n@', $line_endings, $message['body']),
            // For headers, PHP's API suggests that we use CRLF normally,
            // but some MTAs incorrectly replace LF with CRLF. See #234403.
            join("\n", $mimeheaders)
        );
    }
}




