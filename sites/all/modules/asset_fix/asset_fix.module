<?php

/*
 * Implements HOOK_menu()
 */
function asset_fix_menu() {

    $items = array();
    
    // Configuration page
    $items['admin/content/asset-fix'] = array(
        'title' => 'Convert HTML-Assets to Text-Assets',
        'description' => 'Run the HTML-Assets-to-Text-Assets conversion script',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('asset_fix_form'),
        'access arguments' => array('access administration pages'),
        'type' => MENU_NORMAL_ITEM
    );

    // Log-callback page (returns the Asset-Fix log)
    $items['admin/content/asset-fix-log'] = array(
        'title' => 'asset-fix-log',
        'description' => 'Returns the asset-fix-log',
        'page callback' => 'asset_fix_returnLog',
        'access arguments' => array(true),
        'type' => MENU_CALLBACK
    );

    // asset-fix script-trigger
    $items['admin/content/asset-fix-trigger'] = array(
        'title' => 'asset-fix-trigger',
        'description' => 'Triggers the asset-fix script',
        'page callback' => 'asset_fix_runScript',
        'access arguments' => array(true),
        'type' => MENU_CALLBACK
    );

    return $items;
}

function asset_fix_form() {

    $form = array();

    if ( !file_exists('sites/default/files/asset-fix.log') ) {
        file_put_contents('sites/default/files/asset-fix.log', '');
    }
    $logSize = filesize('sites/default/files/asset-fix.log');

    $form['assetfix'] = array(
        '#markup' => '
            <script>
                function triggerScript() {
                    jQuery("div.script-ui a").hide();
                    jQuery("div.log-ui").show();
                    jQuery("div.log-ui iframe").attr("src", "/admin/content/asset-fix-log?offset=' . $logSize . '");
                    jQuery.get("/admin/content/asset-fix-trigger", function () {
                        clearInterval(scriptTimer);
                        alert("Asset-Fix script has completed!");
                        setTimeout( function () {
                            jQuery("iframe").get(0).contentDocument.location.reload();
                        }, 1500);
                    });
                    scriptTimer = setInterval( function () {
                        jQuery("iframe").get(0).contentDocument.location.reload();
                    }, 3000);
                }
            </script>
            <style>
                .log-ui {
                    display: none;
                }
                .log-ui iframe {
                    width: 100%;
                    min-height: 500px;
                    border: 1px solid gray;
                }
            </style>
            <div class="script-ui">
                <a href="#" onclick="triggerScript()">
                    Click here to run the HTML-Assets-to-Text-Assets conversion script
                </a>
                <div class="log-ui">
                    <b>Log:</b><br/>
                    <iframe></iframe>
                </div>
            </div>
        ',
    );

    return $form;
}

function asset_fix_returnLog() {

    $offset = 0;
    if ( !empty($_REQUEST['offset']) ) {
        $offset = intval($_REQUEST['offset']);
    }

    @ob_end_clean();
    while ( @ob_end_clean() );

    print file_get_contents('sites/default/files/asset-fix.log', false, null, $offset);
    print "
        <script>
            window.scrollTo(0, 700000);
            setTimeout( function () {
                window.scrollTo(0, 700000);
            }, 100);
        </script>
    ";

    exit();
}

function asset_fix_runScript() {

    $logPath = 'sites/default/files/asset-fix.log';

    $countTextAssetsCreated = 0;
    $countHmtlAssetRefsRemoved = 0;

    $results = db_query("SELECT nid, title FROM node WHERE node.type='html_content_type' ");
    foreach ( $results as $result ) {

        set_time_limit(500);

        $htmlAssetNid = $result->nid;
        $htmlAssetTitle = $result->title;

        $htmlAssetLink = "<a href=\"/node/{$htmlAssetNid}/edit\">{$htmlAssetNid}</a>";
        $log = "<br/>Trying to convert HTML-Asset {$htmlAssetLink} (\"{$htmlAssetTitle}\")<br/>";
        file_put_contents($logPath, $log, FILE_APPEND);
        $textAssets = parseHtmlAsset($htmlAssetNid);

        if ( $textAssets === false ) {
            file_put_contents($logPath, "<small>Could not convert HTML-Asset {$htmlAssetNid} to a text-asset</small><br/>", FILE_APPEND);
        } else {

            $sstra = findSiteStructTermsThatReferenceAsset($htmlAssetNid);
            if ( count($sstra) === 0 || $sstra === false ) {
                file_put_contents($logPath, "<small>Skipping, as there are no Site-Structure taxonomy-terms that reference this HTML-Asset.</small><br/>", FILE_APPEND);
                continue;
            }

            file_put_contents($logPath, "Creating ".count($textAssets)." text-assets derrived from HTML-Asset {$htmlAssetLink} by use of the {$textAssets[0]['parse-function-used']}() parsing-function... ", FILE_APPEND);
            $newTextAssetNids = createTextAssets($textAssets);
            $countTextAssetsCreated += count($textAssets);

            file_put_contents($logPath, "...done. Created [text-asset] nid(s): ", FILE_APPEND);
            foreach ($newTextAssetNids as $newTextAssetNid) {
                file_put_contents($logPath, "<a href=\"/node/{$newTextAssetNid}/edit\" target=\"_blank\">{$newTextAssetNid}</a>, ", FILE_APPEND);
            }
            file_put_contents($logPath, "<br/>", FILE_APPEND);

            $rRet = replaceHtmlRefWithTextAssetRef($htmlAssetNid, $newTextAssetNids);
            foreach ( $rRet as $ssTaxTermTid => $info ) {
                $ssTaxTermLink = "<a target=\"_blank\" href=\"/taxonomy/term/{$ssTaxTermTid}/edit\">{$ssTaxTermTid}</a>";
                $log = "Replaced reference to HTML-Asset ({$htmlAssetNid}) in Site-Structure taxonomy-term {$ssTaxTermLink} with the new text-asset(s)";
                file_put_contents($logPath, $log."<br/>", FILE_APPEND);
                $countHmtlAssetRefsRemoved++;
            }

        }

    }

    // We're done!
    file_put_contents(
        $logPath, 
        "<h1><b>".__FUNCTION__."() has finished!</h1>A total of <b>{$countTextAssetsCreated}</b> new text-assets we're "
            ."created. And a total of <b>{$countHmtlAssetRefsRemoved}</b> HTML-Assets-references were removed.<br/>", 
        FILE_APPEND
    );

}

/*
 * array replaceHtmlRefWithTextAssetRef(int $htmlTextAssetNID, array $textAssetsNIDs)
 *
 * Finds all Site-Structure taxonomy terms that reference a $htmlTextAssetNID, removes that
 * reference, and injects the given text-asset textAssetsNIDs in its place.
 * Returns an array of term-ids that were touched.
 */
function replaceHtmlRefWithTextAssetRef($htmlTextAssetNID, $textAssetsNIDs) {

    $ret = array();

    $termIds = findSiteStructTermsThatReferenceAsset($htmlTextAssetNID);

    foreach ( $termIds as $tid ) {

        // Dont time out the script
        set_time_limit(500);
        error_log($tid);

        // Load this Site-Structure term
        $term = taxonomy_term_load($tid);

        // This is a list of fields that can reference an HTML-Asset within a Site-Structure taxonomy-term
        $htmlRefFields = array(
            'field_asset_order_carousel',
            'field_asset_order_content',
            'field_asset_order_sidebar',
            'field_asset_order_bottom',
        );

        // Search and replace any reference to the $htmlTextAssetNID node with $textAssetsNIDs
        foreach ($htmlRefFields as $field) {

            // If this field is not empty...
            if ( empty($term->{$field}) ) {
                continue;
            }
            if ( !is_array($term->{$field}) ) {
                continue;
            }
            if ( count($term->{$field}) === 0 ) {
                continue;
            }
            if ( !isset($term->{$field}['und']) ) {
                continue;
            }
            if ( !is_array($term->{$field}['und']) ) {
                continue;
            }
            if ( count($term->{$field}['und']) === 0 ) {
                continue;
            }

            // Convert the reference array into a comma-seperated string
            $strRefs = '';
            foreach ($term->{$field}['und'] as $valueContainer) {
                $strRefs .= ',' . $valueContainer['target_id'];
            }

            // Now we'll use string-replace to replace any $htmlTextAssetNID-ref to the $textAssetsNIDs-ref(s)
            $strTextAssetsNIDs = ',' . implode(',', $textAssetsNIDs);
            $strNewRefList = str_replace(','.$htmlTextAssetNID, $strTextAssetsNIDs, $strRefs);

            // Skip this loop-iteration if nothing was changed (if there is no reference to $htmlTextAssetNID in this field)
            if ( $strNewRefList == $strRefs ) {
                continue;
            }

            // Now place the [altered] references back into array form, and into the [Drupal] term-object
            $strNewRefList = ltrim($strNewRefList, ',');
            $arrRefs = array();
            foreach ( explode(',', $strNewRefList) as $nidReference) {
                $arrRefs[] = array(
                    'target_id' => $nidReference
                );
            }
            $term->{$field}['und'] = $arrRefs;

            // When this function returns, report that this field was toched in this taxonomy-term
            if ( !isset($ret[$term->tid]) ) {
                $ret[$term->tid] = array();
            }
            $ret[$term->tid][$field] = array(
                'term reference-list was' => ltrim($strRefs, ','),
                'term reference-list is now' => ltrim($strNewRefList, ','),
            );
        }

        // Save updates to this Site-Structure term
        taxonomy_term_save($term);
    }

    return $ret;
}

/*
 * array findSiteStructTermsThatReferenceAsset(int $htmlAssetNid)
 *
 * Searches MySQL to find all taxonomy terms that reference 
 * $htmlAssetNid in any of the "Asset Placement" fields.
 * Returns an array of term-ids.
 */
function findSiteStructTermsThatReferenceAsset($htmlAssetNid) {

    $ret = array();

    // Tables to search
    $tables = array(
        "field_data_field_asset_order_carousel",
        "field_data_field_asset_order_content",
        "field_data_field_asset_order_sidebar",
        "field_data_field_asset_order_bottom",
    );

    foreach ( $tables as $table ) {
        $valueColumn = str_replace('field_data_', '', $table);
        $results = db_query("SELECT entity_id FROM {$table} WHERE {$valueColumn}_target_id={$htmlAssetNid}");
        foreach ( $results as $result ) {
            $nid = $result->entity_id;
            $ret[$nid] = $nid;
        }
    }

    return array_values($ret);
}

function createTextAssets($arrTextAssets) {

    $ret = array();

    // For each individual text asset
    foreach ( $arrTextAssets as $textAssetData ) {

        // Create this new text-asset, add the new node-id to the return buffer
        $ret[] = createTextAsset($textAssetData);
    }

    // Return an array of nids (node-IDs) that were created
    return $ret;
}

function createTextAsset($textAssetData) {

    // Load the HTML-Asset this Text-Asset is based on - we will steal field [values] from it
    $sourceHtmlAsset = node_load( $textAssetData['based-on-nid'] );

    // Make sure the body value does not contains disallowed tags
    $bodyValue = strip_tags($textAssetData['text-content'], '<a><strong><ul><ol><li><p><h3><h4><br>');
    $bodyValue = str_replace('Â', '', $bodyValue);

    // Build a new Drupal node
    $node = (object) array(
        "title" => $textAssetData['text-title'],
        "log" => "Created by HTML-Asset fix-script, generated based on HTML-Asset {$sourceHtmlAsset->nid}",
        "status" => 1,
        "promote" => 0,
        "type" => "text_content_type",
        "language" => "en",
        "translate" => 0,
        "body" => array(
            "und" => array(
                0 => array(
                    "value" => $bodyValue,
                    "summary" => null,
                    "format" => 'filtered_html',
                    "safe_value" => $bodyValue,
                    "safe_summary" => '',
                )
            )
        ),
        "field_priority" => array(
            "und" => array(
                0 => array(
                    "value" => "normal"
                )
            )
        ),
        "field_language" => array(
            "und" => array(
                0 => array(
                    "value" => "English"
                )
            )
        ),
        "field_asset_topic_taxonomy" => $sourceHtmlAsset->field_asset_topic_taxonomy,
        "field_owner" => $sourceHtmlAsset->field_owner,
        "field_notify_marketing_team" => $sourceHtmlAsset->field_notify_marketing_team,
        "field_for_use_by" => $sourceHtmlAsset->field_for_use_by,
    );

    // Save the node
    node_save($node);

    // Triggering node_save should have added a nid field onto $node... unless there was a filure.
    if ( empty($node->nid) ) {
        @ob_end_clean(); @ob_end_clean(); @ob_end_clean(); 
        print 'Criticall Error - '.__FUNCTION__.' failed to create a text-asset: ';
        print_r($textAssetData);
        exit();
    }

    // Return the node-id of the new save entity
    return $node->nid;
}

/* 
 * array parseHtmlAsset(int $nid)
 *
 * Fires each parseHtmlAsset_* function agasint the given node[-id] untill one of 
 * them returns text-assets to replace the given HTML-Asset with. Returns FALSE 
 * when none of the parser functions can parse the HTML-Assets into text-asset(s)
 */
function parseHtmlAsset($HtmlAssetNid) {

    $ret = false;

    /* Set a global flag, telling the "USA Taxonomy Man" moduel to not rebuild the 
    menu (triggered based on hooks) */
    global $utm_norun;
    $utm_norun = true;

    // Load the HTML asset
    $HtmlAssetNode = node_load($HtmlAssetNid);
    if ( $HtmlAssetNode === false ) {
        return false;
    }

    // Get the HTML within this HTML-asset
    if ( !isset($HtmlAssetNode->field_html['und'][0]['value']) ) {
        return false;
    }
    $html = $HtmlAssetNode->field_html['und'][0]['value'];
    //print("<textarea>{$html}</textarea>");

    /* We will use the following functions (defined in this module) to parse HTML-Assets.
    These functions will return FALSE if they cannot parse a given HTML-Asset, and return 
    [an array of] text-assets information if the given is parsable. */
    $parsingFunctions = array(
        'parseHtmlAsset_singleUlExclusive',
        'parseHtmlAsset_singleUlWithH1Title',
        'parseHtmlAsset_doubleUlWithIndex',
        'parseHtmlAsset_doubleUlWithIndexAndH2Titles',
        'parseHtmlAsset_quadUlWithIndex',
        'parseHtmlAsset_UlsWithNoIndex',
        'parseHtmlAsset_UlsWithNoIndexMoreTopicsPage',
        'parseHtmlAsset_DblUlsWithNoIndex',
    );

    // This [parser] function MUST be called FIRST before any of the others
    parseHtmlAsset_seeThisOnOtherSite($html, $HtmlAssetNode);
    print "<textarea>{$html}</textarea>";

    // For each parseHtmlAsset_* function (defined in this module/file)
    foreach ( $parsingFunctions as $parsingFunction ) {

        // Call one of the parseHtmlAsset_* functions
        $ret = call_user_func($parsingFunction, $html, $HtmlAssetNode);

        /* If the call to the previous parseHtmlAsset_~ function returned an array, then 
        we have text asset(s) to replace the given HTML-Asset with */
        if ( $ret !== false ) {

            foreach ($ret as &$retTextAsset) {

                // Note which parse-function was used to convert this HTML-Asset to text
                $retTextAsset['parse-function-used'] = $parsingFunction;
            }

            // Break out of loop since we are done here (we have text-asset information)
            break;
        }

    }

    return $ret;
}

/* 
 * bool(false) parseHtmlAsset_seeThisOnOtherSite(string &$html, object $HtmlAssetNode)
 *
 * One of the functions used by parseHtmlAsset() to try to parse an HTML-Asset.
 *
 * This is a special function used by parseHtmlAsset() to try to parse HTML-Assets...
 *
 * This function will find "See this on USA.gov" [like]-links and remove them from 
 * the by-reference $html string, allowing other parseHtmlAsset_* functions to 
 * parse the given HTML-Asset's HTML-string more easily.
 *
 * Examples of HTML-Assets like this:
 *  http://kids.usa.gov/parents/exercise-fitness-nutrition/index.shtml
 *  http://kids.usa.gov/teachers/exercise-fitness-nutrition/index.shtml
 */
function parseHtmlAsset_seeThisOnOtherSite(&$html, $HtmlAssetNode) {

    // Prepare to parse HTML and run XPath queries
    $doc = new DOMDocument();
    $doc->loadHTML($html);
    $xpath = new DOMXPath($doc);

    // Verify our expectations - 1 div.feeds, atleast 1 a>img
    if ( $xpath->query('//div[@class="feeds clearfix"]')->length === 0 ) {
        return false;
    }
    if ( $xpath->query('//a/img')->length === 0 ) {
        //error_log('ul, ' . $xpath->query('//ul')->length);
        return false;
    }

    // Pull toggle URLs from the anchors in the div.feeds
    $links = $xpath->query('//div[@class="feeds clearfix"]//a');
    $toggleLinkUSA = false;
    $toggleLinkGobiernousa = false;
    foreach ( $links as $link ) {
        $href = $link->getAttribute('href');
        if ( strpos($href, 'http://www.usa.gov/') !== false ) {
            if ( strpos($href, 'gobiernousa') === false ) {
                $toggleLinkUSA = $href;
            } else {
                $toggleLinkGobiernousa = $href;
            }
        }
    }

    // If we have information to set in the toggle-link field for this page (Site-Structure taxonomy-term)...
    if ( $toggleLinkUSA !== false || $toggleLinkGobiernousa !== false ) {
        
        // Find all Site-Structure taxononmy-terms that reference this HTML-Asset
        $tids = findSiteStructTermsThatReferenceAsset($HtmlAssetNode->nid);

        // For each related Site-Structure taxonomy-term...
        foreach ( $tids as $tid ) {
            $term = taxonomy_term_load($tid);

            if ( $toggleLinkUSA !== false ) {
                $term->field_usa_gov_toggle_url = array(
                    'und' => array(
                        0 => array(
                            'value' => $toggleLinkUSA,
                            'format' => null,
                            'safe_value' => $toggleLinkUSA,
                        )
                    )
                );
            }

            if ( $toggleLinkGobiernousa !== false ) {
                $term->field_gobiernousa_gov_toggle_url = array(
                    'und' => array(
                        0 => array(
                            'value' => $toggleLinkGobiernousa,
                            'format' => null,
                            'safe_value' => $toggleLinkGobiernousa,
                        )
                    )
                );
            }

            taxonomy_term_save($term);
        }
    }

    // Remove div.feeds from the by-ref &$html string, allowing other parse-functions to parse more easily
    $delNode = $xpath->query('//div[@class="rxbodyfield"]')->item(0);
    $delNode->parentNode->removeChild($delNode);
    $newHTML = $doc->saveHTML( $xpath->query('//body')->item(0) );
    $newHTML = str_replace('<body>', '', $newHTML);
    $newHTML = str_replace('</body>', '', $newHTML);
    $html = $newHTML;

    /* Always return false (to follow the convention to say; "I cannot derrive a text 
    asset, continue to the next parseHtmlAsset_* function") */
    return false;
}

/* 
 * array parseHtmlAsset_singleUlExclusive(string $html, object $HtmlAssetNode)
 *
 * One of the functions used by parseHtmlAsset() to try to parse an HTML-Asset.
 *
 * This functions handel parsing an HTML asset with nothing but a single UL
 * Examples of HTML-Assets like this:
 *  http://kids.usa.gov/math/index.shtml
 *  http://kids.usa.gov/teens/play-games/exercise-fitness-and-nutrition/index.shtml
 *  http://kids.usa.gov/teens/play-games/health-and-safety/index.shtml
 */
function parseHtmlAsset_singleUlExclusive($html, $HtmlAssetNode) {

    $ret = array();

    // Prepare to parse HTML and run XPath queries
    $doc = new DOMDocument();
    $doc->loadHTML($html);
    $xpath = new DOMXPath($doc);

    // Verify our expectations - only 1 UL, no H*s, and 1 div.rxbodyfield, and no images
    if ( $xpath->query('//ul')->length !== 1 ) {
        //error_log('ul, ' . $xpath->query('//ul')->length);
        return false;
    }
    if ( $xpath->query('//h1')->length !== 0 ) {
        //error_log('H1');
        return false;
    }
    if ( $xpath->query('//h2')->length !== 0 ) {
        //error_log('H2');
        return false;
    }
    if ( $xpath->query('//h3')->length !== 0 ) {
        //error_log('H3');
        return false;
    }
    if ( $xpath->query('//div[@class="rxbodyfield"]')->length !== 1 ) {
        //error_log('div');
        return false;
    }
    if ( $xpath->query('//img')->length !== 0 ) {
        //error_log('img');
        return false;
    }   

    // Grab the HTML within the [first] div
    $ret['text-title'] = $HtmlAssetNode->title; 
    $ret['text-content'] = $doc->saveHTML( $xpath->query('//ul')->item(0) );
    $ret['based-on-nid'] = $HtmlAssetNode->nid;

    return array($ret);
}

/* 
 * array parseHtmlAsset_singleUlWithH1Title(string $html, object $HtmlAssetNode)
 *
 * One of the functions used by parseHtmlAsset() to try to parse an HTML-Asset.
 *
 * This functions handel parsing an HTML asset with nothing but a single UL
 * Examples of HTML-Assets like this:
 *  
 *  
 *  
 */
function parseHtmlAsset_singleUlWithH1Title($html, $HtmlAssetNode) {

    $ret = array();

    // Prepare to parse HTML and run XPath queries
    $doc = new DOMDocument();
    $doc->loadHTML($html);
    $xpath = new DOMXPath($doc);

    // Verify our expectations - only 1 UL, no H*s, and 1 div.rxbodyfield, and no images
    if ( $xpath->query('//ul')->length !== 1 ) {
        //error_log('ul, ' . $xpath->query('//ul')->length);
        return false;
    }
    if ( $xpath->query('//h1')->length !== 1 ) {
        //error_log('H1');
        return false;
    }
    if ( $xpath->query('//h2')->length !== 0 ) {
        //error_log('H2');
        return false;
    }
    if ( $xpath->query('//h3')->length !== 0 ) {
        //error_log('H3');
        return false;
    }
    if ( $xpath->query('//div[@class="rxbodyfield"]')->length !== 2 ) {
        //error_log('div');
        return false;
    }
    if ( $xpath->query('//img')->length !== 0 ) {
        //error_log('img');
        return false;
    }   

    // Grab the HTML within the [first] div
    $ret['text-title'] = trim($xpath->query('//h1')->item(0)->nodeValue);
    $ret['text-content'] = $doc->saveHTML( $xpath->query('//ul')->item(0) );
    $ret['based-on-nid'] = $HtmlAssetNode->nid;

    return array($ret);
}

/* 
 * array parseHtmlAsset_doubleUlWithIndex(string $html, object $HtmlAssetNode)
 *
 * One of the functions used by parseHtmlAsset() to try to parse an HTML-Asset.
 *
 * This functions handel parsing an HTML asset with 2 ULs and an Index ("Hop Links") in it
 * Examples of HTML-Assets like this:
 *  http://kids.usa.gov/art-and-music/index.shtml
 *  http://kids.usa.gov/play-games/science/index.shtml
 */
function parseHtmlAsset_doubleUlWithIndex($html, $HtmlAssetNode) {

    $ret = array();

    // Prepare to parse HTML and run XPath queries
    $doc = new DOMDocument();
    $doc->loadHTML($html);
    $xpath = new DOMXPath($doc);

    // Verify our expectations - 4 ULs, 3 H2s (first is "Find on this page"), a div.frth_columnbox_container, and no images
    if ( $xpath->query('//ul')->length !== 4 ) {
        //error_log('ul, ' . $xpath->query('//ul')->length);
        return false;
    }
    if ( $xpath->query('//h2')->length !== 3 ) {
        //error_log('ul, ' . $xpath->query('//ul')->length);
        return false;
    }
    if ( trim($xpath->query('//h2')->item(0)->nodeValue) !== 'Find on This Page' ) {
        //error_log('No "Find on This Page" ');
        return false;
    }
    if ( $xpath->query('//div[@class="frth_columnbox_container"]')->length !== 1 ) {
        //error_log('div');
        return false;
    }
    if ( $xpath->query('//img')->length !== 0 ) {
        //error_log('img');
        return false;
    }

    // Return 2 text-assets
    return array(
        array(
            'text-title' => trim($xpath->query('//h2')->item(1)->nodeValue),
            'text-content' => $doc->saveHTML( $xpath->query('//ul')->item(2) ),
            'based-on-nid' => $HtmlAssetNode->nid,
        ),
        array(
            'text-title' => trim($xpath->query('//h2')->item(2)->nodeValue),
            'text-content' => $doc->saveHTML( $xpath->query('//ul')->item(3) ),
            'based-on-nid' => $HtmlAssetNode->nid,
        ),
    );

}

/* 
 * array parseHtmlAsset_doubleUlWithIndexAndH2Titles(string $html, object $HtmlAssetNode)
 *
 * One of the functions used by parseHtmlAsset() to try to parse an HTML-Asset.
 *
 * This function is the same as parseHtmlAsset_doubleUlWithIndex() but handels the 
 * situation where all but the first title are H2s.
 *
 * Examples of HTML-Assets like this:
 *  
 *  
 */
function parseHtmlAsset_doubleUlWithIndexAndH2Titles($html, $HtmlAssetNode) {

    $ret = array();

    // Prepare to parse HTML and run XPath queries
    $doc = new DOMDocument();
    $doc->loadHTML($html);
    $xpath = new DOMXPath($doc);

    // Verify our expectations - 4 ULs, 2 H2s, 1 H2s (first is "Find on this page"), a div.frth_columnbox_container, and no images
    if ( $xpath->query('//ul')->length !== 4 ) {
        //error_log('ul, ' . $xpath->query('//ul')->length);
        return false;
    }
    if ( $xpath->query('//h1')->length !== 2 ) {
        //error_log('h1, ' . $xpath->query('//h1')->length);
        return false;
    }
    if ( $xpath->query('//h2')->length !== 1 ) {
        //error_log('h2, ' . $xpath->query('//h2')->length);
        return false;
    }
    if ( trim($xpath->query('//h2')->item(0)->nodeValue) !== 'Find on This Page' ) {
        //error_log('No "Find on This Page" ');
        return false;
    }
    if ( $xpath->query('//div[@class="frth_columnbox_container"]')->length !== 1 ) {
        //error_log('div');
        return false;
    }
    if ( $xpath->query('//img')->length !== 0 ) {
        //error_log('img');
        return false;
    }

    // Return 2 text-assets
    return array(
        array(
            'text-title' => trim($xpath->query('//h1')->item(0)->nodeValue),
            'text-content' => $doc->saveHTML( $xpath->query('//ul')->item(2) ),
            'based-on-nid' => $HtmlAssetNode->nid,
        ),
        array(
            'text-title' => trim($xpath->query('//h1')->item(1)->nodeValue),
            'text-content' => $doc->saveHTML( $xpath->query('//ul')->item(3) ),
            'based-on-nid' => $HtmlAssetNode->nid,
        ),
    );

}

/* 
 * array parseHtmlAsset_DblUlsWithNoIndex(string $html, object $HtmlAssetNode)
 *
 * One of the functions used by parseHtmlAsset() to try to parse an HTML-Asset.
 *
 * This functions handel parsing an HTML asset with 2 ULs and an NO Index (no "Hop Links") in it.
 * Not to be confused with 'nothing but a single UL'
 * Not to be confused with 'more topics page'
 * Examples of HTML-Assets like this:
 *  http://kids.usa.gov/watch-videos/art-and-music-videos/index.shtml
 *  http://kids.usa.gov/play-games/art-and-music-games/index.shtml
 */
function parseHtmlAsset_DblUlsWithNoIndex($html, $HtmlAssetNode) {

    $ret = array();

    // Prepare to parse HTML and run XPath queries
    $doc = new DOMDocument();
    $doc->loadHTML($html);
    $xpath = new DOMXPath($doc);

    // Verify our expectations - 2 ULs, no H2s, 1 image, and 3 div.rxbodyfield
    if ( $xpath->query('//ul')->length !== 2 ) {
        //error_log('ul, ' . $xpath->query('//ul')->length);
        return false;
    }
    if ( $xpath->query('//h2')->length !== 0 ) {
        //error_log('h2, ' . $xpath->query('//h2')->length);
        return false;
    }
    if ( $xpath->query('//img')->length !== 1 ) {
        //error_log('img');
        return false;
    }
    if ( $xpath->query('//div[@class="rxbodyfield"]')->length !== 3 ) {
        //error_log('div');
        return false;
    }

    // Return 2 text-assets
    return array(
        array(
            'text-title' => trim($HtmlAssetNode->title) . ' - A',
            'text-content' => $doc->saveHTML( $xpath->query('//ul')->item(0) ),
            'based-on-nid' => $HtmlAssetNode->nid,
        ),
        array(
            'text-title' => trim($HtmlAssetNode->title) . ' - B',
            'text-content' => $doc->saveHTML( $xpath->query('//ul')->item(1) ),
            'based-on-nid' => $HtmlAssetNode->nid,
        ),
    );

}

/* 
 * array parseHtmlAsset_quadUlWithIndex(string $html, object $HtmlAssetNode)
 *
 * One of the functions used by parseHtmlAsset() to try to parse an HTML-Asset.
 *
 * This functions handel parsing an HTML asset with 2 ULs and an Index ("Hop Links") in it
 * Examples of HTML-Assets like this:
 *  http://kids.usa.gov/play-games/science/index.shtml
 *  http://kids.usa.gov/teens/online-safety/index.shtml
 */
function parseHtmlAsset_quadUlWithIndex($html, $HtmlAssetNode) {

    $ret = array();

    // Prepare to parse HTML and run XPath queries
    $doc = new DOMDocument();
    @$doc->loadHTML($html);
    $xpath = new DOMXPath($doc);

    // Verify our expectations - 6 ULs, No H1s, 5 H2s, 1st H2 = "Find on This Page", 1 div.frth_columnbox_container, no images
    if ( $xpath->query('//ul')->length !== 6 ) {
        //error_log('ul, ' . $xpath->query('//ul')->length);
        return false;
    }
    if ( $xpath->query('//h1')->length !== 0 ) {
        //error_log('h1, ' . $xpath->query('//h1')->length);
        return false;
    }
    if ( $xpath->query('//h2')->length !== 5 ) {
        //error_log('h2, ' . $xpath->query('//h2')->length);
        return false;
    }
    if ( trim($xpath->query('//h2')->item(0)->nodeValue) !== 'Find on This Page' ) {
        //error_log('No "Find on This Page" ');
        return false;
    }
    if ( $xpath->query('//div[@class="frth_columnbox_container"]')->length !== 1 ) {
        //error_log('div');
        return false;
    }
    if ( $xpath->query('//img')->length !== 0 ) {
        //error_log('img');
        return false;
    }

    // Return 2 text-assets
    return array(
        array(
            'text-title' => trim($xpath->query('//h2')->item(1)->nodeValue),
            'text-content' => $doc->saveHTML( $xpath->query('//ul')->item(2) ),
            'based-on-nid' => $HtmlAssetNode->nid,
        ),
        array(
            'text-title' => trim($xpath->query('//h2')->item(2)->nodeValue),
            'text-content' => $doc->saveHTML( $xpath->query('//ul')->item(3) ),
            'based-on-nid' => $HtmlAssetNode->nid,
        ),
        array(
            'text-title' => trim($xpath->query('//h2')->item(3)->nodeValue),
            'text-content' => $doc->saveHTML( $xpath->query('//ul')->item(4) ),
            'based-on-nid' => $HtmlAssetNode->nid,
        ),
        array(
            'text-title' => trim($xpath->query('//h2')->item(4)->nodeValue),
            'text-content' => $doc->saveHTML( $xpath->query('//ul')->item(5) ),
            'based-on-nid' => $HtmlAssetNode->nid,
        ),
    );
}

/* 
 * array parseHtmlAsset_UlsWithNoIndex(string $html, object $HtmlAssetNode)
 *
 * One of the functions used by parseHtmlAsset() to try to parse an HTML-Asset.
 *
 * This functions handel parsing an HTML asset with 2 ULs and an NO Index ("Hop Links") in it.
 */
function parseHtmlAsset_UlsWithNoIndex($html, $HtmlAssetNode) {

    $ret = array();

    // Prepare to parse HTML and run XPath queries
    $doc = new DOMDocument();
    $doc->loadHTML($html);
    $xpath = new DOMXPath($doc);

    // Verify our expectations - 2 ULs, 2 H1s, no H2s, no image, and 3 div.rxbodyfield
    if ( $xpath->query('//ul')->length !== 2 ) {
        //error_log('ul, ' . $xpath->query('//ul')->length);
        return false;
    }
    if ( $xpath->query('//h1')->length !== 2 ) {
        //error_log('h1, ' . $xpath->query('//h1')->length);
        return false;
    }
    if ( $xpath->query('//h2')->length !== 0 ) {
        //error_log('h2, ' . $xpath->query('//h2')->length);
        return false;
    }
    if ( $xpath->query('//img')->length !== 0 ) {
        //error_log('img');
        return false;
    }
    if ( $xpath->query('//div[@class="rxbodyfield"]')->length !== 3 ) {
        //error_log('div');
        return false;
    }

    // Return 2 text-assets
    return array(
        array(
            'text-title' => trim($xpath->query('//h1')->item(0)->nodeValue),
            'text-content' => $doc->saveHTML( $xpath->query('//ul')->item(0) ),
            'based-on-nid' => $HtmlAssetNode->nid,
        ),
        array(
            'text-title' => trim($xpath->query('//h1')->item(1)->nodeValue),
            'text-content' => $doc->saveHTML( $xpath->query('//ul')->item(1) ),
            'based-on-nid' => $HtmlAssetNode->nid,
        ),
    );
}

/* 
 * array parseHtmlAsset_doubleUlWithNoIndex(string $html, object $HtmlAssetNode)
 *
 * One of the functions used by parseHtmlAsset() to try to parse an HTML-Asset.
 *
 * This functions handel parsing an HTML asset with 2 ULs and an NO Index ("Hop Links") in it.
 * Not to be confused with 'nothing but a single UL'
 * Examples of HTML-Assets like this:
 *  http://kids.usa.gov/teachers/health-and-safety/index.shtml
 *  http://kids.usa.gov/teens/science/index.shtml
 *  http://kids.usa.gov/parents/math/index.shtml
 */
function parseHtmlAsset_UlsWithNoIndexMoreTopicsPage($html, $HtmlAssetNode) {

    $ret = array();

    // Prepare to parse HTML and run XPath queries
    $doc = new DOMDocument();
    $doc->loadHTML($html);
    $xpath = new DOMXPath($doc);

    // Verify our expectations - 1+ div.rxbodyfield, multiple H2s, multiple Ps, multiple As, no images
    if ( $xpath->query('//div[@class="rxbodyfield"]')->length === 0 ) {
        //error_log('div.rxbodyfield');
        return false;
    }
    if ( $xpath->query('//h2')->length < 2 ) {
        //error_log('h2');
        return false;
    }
    if ( $xpath->query('//p')->length < 2 ) {
        //error_log('p');
        return false;
    }
    if ( $xpath->query('//a')->length < 2 ) {
        //error_log('a');
        return false;
    }
    if ( $xpath->query('//img')->length !== 0 ) {
        //error_log('img');
        return false;
    }

    // Force the Site-Structure taxonomy-term that references this Asset to be a "More Topics" page
    $tids = findSiteStructTermsThatReferenceAsset($HtmlAssetNode->nid);
    foreach ( $tids as $tid ) {

        $term = taxonomy_term_load($tid);

        $term->field_type_of_page_to_generate = array(
            'und' => array(
                0 => array(
                    'value' => 'more'
                )
            )
        );

        taxonomy_term_save($term);
    }

    // For this case, we'll just rewrite all H2s as H3s
    $html = str_replace('<h3', '<h4', $html); // H3 => H4
    $html = str_replace('<H3', '<H4', $html); // H3 => H4
    $html = str_replace('</h3', '</h4', $html); // H3 => H4
    $html = str_replace('</H3', '</H4', $html); // H3 => H4

    // For this case, we'll just rewrite all H2s as H3s
    $html = str_replace('<h2', '<h3', $html); // H2 => H3
    $html = str_replace('<H2', '<H3', $html); // H2 => H3
    $html = str_replace('</h2', '</h3', $html); // H2 => H3
    $html = str_replace('</H2', '</H3', $html); // H2 => H3

    // Return text-asset
    return array(
        array(
            'text-title' => $HtmlAssetNode->title,
            'text-content' => $html,
            'based-on-nid' => $HtmlAssetNode->nid,
        )
    );
}

