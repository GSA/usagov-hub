<?php
/*
CREATE TABLE node_deleted (
nid INT PRIMARY KEY,
deletion_uid INT,
deletion_timestamp INT
);
 */

/*
 * Implements hook_menu()
 */
function cmp_soft_delete_menu()
{
    $items['node/%node/approve-soft-delete'] = array(
        'title' => "Approve Soft Delete",
        'page callback' => '_cmp_soft_delete_do_soft_delete',
        'page arguments' => array(1),
        'access callback' => 'cmp_soft_delete_access',
        'access arguments' => array('soft', 1),
        'type' => MENU_LOCAL_TASK,
        'context' => MENU_CONTEXT_INLINE,
    );
    $items['node/%node/undo-soft-delete'] = array(
        'title' => "Undo Soft Delete",
        'page callback' => '_cmp_soft_delete_undo_soft_delete',
        'page arguments' => array(1),
        'access callback' => 'cmp_soft_delete_access',
        'access arguments' => array('undo', 1),
        'type' => MENU_LOCAL_TASK,
        'context' => MENU_CONTEXT_INLINE,
    );
    $items['node/%node/approve-hard-delete'] = array(
        'title' => "Approve Hard Delete",
        'page callback' => '_cmp_soft_delete_do_hard_delete',
        'page arguments' => array(1),
        'access callback' => 'cmp_soft_delete_access',
        'access arguments' => array('hard', 1),
        'type' => MENU_LOCAL_TASK,
        'context' => MENU_CONTEXT_INLINE,
    );
    $items['node/%node/request-soft-delete'] = array(
        'title' => "Request Soft Delete",
        'page callback' => '_cmp_soft_delete_request_soft_delete',
        'page arguments' => array(1),
        'access callback' => 'cmp_soft_delete_access',
        'access arguments' => array('request', 1),
        'type' => MENU_LOCAL_TASK,
        'context' => MENU_CONTEXT_INLINE,
    );
    $items['node/%node/rescind-soft-delete'] = array(
        'title' => "Undelete",
        'page callback' => '_cmp_soft_delete_rescind_soft_delete',
        'page arguments' => array(1),
        'access callback' => 'cmp_soft_delete_access',
        'access arguments' => array('rescind', 1),
        'type' => MENU_LOCAL_TASK,
        'context' => MENU_CONTEXT_INLINE,
    );

    $items['admin/config/content/cmp_soft_delete'] = array(
        'title' => 'CMP Soft Delete',
        'description' => 'Configure Soft-Delete settings.',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('cmp_soft_delete_admin'),
        'access arguments' => array('administer site configuration'),
        'type' => MENU_NORMAL_ITEM
    );

    return $items;
}

function cmp_soft_delete_access($op,$node,$account=null)
{
    if (!$node || !in_array($op, array('soft', 'hard', 'undo', 'rescind', 'request'), TRUE)) {
      // If there was no node to check against, or the $op was not one of the
      // supported ones, we return access denied.
      return FALSE;
    }

    // If no user object is supplied, the access check is for the current user.
    if (empty($account)) {
      $account = $GLOBALS['user'];
    }

    if ( !node_access('delete',$node,$account) )
    {
      return FALSE;
    }

    if ( $op === 'hard' )
    {
        $everPublished = _cmp_soft_delete_node_ever_published($node);
        return ( !$everPublished || user_access('skip soft delete',$account) );
    } else if ( $op === 'soft' ) {
        return user_access('approve soft delete',$account);
    } else if ( $op === 'undo' ) {
        return user_access('approve soft delete',$account);
    } else if ( $op === 'rescind' ) {
        return node_access('delete',$node,$account);
    } else if ( $op === 'request' ) {
        return node_access('delete',$node,$account);
    }

    return FALSE;
}

function cmp_soft_delete_admin($form, &$form_state)
{
    $content_types = node_type_get_names();
    $form = array();
    $form['cmp_soft_delete_content_types']=array(
        '#title' => 'Soft Delete-able Content Types',
        '#discription' => 'Which content types will be Soft Deleted',
        '#type' => 'select',
        '#multiple' => true,
        '#empty_option' => 'none',
        '#empty_value' => 'none',
        '#size' =>count($content_types),
        '#options' => $content_types,
        '#default_value' => variable_get('cmp_soft_delete_content_types'),
     );

     return system_settings_form($form);
}

/**
 * Implements hook_permission().
 */
function cmp_soft_delete_permission()
{
  return array(
    'skip soft delete' => array(
      'title' => t('Skip soft delete'),
      'description' => t('Allows a user to hard delete content, overriding a soft delete'),
      'restrict access' => true,
    ),
    'approve soft delete' => array(
      'title' => t('Approve soft delete'),
      'description' => t('Allows a user to approve hard deletion requests'),
      'restrict access' => true,
    ),
  );
}

/**
 * Implements hook_form_alter().
 */
function cmp_soft_delete_form_alter(&$form, &$form_state, $form_id)
{
    $content_types = variable_get('cmp_soft_delete_content_types',array());

    if ( isset($form['#node'])
         && !empty($form['#node']->type)
         && in_array($form['#node']->type, $content_types)
         && $form_id == 'node_delete_confirm' )
    {
        global $user;

        // Override node_delete_confirm_submit() submit handler
        $form['#submit'][0] = 'cmp_soft_delete_node_delete_confirm_submit';

        if ( user_access('skip soft delete') )
        {
          $form['permanent'] = array(
              '#type' => 'checkbox',
              '#title' => t("Permanently delete this content"),
              '#default_value' => 0,
              '#attributes' => array()
          );
        }
    }

    $content_type_forms = $content_types;
    array_walk($content_type_forms,function(&$val,$key){ $val = $val.'_node_form'; });
    if (in_array($form_id, $content_type_forms))
    {
        if ( isset($form['nid']['#value']) )
        {
            $del = _cmp_soft_delete_get_node_stat($form['nid']['#value']);
            if ( $del['deletion_state']==='requested' )
            {
                if ( cmp_soft_delete_access('soft',$form['#node']) )
                {
                    drupal_set_message(t('Awaiting Soft Delete approval.')
                      . "<ul><li><a href='/node/"
                      . $form['nid']['#value'] . "/approve-soft-delete'>Approve Deletion</a></li> <li><a href='/node/"
                      . $form['nid']['#value'] . "/rescind-soft-delete'>Disapprove Deletion</a></li></ul>"
                    ,'warning');
                } else {
                    drupal_set_message(t('Awaiting Soft Delete approval.'),'warning');
                }
            } else if ( $del['deletion_state']==='soft' ) {

                /// This might be better off as a button on the bottom
                if ( cmp_soft_delete_access('undo',$form['#node']) )
                {
                    drupal_set_message(
                      t('Content is soft deleted.')
                        . "<ul><li><a href='/node/"
                        . $form['nid']['#value'] . "/undo-soft-delete'>Undo Deletion</a></li></ul>"
                    ,'warning');
                } else {
                  drupal_set_message(t('Content is soft deleted.'), 'warning');
                }
            }
        }
    }
}

/**
 * Provides a delete submit confirmation page handles soft and hard deletes.
 *
 * @param $form
 *   A form array
 * @param $form_state
 *   A form state
 */
function cmp_soft_delete_node_delete_confirm_submit($form, &$form_state)
{
    $node = node_load($form_state['values']['nid']);
    $everPublished = _cmp_soft_delete_node_ever_published($node);

    // never published OR ( permission to skip soft delete AND permanent )
    if ( !everPublished
         || ( !empty($form_state['values']['permanent'])
              && cmp_soft_delete_access('hard',$node) ) )
    {
        _cmp_soft_delete_do_hard_delete($node);
    // if you can soft delete things, go ahead and do that directly
    // } else if ( cmp_soft_delete_access('soft',$node) ) {
    //     _cmp_soft_delete_send_email_to_editors($node);
    //     _cmp_soft_delete_do_soft_delete($node);
    // if you can request a soft delete go ahead and do that
    } else if ( cmp_soft_delete_access('request',$node) ) {
        _cmp_soft_delete_send_email_to_editors($node);
        _cmp_soft_delete_request_soft_delete($node);
    }
    $form_state['redirect'] = '/admin/content';
}

function _cmp_soft_delete_request_soft_delete($node)
{
    global $user;

    $del = _cmp_soft_delete_get_node_stat($node->nid);
    if ( !empty($del['deletion_state']) )
    {
        if ( $del['deletion_state'] == 'soft' )
        {
            drupal_set_message("\"" . $node->title . "\" has already been soft deleted.", 'warning');
            drupal_goto("admin/workbench/delete");
            return TRUE;
        } else if ( $del['deletion_state'] == 'requested' ) {
            drupal_set_message("\"" . $node->title . "\" is already awaiting soft deletion.", 'warning');
            drupal_goto("admin/workbench/delete");
            return TRUE;
        }
    }

    /// set the state of the node to requesting deletion
    $res = db_merge('node_deleted')
        ->key(array(
            'nid' => $node->nid
        ))
        ->fields(array(
            'nid' => $node->nid,
            'deletion_uid' => $user->uid,
            'deletion_timestamp' => REQUEST_TIME,
            'deletion_state' => 'requested'
        ))
        ->execute();
    node_save($node);
    drupal_set_message("\"" . $node->title . "\" is awaiting soft deletion.", 'warning');
    drupal_goto("admin/workbench/delete");
    return TRUE;
}

function _cmp_soft_delete_do_soft_delete($node)
{
    global $user;

    // $everPublished = _cmp_soft_delete_node_ever_published($node);
    // if ( $everPublished && !user_access('approve soft delete') )
    // {
    //     drupal_set_message("You do not have permission to soft delete this content.", 'error');
    //     drupal_goto("admin/workbench");
    //     return;
    // }

    $del = _cmp_soft_delete_get_node_stat($node->nid);
    if ( !empty($del['deletion_state']) && $del['deletion_state'] == 'soft' )
    {
        drupal_set_message("\"" . $node->title . "\" has already been soft deleted.", 'warning');
        drupal_goto("admin/workbench/delete");
        return FALSE;
    }

    $res = db_merge('node_deleted')
        ->key(array(
            'nid' => $node->nid
        ))
        ->fields(array(
            'nid' => $node->nid,
            'deletion_uid' => $user->uid,
            'deletion_timestamp' => REQUEST_TIME,
            'deletion_state' => 'soft'
        ))
        ->execute();

    /// unpublish this node ?
    $node->status=0;
    node_save($node);
    drupal_set_message("\"" . $node->title . "\" has been soft deleted.", 'warning');

    // Tell USA Data Migration module that node has been deleted
    if ( module_exists('usa_data_migration') )
    {
        $nidsDeleted = variable_get('udm_nidsDeleted', array());
        // Limit tracking to the last 50 nodes to save db space
        // bad idea to put this udm logic into this module -
        $nidsDeleted = array_slice($nidsDeleted, -50);
        $nidsDeleted[] = $node->nid;
        variable_set('udm_nidsDeleted', $nidsDeleted);
    }
    drupal_goto("admin/workbench/delete");
    return TRUE;
}

function _cmp_soft_delete_rescind_soft_delete($node)
{
    return _cmp_soft_delete_undo_soft_delete($node);
}


function _cmp_soft_delete_undo_soft_delete($node)
{

    /// remove soft-deleted status
    $del = _cmp_soft_delete_get_node_stat($node->nid);
    if ( empty($del['deletion_timestamp']) )
    {
        drupal_set_message("This node is already not deleted.", 'warning');
        drupal_goto("admin/workbench/delete");
        return TRUE;
    }

    if ( $del['deletion_state'] == 'soft' )
    {
        drupal_set_message("\"" . $node->title . "\" has been un-deleted.", 'warning');
    } else if ( $del['deletion_state'] == 'requested' ) {
        drupal_set_message("\"" . $node->title . "\" soft delete request has been rescinded.", 'warning');
    }

    $num_deleted = db_delete("node_deleted")
                   ->condition("nid" , $node->nid)->execute();

    node_save($node);

    // Tell USA Data Migration module that node has been updated
    if ( module_exists('usa_data_migration') )
    {
      $nidsDeleted = variable_get('udm_nidsDeleted', array());
      // Limit tracking to the last 50 nodes to save db space
      // bad idea to put this udm logic into this module -
      $nidsDeleted = array_slice($nidsDeleted, -50);
      $nidsDeleted[] = $node->nid;
      variable_set('udm_nidsDeleted', $nidsDeleted);
    }

    drupal_goto("admin/workbench/delete");
    return TRUE;
}

function _cmp_soft_delete_do_hard_delete($node)
{
    // if ( !node_access('delete',$node) )
    // {
    //   drupal_set_message("You do not have permission to delete this content.", 'error');
    //   drupal_goto("admin/workbench");
    //   return;
    // }
    //
    // $everPublished = _cmp_soft_delete_node_ever_published($node);
    // if ( $everPublished && !user_access('skip soft delete') )
    // {
    //     drupal_set_message("You do not have permission to permenantly delete this content.", 'error');
    //     drupal_goto("admin/workbench");
    //     return;
    // }

    // clean up soft deleted table as well
    db_delete("node_deleted")
        ->condition("nid" , $node->nid)->execute();

    node_delete($node->nid);
    drupal_set_message("\"" . $node->title. "\" has been deleted.");

    drupal_goto("admin/workbench/delete");
    return TRUE;
}

// email to editors
function _cmp_soft_delete_send_email_to_editors($node)
{

    global $user;

    if (isset($node->field_workflow_notification_emai['und'][0]['value'])){

        $to = $node->field_workflow_notification_emai['und'][0]['value'];

        // Subject
        $params['subject'] = "Deletion Requested : " . $node->title;

        $alias = drupal_get_path_alias('node/'.$node->nid);
        // body
        $params['body'] = '<p><strong>Content item needs deleted - </strong><a href="node/' . $node->nid . '/edit">' . $node->title . '</a></p>';
        $params['body'] .= '<p><strong>Summary - </strong>' . $node->field_description[und][0]['value'] . '</p>';
        $params['body'] .= '<p><strong>User who requested deletion - </strong>' . $user->name . '</p>';
        $params['body'] .= '<p><strong>Last updated on - </strong> ' . date('Y-m-d - H:i') . '</p>';

        $from = variable_get('site_mail', '');

        $params['from'] = trim(mime_header_encode(variable_get('site_name', "CMP USA.gov")) . ' <' . $from . '>');
        $params['headers']['Reply-To'] = trim(mime_header_encode(variable_get('site_name', "CMP USA.gov")) . ' <' . variable_get('site_mail', '') . '>');

        $res = drupal_mail('cmp_misc', 'scanning_content', trim($to), language_default(), $params, $params['from']);

        if ($res["send"]) {
            drupal_set_message("Node deletion email is " . $to . ". Notification email has been sent." . $to);
        }
    }
    else {
        drupal_set_message("Workflow email wasn't set for the asset. Therefore system didn't send an email.", 'warning');
    }
}

function _cmp_soft_delete_node_ever_published($node)
{

    if (isset($node->workbench_moderation) && !empty($node->workbench_moderation['published']))
    {
        return true;
    }

    // Get the moderation history of this node.
    $query = db_select('workbench_moderation_node_history', 'm');
    $query->condition('m.nid', $node->nid)
        ->condition('m.state', 'published')
        ->fields('m',array('stamp'));

    $moderations = $query->execute()->rowCount();

    // Make sure it's an array.
    return !empty($moderations);
}

function _cmp_soft_delete_get_soft_deleted_nodes()
{
    $ret = array();
    $query = db_query("SELECT nid FROM node_deleted WHERE deletion_state='soft'");
    foreach($query as $row)
    {
        $ret[] = $row->nid;
    }
    return $ret;
}

function _cmp_soft_delete_get_requested_nodes()
{
    $ret = array();
    $query = db_query("SELECT nid FROM node_deleted WHERE deletion_state='requested'");
    foreach($query as $row)
    {
        $ret[] = $row->nid;
    }
    return $ret;
}


function _cmp_soft_delete_get_node_stat($nid)
{
   return db_query("SELECT deletion_uid, deletion_timestamp, deletion_state FROM node_deleted WHERE nid = :nid", array(":nid"=>$nid))->fetchAssoc();
}
